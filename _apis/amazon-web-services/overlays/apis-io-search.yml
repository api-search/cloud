name: Amazon Web Services
description: >-
  Amazon Web Services, Inc. is a subsidiary of Amazon that provides on-demand
  cloud computing platforms and APIs to individuals, companies, and governments,
  on a metered, pay-as-you-go basis. Clients will often use this in combination
  with autoscaling.
image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
url: >-
  https://raw.githubusercontent.com/apis-json/artisanal/main/apis/amazon-web-services.yml
created: 2023/11/6
modified: 2023/11/6
specificationVersion: '0.16'
tags: []
apis:
  - name: Amazon Certificate Manager (AC<)
    description: >-
      <fullname>Certificate Manager</fullname> <p>You can use Certificate
      Manager (ACM) to manage SSL/TLS certificates for your Amazon Web
      Services-based websites and applications. For more information about using
      ACM, see the <a
      href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate
      Manager User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags:
      - Certificates
      - Options
      - Update
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/acm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/acm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/acm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:acm
  - name: Amazon Identity and Access Management Access Analyzer
    description: >-
      <p>Identity and Access Management Access Analyzer helps you to set,
      verify, and refine your IAM policies by providing a suite of capabilities.
      Its features include findings for external and unused access, basic and
      custom policy checks for validating policies, and policy generation to
      generate fine-grained policies. To start using IAM Access Analyzer to
      identify external or unused access, you first need to create an
      analyzer.</p> <p> <b>External access analyzers</b> help identify potential
      risks of accessing resources by enabling you to identify any resource
      policies that grant access to an external principal. It does this by using
      logic-based reasoning to analyze resource-based policies in your Amazon
      Web Services environment. An external principal can be another Amazon Web
      Services account, a root user, an IAM user or role, a federated user, an
      Amazon Web Services service, or an anonymous user. You can also use IAM
      Access Analyzer to preview public and cross-account access to your
      resources before deploying permissions changes.</p> <p> <b>Unused access
      analyzers</b> help identify potential identity access risks by enabling
      you to identify unused IAM roles, unused access keys, unused console
      passwords, and IAM principals with unused service and action-level
      permissions.</p> <p>Beyond findings, IAM Access Analyzer provides basic
      and custom policy checks to validate IAM policies before deploying
      permissions changes. You can use policy generation to refine permissions
      by attaching a policy generated using access activity logged in CloudTrail
      logs. </p> <p>This guide describes the IAM Access Analyzer operations that
      you can call programmatically. For general information about IAM Access
      Analyzer, see <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html">Identity
      and Access Management Access Analyzer</a> in the <b>IAM User
      Guide</b>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags:
      - Archive
      - Rules
      - Generated
      - Identifiers
      - Policies
      - Access
      - Checks
      - Grants
      - Lists
      - Preview
      - Previews
      - Analyzer
      - Analyzers
      - Names
      - Update
      - Findings
      - Analyzed
      - Resources
      - V2
      - Generation
      - Start
      - ARN
      - Untag
      - Scans
      - Validate
      - Validations
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/accessanalyzer-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/accessanalyzer-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/accessanalyzer-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:accessanalyzer
  - name: AWS Migration Hub
    description: >-
      <p>The AWS Migration Hub API methods help to obtain server and application
      migration status and integrate your resource-specific migration tool by
      providing a programmatic interface to Migration Hub.</p> <p>Remember that
      you must set your AWS Migration Hub home region before you call any of
      these APIs, or a <code>HomeRegionNotSetException</code> error will be
      returned. Also, you must make the API calls while in your home region.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags:
      - Attributes
      - Resources
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/awsmigrationhub-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/awsmigrationhub-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/awsmigrationhub-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:awsmigrationhub
  - name: AWS Account Management
    description: <p>Operations for Amazon Web Services Account Management</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/account-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/account-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/account-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:account
  - name: Amazon Managed Service for Prometheus (AMP)
    description: >-
      <p>Amazon Managed Service for Prometheus is a serverless,
      Prometheus-compatible monitoring service for container metrics that makes
      it easier to securely monitor container environments at scale. With Amazon
      Managed Service for Prometheus, you can use the same open-source
      Prometheus data model and query language that you use today to monitor the
      performance of your containerized workloads, and also enjoy improved
      scalability, availability, and security without having to manage the
      underlying infrastructure.</p> <p>For more information about Amazon
      Managed Service for Prometheus, see the <a
      href="https://docs.aws.amazon.com/prometheus/latest/userguide/what-is-Amazon-Managed-Service-Prometheus.html">Amazon
      Managed Service for Prometheus</a> User Guide.</p> <p>Amazon Managed
      Service for Prometheus includes two APIs.</p> <ul> <li> <p>Use the Amazon
      Web Services API described in this guide to manage Amazon Managed Service
      for Prometheus resources, such as workspaces, rule groups, and alert
      managers.</p> </li> <li> <p>Use the <a
      href="https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-APIReference.html#AMP-APIReference-Prometheus-Compatible-Apis">Prometheus-compatible
      API</a> to work within your Prometheus workspace.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/amp-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/amp-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/amp-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:amp
  - name: AWS Amplify Admin
    description: <p>AWS Amplify Admin API</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/amplifybackend-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/amplifybackend-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/amplifybackend-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:amplifybackend
  - name: Amazon API Gateway
    description: >-
      <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps
      developers deliver robust, secure, and scalable mobile and web application
      back ends. API Gateway allows developers to securely connect mobile and
      web applications to APIs that run on Lambda, Amazon EC2, or other publicly
      addressable web services that are hosted outside of AWS.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/apigateway-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/apigateway-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/apigateway-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:apigateway
  - name: Amazon API Gateway V2
    description: <p>Amazon API Gateway V2</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/apigatewayv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/apigatewayv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/apigatewayv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:apigatewayv2
  - name: Amazon Web Services Private Certificate Authority
    description: >-
      <p>This is the <i>Amazon Web Services Private Certificate Authority API
      Reference</i>. It provides descriptions, syntax, and usage examples for
      each of the actions and data types involved in creating and managing a
      private certificate authority (CA) for your organization.</p> <p>The
      documentation for each action shows the API request parameters and the
      JSON response. Alternatively, you can use one of the Amazon Web Services
      SDKs to access an API that is tailored to the programming language or
      platform that you prefer. For more information, see <a
      href="https://aws.amazon.com/tools/#SDKs">Amazon Web Services
      SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a
      quota that determines the number of times the operation can be called per
      second. Amazon Web Services Private CA throttles API requests at different
      rates depending on the operation. Throttling means that Amazon Web
      Services Private CA rejects an otherwise valid request because the request
      exceeds the operation's quota for the number of requests per second. When
      a request is throttled, Amazon Web Services Private CA returns a <a
      href="https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html">ThrottlingException</a>
      error. Amazon Web Services Private CA does not guarantee a minimum request
      rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web
      Services Private CA quotas, or to request a quota increase, log into your
      Amazon Web Services account and visit the <a
      href="https://console.aws.amazon.com/servicequotas/">Service Quotas</a>
      console.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/acm-pca-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/acm-pca-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/acm-pca-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:acm-pca
  - name: Amazon Amplify UI Builder
    description: >-
      <p>The Amplify UI Builder API provides a programmatic interface for
      creating and configuring user interface (UI) component libraries and
      themes for use in your Amplify applications. You can then connect these UI
      components to an application's backend Amazon Web Services resources.</p>
      <p>You can also use the Amplify Studio visual designer to create UI
      components and model data for an app. For more information, see <a
      href="https://docs.amplify.aws/console/adminui/intro">Introduction</a> in
      the <i>Amplify Docs</i>.</p> <p>The Amplify Framework is a comprehensive
      set of SDKs, libraries, tools, and documentation for client app
      development. For more information, see the <a
      href="https://docs.amplify.aws/">Amplify Framework</a>. For more
      information about deploying an Amplify application to Amazon Web Services,
      see the <a
      href="https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html">Amplify
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/amplifyuibuilder-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/amplifyuibuilder-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/amplifyuibuilder-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:amplifyuibuilder
  - name: Amazon API Gateway Management
    description: >-
      <p>The Amazon API Gateway Management API allows you to directly manage
      runtime aspects of your deployed APIs. To use it, you must explicitly set
      the SDK's endpoint to point to the endpoint of your deployed API. The
      endpoint will be of the form
      https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be
      the endpoint corresponding to your API's custom domain and base path, if
      applicable.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/apigatewaymanagementapi-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/apigatewaymanagementapi-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/apigatewaymanagementapi-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:apigatewaymanagementapi
  - name: Amazon Application Configuration
    description: >-
      <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to
      create, manage, and quickly deploy application configurations. AppConfig
      supports controlled deployments to applications of any size and includes
      built-in validation checks and monitoring. You can use AppConfig with
      applications hosted on Amazon EC2 instances, Lambda, containers, mobile
      applications, or IoT devices.</p> <p>To prevent errors when deploying
      application configurations, especially for production systems where a
      simple typo could cause an unexpected outage, AppConfig includes
      validators. A validator provides a syntactic or semantic check to ensure
      that the configuration you want to deploy works as intended. To validate
      your application configuration data, you provide a schema or an Amazon Web
      Services Lambda function that runs against the configuration. The
      configuration deployment or update can only proceed when the configuration
      data is valid.</p> <p>During a configuration deployment, AppConfig
      monitors the application to ensure that the deployment is successful. If
      the system encounters an error, AppConfig rolls back the change to
      minimize impact for your application users. You can configure a deployment
      strategy for each application or environment that includes deployment
      criteria, including velocity, bake time, and alarms to monitor. Similar to
      error monitoring, if a deployment triggers an alarm, AppConfig
      automatically rolls back to the previous version. </p> <p>AppConfig
      supports multiple use cases. Here are some examples:</p> <ul> <li> <p>
      <b>Feature flags</b>: Use AppConfig to turn on new features that require a
      timely deployment, such as a product launch or announcement. </p> </li>
      <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce
      changes to your application that can only be tested with production
      traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow
      premium subscribers to access paid content. </p> </li> <li> <p>
      <b>Operational issues</b>: Use AppConfig to reduce stress on your
      application when a dependency or other external factor impacts the
      system.</p> </li> </ul> <p>This reference is intended to be used with the
      <a
      href="http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html">AppConfig
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appconfig-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appconfig-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appconfig-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appconfig
  - name: Amazon Application Configuration Data
    description: >-
      <p>AppConfig Data provides the data plane APIs your application uses to
      retrieve configuration data. Here's how it works:</p> <p>Your application
      retrieves configuration data by first establishing a configuration session
      using the AppConfig Data <a>StartConfigurationSession</a> API action. Your
      session's client then makes periodic calls to
      <a>GetLatestConfiguration</a> to check for and retrieve the latest data
      available.</p> <p>When calling <code>StartConfigurationSession</code>,
      your code sends the following information:</p> <ul> <li> <p>Identifiers
      (ID or name) of an AppConfig application, environment, and configuration
      profile that the session tracks.</p> </li> <li> <p>(Optional) The minimum
      amount of time the session's client must wait between calls to
      <code>GetLatestConfiguration</code>.</p> </li> </ul> <p>In response,
      AppConfig provides an <code>InitialConfigurationToken</code> to be given
      to the session's client and used the first time it calls
      <code>GetLatestConfiguration</code> for that session.</p> <important>
      <p>This token should only be used once in your first call to
      <code>GetLatestConfiguration</code>. You <i>must</i> use the new token in
      the <code>GetLatestConfiguration</code> response
      (<code>NextPollConfigurationToken</code>) in each subsequent call to
      <code>GetLatestConfiguration</code>.</p> </important> <p>When calling
      <code>GetLatestConfiguration</code>, your client code sends the most
      recent <code>ConfigurationToken</code> value it has and receives in
      response:</p> <ul> <li> <p> <code>NextPollConfigurationToken</code>: the
      <code>ConfigurationToken</code> value to use on the next call to
      <code>GetLatestConfiguration</code>.</p> </li> <li> <p>
      <code>NextPollIntervalInSeconds</code>: the duration the client should
      wait before making its next call to <code>GetLatestConfiguration</code>.
      This duration may vary over the course of the session, so it should be
      used instead of the value sent on the
      <code>StartConfigurationSession</code> call.</p> </li> <li> <p>The
      configuration: the latest data intended for the session. This may be empty
      if the client already has the latest version of the configuration.</p>
      </li> </ul> <important> <p>The <code>InitialConfigurationToken</code> and
      <code>NextPollConfigurationToken</code> should only be used once. To
      support long poll use cases, the tokens are valid for up to 24 hours. If a
      <code>GetLatestConfiguration</code> call uses an expired token, the system
      returns <code>BadRequestException</code>.</p> </important> <p>For more
      information and to view example CLI commands that show how to retrieve a
      configuration using the AppConfig Data
      <code>StartConfigurationSession</code> and
      <code>GetLatestConfiguration</code> API actions, see <a
      href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Retrieving
      the configuration</a> in the <i>AppConfig User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appconfigdata-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appconfigdata-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appconfigdata-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appconfigdata
  - name: AWS Application Fabric
    description: >-
      <p>Amazon Web Services AppFabric quickly connects software as a service
      (SaaS) applications across your organization. This allows IT and security
      teams to easily manage and secure applications using a standard schema,
      and employees can complete everyday tasks faster using generative
      artificial intelligence (AI). You can use these APIs to complete AppFabric
      tasks, such as setting up audit log ingestions or viewing user access. For
      more information about AppFabric, including the required permissions to
      use the service, see the <a
      href="https://docs.aws.amazon.com/appfabric/latest/adminguide/">Amazon Web
      Services AppFabric Administration Guide</a>. For more information about
      using the Command Line Interface (CLI) to manage your AppFabric resources,
      see the <a
      href="https://docs.aws.amazon.com/cli/latest/reference/appfabric/index.html">AppFabric
      section of the CLI Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appfabric-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appfabric-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appfabric-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appfabric
  - name: Amazon AppFlow
    description: >-
      <p>Welcome to the Amazon AppFlow API reference. This guide is for
      developers who need detailed information about the Amazon AppFlow API
      operations, data types, and errors. </p> <p>Amazon AppFlow is a fully
      managed integration service that enables you to securely transfer data
      between software as a service (SaaS) applications like Salesforce,
      Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and
      Amazon Redshift. </p> <p>Use the following links to get started on the
      Amazon AppFlow API:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html">Actions</a>:
      An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li>
      <p> <a
      href="https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html">Data
      types</a>: An alphabetical list of all Amazon AppFlow data types.</p>
      </li> <li> <p> <a
      href="https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html">Common
      parameters</a>: Parameters that all Query operations can use.</p> </li>
      <li> <p> <a
      href="https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html">Common
      errors</a>: Client and server errors that all operations can return.</p>
      </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you
      review the <a
      href="https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html">Amazon
      AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use
      vendor-specific mechanisms for OAuth, and include applicable OAuth
      attributes (such as <code>auth-code</code> and <code>redirecturi</code>)
      with the connector-specific <code>ConnectorProfileProperties</code> when
      creating a new connector profile using Amazon AppFlow API operations. For
      example, Salesforce users can refer to the <a
      href="https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm">
      <i>Authorize Apps with OAuth</i> </a> documentation.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appflow-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appflow-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appflow-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appflow
  - name: Amazon CloudWatch Application Insights
    description: >-
      <fullname>Amazon CloudWatch Application Insights</fullname> <p> Amazon
      CloudWatch Application Insights is a service that helps you detect common
      problems with your applications. It enables you to pinpoint the source of
      issues in your applications (built with technologies such as Microsoft
      IIS, .NET, and Microsoft SQL Server), by providing key insights into
      detected problems.</p> <p>After you onboard your application, CloudWatch
      Application Insights identifies, recommends, and sets up metrics and logs.
      It continuously analyzes and correlates your metrics and logs for unusual
      behavior to surface actionable problems with your application. For
      example, if your application is slow and unresponsive and leading to HTTP
      500 errors in your Application Load Balancer (ALB), Application Insights
      informs you that a memory pressure problem with your SQL Server database
      is occurring. It bases this analysis on impactful metrics and log errors.
      </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/application-insights-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/application-insights-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/application-insights-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:application-insights
  - name: application-autoscaling
    description: >-
      <p>With Application Auto Scaling, you can configure automatic scaling for
      the following resources:</p> <ul> <li> <p>Amazon AppStream 2.0 fleets</p>
      </li> <li> <p>Amazon Aurora Replicas</p> </li> <li> <p>Amazon Comprehend
      document classification and entity recognizer endpoints</p> </li> <li>
      <p>Amazon DynamoDB tables and global secondary indexes throughput
      capacity</p> </li> <li> <p>Amazon ECS services</p> </li> <li> <p>Amazon
      ElastiCache for Redis clusters (replication groups)</p> </li> <li>
      <p>Amazon EMR clusters</p> </li> <li> <p>Amazon Keyspaces (for Apache
      Cassandra) tables</p> </li> <li> <p>Lambda function provisioned
      concurrency</p> </li> <li> <p>Amazon Managed Streaming for Apache Kafka
      broker storage</p> </li> <li> <p>Amazon Neptune clusters</p> </li> <li>
      <p>Amazon SageMaker endpoint variants</p> </li> <li> <p>Amazon SageMaker
      Serverless endpoint provisioned concurrency</p> </li> <li> <p>Amazon
      SageMaker inference components</p> </li> <li> <p>Spot Fleets (Amazon
      EC2)</p> </li> <li> <p>Custom resources provided by your own applications
      or services</p> </li> </ul> <p>To learn more about Application Auto
      Scaling, see the <a
      href="https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html">Application
      Auto Scaling User Guide</a>.</p> <p> <b>API Summary</b> </p> <p>The
      Application Auto Scaling service API includes three key sets of actions:
      </p> <ul> <li> <p>Register and manage scalable targets - Register Amazon
      Web Services or custom resources as scalable targets (a resource that
      Application Auto Scaling can scale), set minimum and maximum capacity
      limits, and retrieve information on existing scalable targets.</p> </li>
      <li> <p>Configure and manage automatic scaling - Define scaling policies
      to dynamically scale your resources in response to CloudWatch alarms,
      schedule one-time or recurring scaling actions, and retrieve your recent
      scaling activity history.</p> </li> <li> <p>Suspend and resume scaling -
      Temporarily suspend and later resume automatic scaling by calling the <a
      href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html">RegisterScalableTarget</a>
      API action for any Application Auto Scaling scalable target. You can
      suspend and resume (individually or in combination) scale-out activities
      that are triggered by a scaling policy, scale-in activities that are
      triggered by a scaling policy, and scheduled scaling.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/application-autoscaling-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/application-autoscaling-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/application-autoscaling-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:application-autoscaling
  - name: appintegrations
    description: >-
      <p>The Amazon AppIntegrations service enables you to configure and reuse
      connections to external applications.</p> <p>For information about how you
      can use external applications with Amazon Connect, see <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/crm.html">Set
      up pre-built integrations</a> and <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html">Deliver
      information to agents using Amazon Connect Wisdom</a> in the <i>Amazon
      Connect Administrator Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appintegrations-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appintegrations-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appintegrations-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appintegrations
  - name: applicationcostprofiler
    description: >-
      <p>This reference provides descriptions of the AWS Application Cost
      Profiler API.</p> <p>The AWS Application Cost Profiler API provides
      programmatic access to view, create, update, and delete application cost
      report definitions, as well as to import your usage data into the
      Application Cost Profiler service.</p> <p>For more information about using
      this service, see the <a
      href="https://docs.aws.amazon.com/application-cost-profiler/latest/userguide/introduction.html">AWS
      Application Cost Profiler User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/applicationcostprofiler-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/applicationcostprofiler-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/applicationcostprofiler-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:applicationcostprofiler
  - name: appmesh
    description: >-
      <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it
      easy to monitor and
               control containerized microservices. App Mesh standardizes how your microservices
               communicate, giving you end-to-end visibility and helping to ensure high-availability for
               your applications.</p>
               <p>App Mesh gives you consistent visibility and network traffic controls for every
               microservice in an application. You can use App Mesh with Amazon ECS
               (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
               <note>
                  <p>App Mesh supports containerized microservice applications that use service discovery
                  naming for their components. To use App Mesh, you must have a containerized application
                  running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                  more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                     <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.
                  For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                     for Services and Pods</a> in the Kubernetes documentation.</p>
               </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appmesh-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appmesh-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appmesh-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appmesh
  - name: appsync
    description: >-
      <p>AppSync provides API actions for creating and interacting with data
      sources using GraphQL from your application.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appsync-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appsync-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appsync-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appsync
  - name: appstream
    description: >-
      <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon
      AppStream 2.0 API Reference</i>. This documentation provides descriptions
      and syntax for each of the actions and data types in AppStream 2.0.
      AppStream 2.0 is a fully managed, secure application streaming service
      that lets you stream desktop applications to users without rewriting
      applications. AppStream 2.0 manages the AWS resources that are required to
      host and run your applications, scales automatically, and provides access
      to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API
      operations by using an interface VPC endpoint (interface endpoint). For
      more information, see <a
      href="https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html">Access
      AppStream 2.0 API Operations and CLI Commands Through an Interface VPC
      Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
      </note> <p>To learn more about AppStream 2.0, see the following
      resources:</p> <ul> <li> <p> <a
      href="http://aws.amazon.com/appstream2">Amazon AppStream 2.0 product
      page</a> </p> </li> <li> <p> <a
      href="http://aws.amazon.com/documentation/appstream2">Amazon AppStream 2.0
      documentation</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/appstream-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/appstream-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/appstream-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:appstream
  - name: amplify
    description: >-
      <p>Amplify enables developers to develop and deploy cloud-powered mobile
      and web apps. Amplify Hosting provides a continuous delivery and hosting
      service for web applications. For more information, see the <a
      href="https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html">Amplify
      Hosting User Guide</a>. The Amplify Framework is a comprehensive set of
      SDKs, libraries, tools, and documentation for client app development. For
      more information, see the <a href="https://docs.amplify.aws/">Amplify
      Framework.</a> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/amplify-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/amplify-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/amplify-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:amplify
  - name: apprunner
    description: >-
      <fullname>App Runner</fullname> <p>App Runner is an application service
      that provides a fast, simple, and cost-effective way to go directly from
      an existing container image or source code to a running service in the
      Amazon Web Services Cloud in seconds. You don't need to learn new
      technologies, decide which compute service to use, or understand how to
      provision and configure Amazon Web Services resources.</p> <p>App Runner
      connects directly to your container registry or source code repository. It
      provides an automatic delivery pipeline with fully managed operations,
      high performance, scalability, and security.</p> <p>For more information
      about App Runner, see the <a
      href="https://docs.aws.amazon.com/apprunner/latest/dg/">App Runner
      Developer Guide</a>. For release information, see the <a
      href="https://docs.aws.amazon.com/apprunner/latest/relnotes/">App Runner
      Release Notes</a>.</p> <p> To install the Software Development Kits
      (SDKs), Integrated Development Environment (IDE) Toolkits, and command
      line tools that you can use to access the API, see <a
      href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
      <p> <b>Endpoints</b> </p> <p>For a list of Region-specific endpoints that
      App Runner supports, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/apprunner.html">App
      Runner endpoints and quotas</a> in the <i>Amazon Web Services General
      Reference</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/apprunner-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/apprunner-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/apprunner-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:apprunner
  - name: athena
    description: >-
      <p>Amazon Athena is an interactive query service that lets you use
      standard SQL to analyze data directly in Amazon S3. You can point Athena
      at your data in Amazon S3 and run ad-hoc queries and get results in
      seconds. Athena is serverless, so there is no infrastructure to set up or
      manage. You pay only for the queries you run. Athena scales
      automatically—executing queries in parallel—so results are fast, even with
      large datasets and complex queries. For more information, see <a
      href="http://docs.aws.amazon.com/athena/latest/ug/what-is.html">What is
      Amazon Athena</a> in the <i>Amazon Athena User Guide</i>.</p> <p>If you
      connect to Athena using the JDBC driver, use version 1.1.0 of the driver
      or later with the Amazon Athena API. Earlier version drivers do not
      support the API. For more information and to download the driver, see <a
      href="https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html">Accessing
      Amazon Athena with JDBC</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/athena-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/athena-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/athena-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:athena
  - name: autoscaling
    description: >-
      <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is
      designed to automatically launch and terminate EC2 instances based on
      user-defined scaling policies, scheduled actions, and health checks.</p>
      <p>For more information, see the <a
      href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/">Amazon EC2
      Auto Scaling User Guide</a> and the <a
      href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html">Amazon
      EC2 Auto Scaling API Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/autoscaling-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/autoscaling-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/autoscaling-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:autoscaling
  - name: b2bi
    description: >-
      <p>This is the <i>Amazon Web Services B2B Data Interchange API
      Reference</i>. It provides descriptions, API request parameters, and the
      XML response for each of the B2BI API actions.</p> <p>B2BI enables
      automated exchange of EDI (electronic data interchange) based
      business-critical transactions at cloud scale, with elasticity and
      pay-as-you-go pricing. Businesses use EDI documents to exchange
      transactional data with trading partners, such as suppliers and end
      customers, using standardized formats such as X12.</p> <note> <p>Rather
      than actually running a command, you can use the
      <code>--generate-cli-skeleton</code> parameter with any API call to
      generate and display a parameter template. You can then use the generated
      template to customize and use as input on a later command. For details,
      see <a
      href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-skeleton.html#cli-usage-skeleton-generate">Generate
      and use a parameter skeleton file</a>.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/b2bi-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/b2bi-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/b2bi-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:b2bi
  - name: auditmanager
    description: >-
      <p>Welcome to the Audit Manager API reference. This guide is for
      developers who need detailed information about the Audit Manager API
      operations, data types, and errors. </p> <p>Audit Manager is a service
      that provides automated evidence collection so that you can continually
      audit your Amazon Web Services usage. You can use it to assess the
      effectiveness of your controls, manage risk, and simplify compliance.</p>
      <p>Audit Manager provides prebuilt frameworks that structure and automate
      assessments for a given compliance standard. Frameworks include a prebuilt
      collection of controls with descriptions and testing procedures. These
      controls are grouped according to the requirements of the specified
      compliance standard or regulation. You can also customize frameworks and
      controls to support internal audits with specific requirements. </p>
      <p>Use the following links to get started with the Audit Manager API:</p>
      <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html">Actions</a>:
      An alphabetical list of all Audit Manager API operations.</p> </li> <li>
      <p> <a
      href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html">Data
      types</a>: An alphabetical list of all Audit Manager data types.</p> </li>
      <li> <p> <a
      href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html">Common
      parameters</a>: Parameters that all operations can use.</p> </li> <li> <p>
      <a
      href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html">Common
      errors</a>: Client and server errors that all operations can return.</p>
      </li> </ul> <p>If you're new to Audit Manager, we recommend that you
      review the <a
      href="https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html">
      Audit Manager User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/auditmanager-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/auditmanager-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/auditmanager-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:auditmanager
  - name: arc-zonal-shift
    description: >-
      <p>Welcome to the Zonal Shift API Reference Guide for Amazon Route 53
      Application Recovery Controller (Route 53 ARC).</p> <p>You can start a
      zonal shift to move traffic for a load balancer resource away from an
      Availability Zone to help your application recover quickly from an
      impairment in an Availability Zone. For example, you can recover your
      application from a developer's bad code deployment or from an Amazon Web
      Services infrastructure failure in a single Availability Zone.</p> <p>You
      can also configure zonal autoshift for a load balancer resource. Zonal
      autoshift is a capability in Route 53 ARC where Amazon Web Services shifts
      away application resource traffic from an Availability Zone, on your
      behalf, to help reduce your time to recovery during events. Amazon Web
      Services shifts away traffic for resources that are enabled for zonal
      autoshift whenever Amazon Web Services determines that there's an issue in
      the Availability Zone that could potentially affect customers.</p> <p>To
      ensure that zonal autoshift is safe for your application, you must also
      configure practice runs when you enable zonal autoshift for a resource.
      Practice runs start weekly zonal shifts for a resource, to shift traffic
      for the resource out of an Availability Zone. Practice runs make sure, on
      a regular basis, that you have enough capacity in all the Availability
      Zones in an Amazon Web Services Region for your application to continue to
      operate normally when traffic for a resource is shifted away from one
      Availability Zone.</p> <important> <p>You must prescale resource capacity
      in all Availability Zones in the Region where your application is
      deployed, before you configure practice runs or enable zonal autoshift for
      a resource. You should not rely on scaling on demand when an autoshift or
      practice run starts. </p> </important> <p>For more information about using
      zonal shift and zonal autoshift, see the <a
      href="https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route53-recovery.html">Amazon
      Route 53 Application Recovery Controller Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/arc-zonal-shift-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/arc-zonal-shift-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/arc-zonal-shift-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:arc-zonal-shift
  - name: autoscaling-plans
    description: >-
      <fullname>AWS Auto Scaling</fullname> <p>Use AWS Auto Scaling to create
      scaling plans for your applications to automatically scale your scalable
      AWS resources. </p> <p> <b>API Summary</b> </p> <p>You can use the AWS
      Auto Scaling service API to accomplish the following tasks:</p> <ul> <li>
      <p>Create and manage scaling plans</p> </li> <li> <p>Define target
      tracking scaling policies to dynamically scale your resources based on
      utilization</p> </li> <li> <p>Scale Amazon EC2 Auto Scaling groups using
      predictive scaling and dynamic scaling to scale your Amazon EC2 capacity
      faster</p> </li> <li> <p>Set minimum and maximum capacity limits</p> </li>
      <li> <p>Retrieve information on existing scaling plans</p> </li> <li>
      <p>Access current forecast data and historical forecast data for up to 56
      days previous</p> </li> </ul> <p>To learn more about AWS Auto Scaling,
      including information about granting IAM users required permissions for
      AWS Auto Scaling actions, see the <a
      href="https://docs.aws.amazon.com/autoscaling/plans/userguide/what-is-aws-auto-scaling.html">AWS
      Auto Scaling User Guide</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/autoscaling-plans-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/autoscaling-plans-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/autoscaling-plans-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:autoscaling-plans
  - name: backup-gateway
    description: >-
      <p><fullname>Backup gateway</fullname> <p>Backup gateway connects Backup
      to your hypervisor, so you can create, store, and restore backups of your
      virtual machines (VMs) anywhere, whether on-premises or in the VMware
      Cloud (VMC) on Amazon Web Services.</p> <p>Add on-premises resources by
      connecting to a hypervisor through a gateway. Backup will automatically
      discover the resources in your hypervisor.</p> <p>Use Backup to assign
      virtual or on-premises resources to a backup plan, or run on-demand
      backups. Once you have backed up your resources, you can view them and
      restore them like any resource supported by Backup.</p> <p>To download the
      Amazon Web Services software to get started, navigate to the Backup
      console, choose <b>Gateways</b>, then choose <b>Create
      gateway</b>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/backup-gateway-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/backup-gateway-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/backup-gateway-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:backup-gateway
  - name: backupstorage
    description: The frontend service for Cryo Storage.
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/backupstorage-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/backupstorage-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/backupstorage-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:backupstorage
  - name: backup
    description: >-
      <fullname>Backup</fullname> <p>Backup is a unified backup service designed
      to protect Amazon Web Services services and their associated data. Backup
      simplifies the creation, migration, restoration, and deletion of backups,
      while also providing reporting and auditing.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/backup-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/backup-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/backup-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:backup
  - name: batch
    description: >-
      <fullname>Batch</fullname> <p>Using Batch, you can run batch computing
      workloads on the Amazon Web Services Cloud. Batch computing is a common
      means for developers, scientists, and engineers to access large amounts of
      compute resources. Batch uses the advantages of the batch computing to
      remove the undifferentiated heavy lifting of configuring and managing
      required infrastructure. At the same time, it also adopts a familiar batch
      computing software approach. You can use Batch to efficiently provision
      resources d, and work toward eliminating capacity constraints, reducing
      your overall compute costs, and delivering results more quickly.</p> <p>As
      a fully managed service, Batch can run batch computing workloads of any
      scale. Batch automatically provisions compute resources and optimizes
      workload distribution based on the quantity and scale of your specific
      workloads. With Batch, there's no need to install or manage batch
      computing software. This means that you can focus on analyzing results and
      solving your specific problems instead.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/batch-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/batch-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/batch-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:batch
  - name: bcm-data-exports
    description: >-
      <p>You can use the Data Exports API to create customized exports from
      multiple Amazon Web Services cost management and billing datasets, such as
      cost and usage data and cost optimization recommendations.</p> <p>The Data
      Exports API provides the following endpoint:</p> <ul> <li>
      <p>https://bcm-data-exports.us-east-1.api.aws</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/bcm-data-exports-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/bcm-data-exports-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/bcm-data-exports-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:bcm-data-exports
  - name: bedrock-agent-runtime
    description: <p>Amazon Bedrock Agent</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/bedrock-agent-runtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/bedrock-agent-runtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/bedrock-agent-runtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:bedrock-agent-runtime
  - name: bedrock
    description: >-
      <p>Describes the API operations for creating and managing Amazon Bedrock
      models.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/bedrock-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/bedrock-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/bedrock-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:bedrock
  - name: bedrock-agent
    description: >-
      <p>An example service, deployed with the Octane Service creator, which
      will echo the string</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/bedrock-agent-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/bedrock-agent-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/bedrock-agent-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:bedrock-agent
  - name: bedrock-runtime
    description: >-
      <p>Describes the API operations for running inference using Bedrock
      models.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/bedrock-runtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/bedrock-runtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/bedrock-runtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:bedrock-runtime
  - name: billingconductor
    description: >-
      <p>Amazon Web Services Billing Conductor is a fully managed service that
      you can use to customize a <a
      href="https://docs.aws.amazon.com/billingconductor/latest/userguide/understanding-eb.html#eb-other-definitions">proforma</a>
      version of your billing data each month, to accurately show or chargeback
      your end customers. Amazon Web Services Billing Conductor doesn't change
      the way you're billed by Amazon Web Services each month by design.
      Instead, it provides you with a mechanism to configure, generate, and
      display rates to certain customers over a given billing period. You can
      also analyze the difference between the rates you apply to your accounting
      groupings relative to your actual rates from Amazon Web Services. As a
      result of your Amazon Web Services Billing Conductor configuration, the
      payer account can also see the custom rate applied on the billing details
      page of the <a href="https://console.aws.amazon.com/billing">Amazon Web
      Services Billing console</a>, or configure a cost and usage report per
      billing group.</p> <p>This documentation shows how you can configure
      Amazon Web Services Billing Conductor using its API. For more information
      about using the <a
      href="https://console.aws.amazon.com/billingconductor/">Amazon Web
      Services Billing Conductor</a> user interface, see the <a
      href="https://docs.aws.amazon.com/billingconductor/latest/userguide/what-is-billingconductor.html">
      Amazon Web Services Billing Conductor User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/billingconductor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/billingconductor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/billingconductor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:billingconductor
  - name: budgets
    description: >-
      <p>Use the Amazon Web Services Budgets API to plan your service usage,
      service costs, and instance reservations. This API reference provides
      descriptions, syntax, and usage examples for each of the actions and data
      types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide
      you with a way to see the following information:</p> <ul> <li> <p>How
      close your plan is to your budgeted amount or to the free tier limits</p>
      </li> <li> <p>Your usage-to-date, including how much you've used of your
      Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges
      from Amazon Web Services, and how much your predicted usage will accrue in
      charges by the end of the month</p> </li> <li> <p>How much of your budget
      has been used</p> </li> </ul> <p>Amazon Web Services updates your budget
      status several times a day. Budgets track your unblended costs,
      subscriptions, refunds, and RIs. You can create the following types of
      budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to
      spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how
      much you want to use one or more services.</p> </li> <li> <p> <b>RI
      utilization budgets</b> - Define a utilization threshold, and receive
      alerts when your RI usage falls below that threshold. This lets you see if
      your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage
      budgets</b> - Define a coverage threshold, and receive alerts when the
      number of your instance hours that are covered by RIs fall below that
      threshold. This lets you see how much of your instance usage is covered by
      a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web
      Services Budgets API provides the following endpoint:</p> <ul> <li>
      <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about
      costs that are associated with the Amazon Web Services Budgets API, see <a
      href="https://aws.amazon.com/aws-cost-management/pricing/">Amazon Web
      Services Cost Management Pricing</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/budgets-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/budgets-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/budgets-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:budgets
  - name: ce
    description: >-
      <p>You can use the Cost Explorer API to programmatically query your cost
      and usage data. You can query for aggregated data such as total monthly
      costs or total daily usage. You can also query for granular data. This
      might include the number of daily write operations for Amazon DynamoDB
      database tables in your production environment. </p> <p>Service
      Endpoint</p> <p>The Cost Explorer API provides the following endpoint:</p>
      <ul> <li> <p> <code>https://ce.us-east-1.amazonaws.com</code> </p> </li>
      </ul> <p>For information about the costs that are associated with the Cost
      Explorer API, see <a
      href="http://aws.amazon.com/aws-cost-management/pricing/">Amazon Web
      Services Cost Management Pricing</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ce-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ce-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ce-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ce
  - name: chime
    description: >-
      <important> <p> <b>Most of these APIs are no longer supported and will not
      be updated.</b> We recommend using the latest versions in the <a
      href="https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html">Amazon
      Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the
      latest versions requires migrating to dedicated namespaces. For more
      information, refer to <a
      href="https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html">Migrating
      from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer
      Guide</i>.</p> </important> <p>The Amazon Chime application programming
      interface (API) is designed so administrators can perform key tasks, such
      as creating and managing Amazon Chime accounts, users, and Voice
      Connectors. This guide provides detailed information about the Amazon
      Chime API, including operations, types, inputs and outputs, and error
      codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS
      CLI), or the REST API to make API calls for Amazon Chime. We recommend
      using an AWS SDK or the AWS CLI. The page for each API action contains a
      <i>See Also</i> section that includes links to information about using the
      action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using
      an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a
      signature for request authentication. The SDK clients authenticate your
      requests by using access keys that you provide. For more information about
      AWS SDKs, see the <a href="http://aws.amazon.com/developer/">AWS Developer
      Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access
      keys with the AWS CLI to make API calls. For information about setting up
      the AWS CLI, see <a
      href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html">Installing
      the AWS Command Line Interface</a> in the <i>AWS Command Line Interface
      User Guide</i>. For a list of available Amazon Chime commands, see the <a
      href="https://docs.aws.amazon.com/cli/latest/reference/chime/index.html">Amazon
      Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd>
      <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you
      must authenticate your request by providing a signature. Amazon Chime
      supports Signature Version 4. For more information, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4 Signing Process</a> in the <i>Amazon Web Services General
      Reference</i>.</p> <p>When making REST API calls, use the service name
      <code>chime</code> and REST endpoint
      <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl>
      <p>Administrative permissions are controlled using AWS Identity and Access
      Management (IAM). For more information, see <a
      href="https://docs.aws.amazon.com/chime/latest/ag/security-iam.html">Identity
      and Access Management for Amazon Chime</a> in the <i>Amazon Chime
      Administration Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime
  - name: chime-sdk-identity
    description: >-
      <p>The Amazon Chime SDK Identity APIs in this section allow software
      developers to create and manage unique instances of their messaging
      applications. These APIs provide the overarching framework for creating
      and sending messages. For more information about the identity APIs, refer
      to <a
      href="https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html">Amazon
      Chime SDK identity</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-sdk-identity-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-sdk-identity-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-sdk-identity-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime-sdk-identity
  - name: chime-sdk-media-pipelines
    description: >-
      <p>The Amazon Chime SDK media pipeline APIs in this section allow software
      developers to create Amazon Chime SDK media pipelines that capture,
      concatenate, or stream your Amazon Chime SDK meetings. For more
      information about media pipelines, see <a
      href="https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_Operations_Amazon_Chime_SDK_Media_Pipelines.html">Amazon
      Chime SDK media pipelines</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-sdk-media-pipelines-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-sdk-media-pipelines-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-sdk-media-pipelines-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime-sdk-media-pipelines
  - name: chime-sdk-voice
    description: >-
      <p>The Amazon Chime SDK telephony APIs in this section enable developers
      to create PSTN calling solutions that use Amazon Chime SDK Voice
      Connectors, and Amazon Chime SDK SIP media applications. Developers can
      also order and manage phone numbers, create and manage Voice Connectors
      and SIP media applications, and run voice analytics.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-sdk-voice-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-sdk-voice-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-sdk-voice-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime-sdk-voice
  - name: chime-sdk-meetings
    description: >-
      <p>The Amazon Chime SDK meetings APIs in this section allow software
      developers to create Amazon Chime SDK meetings, set the Amazon Web
      Services Regions for meetings, create and manage users, and send and
      receive meeting notifications. For more information about the meeting
      APIs, see <a
      href="https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Meetings.html">Amazon
      Chime SDK meetings</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-sdk-meetings-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-sdk-meetings-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-sdk-meetings-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime-sdk-meetings
  - name: cleanrooms
    description: >-
      <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is
      an Amazon Web Services service that helps multiple parties to join their
      data together in a secure collaboration workspace. In the collaboration,
      members who can query and receive results can get insights into the
      collective datasets without either party getting access to the other
      party's raw data.</p> <p>To learn more about Clean Rooms concepts,
      procedures, and best practices, see the <a
      href="https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html">Clean
      Rooms User Guide</a>.</p> <p>To learn more about SQL commands, functions,
      and conditions supported in Clean Rooms, see the <a
      href="https://docs.aws.amazon.com/clean-rooms/latest/sql-reference/sql-reference.html">Clean
      Rooms SQL Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cleanrooms-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cleanrooms-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cleanrooms-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cleanrooms
  - name: braket
    description: >-
      <p>The Amazon Braket API Reference provides information about the
      operations and structures supported in Amazon Braket.</p> <p>Additional
      Resources:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html">Amazon
      Braket Developer Guide</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/braket-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/braket-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/braket-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:braket
  - name: cloudcontrol
    description: >-
      <p>For more information about Amazon Web Services Cloud Control API, see
      the <a
      href="https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/what-is-cloudcontrolapi.html">Amazon
      Web Services Cloud Control API User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudcontrol-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudcontrol-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudcontrol-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudcontrol
  - name: clouddirectory
    description: >-
      <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a
      component of the AWS Directory Service that simplifies the development and
      management of cloud-scale web, mobile, and IoT applications. This guide
      describes the Cloud Directory operations that you can call
      programmatically and includes detailed information on data types and
      errors. For information about AWS Directory Services features, see <a
      href="https://aws.amazon.com/directoryservice/">AWS Directory Service</a>
      and the <a
      href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html">AWS
      Directory Service Administration Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/clouddirectory-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/clouddirectory-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/clouddirectory-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:clouddirectory
  - name: cloudformation
    description: >-
      <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create
      and manage Amazon Web Services infrastructure deployments predictably and
      repeatedly. You can use CloudFormation to leverage Amazon Web Services
      products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block
      Store, Amazon Simple Notification Service, Elastic Load Balancing, and
      Auto Scaling to build highly reliable, highly scalable, cost-effective
      applications without creating or configuring the underlying Amazon Web
      Services infrastructure.</p> <p>With CloudFormation, you declare all your
      resources and dependencies in a template file. The template defines a
      collection of resources as a single unit called a stack. CloudFormation
      creates and deletes all member resources of the stack together and manages
      all dependencies between the resources for you.</p> <p>For more
      information about CloudFormation, see the <a
      href="http://aws.amazon.com/cloudformation/">CloudFormation product
      page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services
      products. If you need additional technical information about a specific
      Amazon Web Services product, you can find the product's technical
      documentation at <a
      href="https://docs.aws.amazon.com/">docs.aws.amazon.com</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudformation-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudformation-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudformation-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudformation
  - name: cloud9
    description: >-
      <fullname>Cloud9</fullname> <p>Cloud9 is a collection of tools that you
      can use to code, build, run, test, debug, and release software in the
      cloud.</p> <p>For more information about Cloud9, see the <a
      href="https://docs.aws.amazon.com/cloud9/latest/user-guide">Cloud9 User
      Guide</a>.</p> <p>Cloud9 supports these operations:</p> <ul> <li> <p>
      <code>CreateEnvironmentEC2</code>: Creates an Cloud9 development
      environment, launches an Amazon EC2 instance, and then connects from the
      instance to the environment.</p> </li> <li> <p>
      <code>CreateEnvironmentMembership</code>: Adds an environment member to an
      environment.</p> </li> <li> <p> <code>DeleteEnvironment</code>: Deletes an
      environment. If an Amazon EC2 instance is connected to the environment,
      also terminates the instance.</p> </li> <li> <p>
      <code>DeleteEnvironmentMembership</code>: Deletes an environment member
      from an environment.</p> </li> <li> <p>
      <code>DescribeEnvironmentMemberships</code>: Gets information about
      environment members for an environment.</p> </li> <li> <p>
      <code>DescribeEnvironments</code>: Gets information about
      environments.</p> </li> <li> <p> <code>DescribeEnvironmentStatus</code>:
      Gets status information for an environment.</p> </li> <li> <p>
      <code>ListEnvironments</code>: Gets a list of environment identifiers.</p>
      </li> <li> <p> <code>ListTagsForResource</code>: Gets the tags for an
      environment.</p> </li> <li> <p> <code>TagResource</code>: Adds tags to an
      environment.</p> </li> <li> <p> <code>UntagResource</code>: Removes tags
      from an environment.</p> </li> <li> <p> <code>UpdateEnvironment</code>:
      Changes the settings of an existing environment.</p> </li> <li> <p>
      <code>UpdateEnvironmentMembership</code>: Changes the settings of an
      existing environment member for an environment.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloud9-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloud9-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloud9-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloud9
  - name: cloudfront
    description: >-
      <fullname>Amazon CloudFront</fullname> <p>Amazon CloudFront is a global
      content delivery network (CDN) service that accelerates delivery of your
      websites, APIs, video content or other web assets. It integrates with
      other Amazon Web Services products to give developers and businesses an
      easy way to accelerate content to end users with no minimum usage
      commitments.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudfront-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudfront-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudfront-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudfront
  - name: cleanroomsml
    description: >-
      <p>Welcome to the <i>Amazon Web Services Clean Rooms ML API
      Reference</i>.</p> <p>Amazon Web Services Clean Rooms ML provides a
      privacy-enhancing method for two parties to identify similar users in
      their data without the need to share their data with each other. The first
      party brings the training data to Clean Rooms so that they can create and
      configure an audience model (lookalike model) and associate it with a
      collaboration. The second party then brings their seed data to Clean Rooms
      and generates an audience (lookalike segment) that resembles the training
      data.</p> <p>To learn more about Amazon Web Services Clean Rooms ML
      concepts, procedures, and best practices, see the <a
      href="https://docs.aws.amazon.com/clean-rooms/latest/userguide/machine-learning.html">Clean
      Rooms User Guide</a>.</p> <p>To learn more about SQL commands, functions,
      and conditions supported in Clean Rooms, see the <a
      href="https://docs.aws.amazon.com/clean-rooms/latest/sql-reference/sql-reference.html">Clean
      Rooms SQL Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cleanroomsml-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cleanroomsml-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cleanroomsml-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cleanroomsml
  - name: chime-sdk-messaging
    description: >-
      <p>The Amazon Chime SDK messaging APIs in this section allow software
      developers to send and receive messages in custom messaging applications.
      These APIs depend on the frameworks provided by the Amazon Chime SDK
      identity APIs. For more information about the messaging APIs, see <a
      href="https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html">Amazon
      Chime SDK messaging</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/chime-sdk-messaging-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/chime-sdk-messaging-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/chime-sdk-messaging-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:chime-sdk-messaging
  - name: cloudhsmv2
    description: >-
      <p>For more information about AWS CloudHSM, see <a
      href="http://aws.amazon.com/cloudhsm/">AWS CloudHSM</a> and the <a
      href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/">AWS CloudHSM
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudhsmv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudhsmv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudhsmv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudhsmv2
  - name: cloudsearchdomain
    description: >-
      <p>You use the AmazonCloudSearch2013 API to upload documents to a search
      domain and search those documents. </p> <p>The endpoints for submitting
      <code>UploadDocuments</code>, <code>Search</code>, and
      <code>Suggest</code> requests are domain-specific. To get the endpoints
      for your domain, use the Amazon CloudSearch configuration service
      <code>DescribeDomains</code> action. The domain endpoints are also
      displayed on the domain dashboard in the Amazon CloudSearch console. You
      submit suggest requests to the search endpoint. </p> <p>For more
      information, see the <a
      href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide">Amazon
      CloudSearch Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudsearchdomain-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudsearchdomain-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudsearchdomain-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudsearchdomain
  - name: cloudsearch
    description: >-
      <fullname>Amazon CloudSearch Configuration Service</fullname> <p>You use
      the Amazon CloudSearch configuration service to create, configure, and
      manage search domains. Configuration service requests are submitted using
      the AWS Query protocol. AWS Query requests are HTTP or HTTPS requests
      submitted via HTTP GET or POST with a query parameter named Action.</p>
      <p>The endpoint for configuration service requests is region-specific:
      cloudsearch.<i>region</i>.amazonaws.com. For example,
      cloudsearch.us-east-1.amazonaws.com. For a current list of supported
      regions and endpoints, see <a
      href="http://docs.aws.amazon.com/general/latest/gr/rande.html#cloudsearch_region"
      target="_blank">Regions and Endpoints</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudsearch-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudsearch-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudsearch-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudsearch
  - name: cloudtrail-data
    description: >-
      <p>The CloudTrail Data Service lets you ingest events into CloudTrail from
      any source in your hybrid environments, such as in-house or SaaS
      applications hosted on-premises or in the cloud, virtual machines, or
      containers. You can store, access, analyze, troubleshoot and take action
      on this data without maintaining multiple log aggregators and reporting
      tools. After you run <code>PutAuditEvents</code> to ingest your
      application activity into CloudTrail, you can use CloudTrail Lake to
      search, query, and analyze the data that is logged from your
      applications.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudtrail-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudtrail-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudtrail-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudtrail-data
  - name: cloudhsm
    description: >-
      <fullname>AWS CloudHSM Service</fullname> <p>This is documentation for
      <b>AWS CloudHSM Classic</b>. For more information, see <a
      href="http://aws.amazon.com/cloudhsm/faqs-classic/">AWS CloudHSM Classic
      FAQs</a>, the <a
      href="https://docs.aws.amazon.com/cloudhsm/classic/userguide/">AWS
      CloudHSM Classic User Guide</a>, and the <a
      href="https://docs.aws.amazon.com/cloudhsm/classic/APIReference/">AWS
      CloudHSM Classic API Reference</a>.</p> <p> <b>For information about the
      current version of AWS CloudHSM</b>, see <a
      href="http://aws.amazon.com/cloudhsm/">AWS CloudHSM</a>, the <a
      href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/">AWS CloudHSM
      User Guide</a>, and the <a
      href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/">AWS
      CloudHSM API Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudhsm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudhsm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudhsm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudhsm
  - name: codecatalyst
    description: >-
      <p>Welcome to the Amazon CodeCatalyst API reference. This reference
      provides descriptions of operations and data types for Amazon
      CodeCatalyst. You can use the Amazon CodeCatalyst API to work with the
      following objects. </p> <p>Spaces, by calling the following:</p> <ul> <li>
      <p> <a>DeleteSpace</a>, which deletes a space.</p> </li> <li> <p>
      <a>GetSpace</a>, which returns information about a space.</p> </li> <li>
      <p> <a>GetSubscription</a>, which returns information about the Amazon Web
      Services account used for billing purposes and the billing plan for the
      space.</p> </li> <li> <p> <a>ListSpaces</a>, which retrieves a list of
      spaces.</p> </li> <li> <p> <a>UpdateSpace</a>, which changes one or more
      values for a space.</p> </li> </ul> <p>Projects, by calling the
      following:</p> <ul> <li> <p> <a>CreateProject</a> which creates a project
      in a specified space.</p> </li> <li> <p> <a>GetProject</a>, which returns
      information about a project.</p> </li> <li> <p> <a>ListProjects</a>, which
      retrieves a list of projects in a space.</p> </li> </ul> <p>Users, by
      calling the following:</p> <ul> <li> <p> <a>GetUserDetails</a>, which
      returns information about a user in Amazon CodeCatalyst.</p> </li> </ul>
      <p>Source repositories, by calling the following:</p> <ul> <li> <p>
      <a>CreateSourceRepository</a>, which creates an empty Git-based source
      repository in a specified project.</p> </li> <li> <p>
      <a>CreateSourceRepositoryBranch</a>, which creates a branch in a specified
      repository where you can work on code.</p> </li> <li> <p>
      <a>DeleteSourceRepository</a>, which deletes a source repository.</p>
      </li> <li> <p> <a>GetSourceRepository</a>, which returns information about
      a source repository.</p> </li> <li> <p>
      <a>GetSourceRepositoryCloneUrls</a>, which returns information about the
      URLs that can be used with a Git client to clone a source repository.</p>
      </li> <li> <p> <a>ListSourceRepositories</a>, which retrieves a list of
      source repositories in a project.</p> </li> <li> <p>
      <a>ListSourceRepositoryBranches</a>, which retrieves a list of branches in
      a source repository.</p> </li> </ul> <p>Dev Environments and the Amazon
      Web Services Toolkits, by calling the following:</p> <ul> <li> <p>
      <a>CreateDevEnvironment</a>, which creates a Dev Environment, where you
      can quickly work on the code stored in the source repositories of your
      project.</p> </li> <li> <p> <a>DeleteDevEnvironment</a>, which deletes a
      Dev Environment.</p> </li> <li> <p> <a>GetDevEnvironment</a>, which
      returns information about a Dev Environment.</p> </li> <li> <p>
      <a>ListDevEnvironments</a>, which retrieves a list of Dev Environments in
      a project.</p> </li> <li> <p> <a>ListDevEnvironmentSessions</a>, which
      retrieves a list of active Dev Environment sessions in a project.</p>
      </li> <li> <p> <a>StartDevEnvironment</a>, which starts a specified Dev
      Environment and puts it into an active state.</p> </li> <li> <p>
      <a>StartDevEnvironmentSession</a>, which starts a session to a specified
      Dev Environment.</p> </li> <li> <p> <a>StopDevEnvironment</a>, which stops
      a specified Dev Environment and puts it into an stopped state.</p> </li>
      <li> <p> <a>StopDevEnvironmentSession</a>, which stops a session for a
      specified Dev Environment.</p> </li> <li> <p> <a>UpdateDevEnvironment</a>,
      which changes one or more values for a Dev Environment.</p> </li> </ul>
      <p>Workflows, by calling the following:</p> <ul> <li> <p>
      <a>GetWorkflow</a>, which returns information about a workflow.</p> </li>
      <li> <p> <a>GetWorkflowRun</a>, which returns information about a
      specified run of a workflow.</p> </li> <li> <p> <a>ListWorkflowRuns</a>,
      which retrieves a list of runs of a specified workflow.</p> </li> <li> <p>
      <a>ListWorkflows</a>, which retrieves a list of workflows in a specified
      project.</p> </li> <li> <p> <a>StartWorkflowRun</a>, which starts a run of
      a specified workflow.</p> </li> </ul> <p>Security, activity, and resource
      management in Amazon CodeCatalyst, by calling the following:</p> <ul> <li>
      <p> <a>CreateAccessToken</a>, which creates a personal access token (PAT)
      for the current user.</p> </li> <li> <p> <a>DeleteAccessToken</a>, which
      deletes a specified personal access token (PAT).</p> </li> <li> <p>
      <a>ListAccessTokens</a>, which lists all personal access tokens (PATs)
      associated with a user.</p> </li> <li> <p> <a>ListEventLogs</a>, which
      retrieves a list of events that occurred during a specified time period in
      a space.</p> </li> <li> <p> <a>VerifySession</a>, which verifies whether
      the calling user has a valid Amazon CodeCatalyst login and session.</p>
      </li> </ul> <note> <p>If you are using the Amazon CodeCatalyst APIs with
      an SDK or the CLI, you must configure your computer to work with Amazon
      CodeCatalyst and single sign-on (SSO). For more information, see <a
      href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/set-up-cli.html">Setting
      up to use the CLI with Amazon CodeCatalyst</a> and the SSO documentation
      for your SDK.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codecatalyst-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codecatalyst-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codecatalyst-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codecatalyst
  - name: cloudfront-keyvaluestore
    description: >-
      <p>Amazon CloudFront KeyValueStore Service to View and Update Data in a
      KVS Resource</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudfront-keyvaluestore-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudfront-keyvaluestore-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudfront-keyvaluestore-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudfront-keyvaluestore
  - name: codebuild
    description: >-
      <fullname>CodeBuild</fullname> <p>CodeBuild is a fully managed build
      service in the cloud. CodeBuild compiles your source code, runs unit
      tests, and produces artifacts that are ready to deploy. CodeBuild
      eliminates the need to provision, manage, and scale your own build
      servers. It provides prepackaged build environments for the most popular
      programming languages and build tools, such as Apache Maven, Gradle, and
      more. You can also fully customize build environments in CodeBuild to use
      your own build tools. CodeBuild scales automatically to meet peak build
      requests. You pay only for the build time you consume. For more
      information about CodeBuild, see the <i> <a
      href="https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html">CodeBuild
      User Guide</a>.</i> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codebuild-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codebuild-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codebuild-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codebuild
  - name: codeguru-reviewer
    description: >-
      <p>This section provides documentation for the Amazon CodeGuru Reviewer
      API operations. CodeGuru Reviewer is a service that uses program analysis
      and machine learning to detect potential defects that are difficult for
      developers to find and recommends fixes in your Java and Python code.</p>
      <p>By proactively detecting and providing recommendations for addressing
      code defects and implementing best practices, CodeGuru Reviewer improves
      the overall quality and maintainability of your code base during the code
      review stage. For more information about CodeGuru Reviewer, see the <i> <a
      href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html">Amazon
      CodeGuru Reviewer User Guide</a>.</i> </p> <p>To improve the security of
      your CodeGuru Reviewer API calls, you can establish a private connection
      between your VPC and CodeGuru Reviewer by creating an <i>interface VPC
      endpoint</i>. For more information, see <a
      href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html">CodeGuru
      Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)</a>
      in the <i>Amazon CodeGuru Reviewer User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codeguru-reviewer-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codeguru-reviewer-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codeguru-reviewer-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codeguru-reviewer
  - name: codeartifact
    description: >-
      <p> CodeArtifact is a fully managed artifact repository compatible with
      language-native package managers and build tools such as npm, Apache
      Maven, pip, and dotnet. You can use CodeArtifact to share packages with
      development teams and pull packages. Packages can be pulled from both
      public and CodeArtifact repositories. You can also create an upstream
      relationship between a CodeArtifact repository and another repository,
      which effectively merges their contents from the point of view of a
      package manager client. </p> <p> <b>CodeArtifact Components</b> </p>
      <p>Use the information in this guide to help you work with the following
      CodeArtifact components:</p> <ul> <li> <p> <b>Repository</b>: A
      CodeArtifact repository contains a set of <a
      href="https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html#welcome-concepts-package-version">package
      versions</a>, each of which maps to a set of assets, or files.
      Repositories are polyglot, so a single repository can contain packages of
      any supported type. Each repository exposes endpoints for fetching and
      publishing packages using tools like the <b> <code>npm</code> </b> CLI,
      the Maven CLI (<b> <code>mvn</code> </b>), Python CLIs (<b>
      <code>pip</code> </b> and <code>twine</code>), and NuGet CLIs
      (<code>nuget</code> and <code>dotnet</code>).</p> </li> <li> <p>
      <b>Domain</b>: Repositories are aggregated into a higher-level entity
      known as a <i>domain</i>. All package assets and metadata are stored in
      the domain, but are consumed through repositories. A given package asset,
      such as a Maven JAR file, is stored once per domain, no matter how many
      repositories it's present in. All of the assets and metadata in a domain
      are encrypted with the same customer master key (CMK) stored in Key
      Management Service (KMS).</p> <p>Each repository is a member of a single
      domain and can't be moved to a different domain.</p> <p>The domain allows
      organizational policy to be applied across multiple repositories, such as
      which accounts can access repositories in the domain, and which public
      repositories can be used as sources of packages.</p> <p>Although an
      organization can have multiple domains, we recommend a single production
      domain that contains all published artifacts so that teams can find and
      share packages across their organization.</p> </li> <li> <p>
      <b>Package</b>: A <i>package</i> is a bundle of software and the metadata
      required to resolve dependencies and install the software. CodeArtifact
      supports <a
      href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-npm.html">npm</a>,
      <a
      href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html">PyPI</a>,
      <a
      href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-maven">Maven</a>,
      and <a
      href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-nuget">NuGet</a>
      package formats.</p> <p>In CodeArtifact, a package consists of:</p> <ul>
      <li> <p>A <i>name</i> (for example, <code>webpack</code> is the name of a
      popular npm package)</p> </li> <li> <p>An optional namespace (for example,
      <code>@types</code> in <code>@types/node</code>)</p> </li> <li> <p>A set
      of versions (for example, <code>1.0.0</code>, <code>1.0.1</code>,
      <code>1.0.2</code>, etc.)</p> </li> <li> <p> Package-level metadata (for
      example, npm tags)</p> </li> </ul> </li> <li> <p> <b>Package version</b>:
      A version of a package, such as <code>@types/node 12.6.9</code>. The
      version number format and semantics vary for different package formats.
      For example, npm package versions must conform to the <a
      href="https://semver.org/">Semantic Versioning specification</a>. In
      CodeArtifact, a package version consists of the version identifier,
      metadata at the package version level, and a set of assets.</p> </li> <li>
      <p> <b>Upstream repository</b>: One repository is <i>upstream</i> of
      another when the package versions in it can be accessed from the
      repository endpoint of the downstream repository, effectively merging the
      contents of the two repositories from the point of view of a client.
      CodeArtifact allows creating an upstream relationship between two
      repositories.</p> </li> <li> <p> <b>Asset</b>: An individual file stored
      in CodeArtifact associated with a package version, such as an npm
      <code>.tgz</code> file or Maven POM and JAR files.</p> </li> </ul>
      <p>CodeArtifact supports these operations:</p> <ul> <li> <p>
      <code>AssociateExternalConnection</code>: Adds an existing external
      connection to a repository. </p> </li> <li> <p>
      <code>CopyPackageVersions</code>: Copies package versions from one
      repository to another repository in the same domain.</p> </li> <li> <p>
      <code>CreateDomain</code>: Creates a domain</p> </li> <li> <p>
      <code>CreateRepository</code>: Creates a CodeArtifact repository in a
      domain. </p> </li> <li> <p> <code>DeleteDomain</code>: Deletes a domain.
      You cannot delete a domain that contains repositories. </p> </li> <li> <p>
      <code>DeleteDomainPermissionsPolicy</code>: Deletes the resource policy
      that is set on a domain.</p> </li> <li> <p> <code>DeletePackage</code>:
      Deletes a package and all associated package versions.</p> </li> <li> <p>
      <code>DeletePackageVersions</code>: Deletes versions of a package. After a
      package has been deleted, it can be republished, but its assets and
      metadata cannot be restored because they have been permanently removed
      from storage.</p> </li> <li> <p> <code>DeleteRepository</code>: Deletes a
      repository. </p> </li> <li> <p>
      <code>DeleteRepositoryPermissionsPolicy</code>: Deletes the resource
      policy that is set on a repository.</p> </li> <li> <p>
      <code>DescribeDomain</code>: Returns a <code>DomainDescription</code>
      object that contains information about the requested domain.</p> </li>
      <li> <p> <code>DescribePackage</code>: Returns a <a
      href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
      object that contains details about a package. </p> </li> <li> <p>
      <code>DescribePackageVersion</code>: Returns a <a
      href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
      object that contains details about a package version. </p> </li> <li> <p>
      <code>DescribeRepository</code>: Returns a
      <code>RepositoryDescription</code> object that contains detailed
      information about the requested repository. </p> </li> <li> <p>
      <code>DisposePackageVersions</code>: Disposes versions of a package. A
      package version with the status <code>Disposed</code> cannot be restored
      because they have been permanently removed from storage.</p> </li> <li>
      <p> <code>DisassociateExternalConnection</code>: Removes an existing
      external connection from a repository. </p> </li> <li> <p>
      <code>GetAuthorizationToken</code>: Generates a temporary authorization
      token for accessing repositories in the domain. The token expires the
      authorization period has passed. The default authorization period is 12
      hours and can be customized to any length with a maximum of 12 hours.</p>
      </li> <li> <p> <code>GetDomainPermissionsPolicy</code>: Returns the policy
      of a resource that is attached to the specified domain. </p> </li> <li>
      <p> <code>GetPackageVersionAsset</code>: Returns the contents of an asset
      that is in a package version. </p> </li> <li> <p>
      <code>GetPackageVersionReadme</code>: Gets the readme file or descriptive
      text for a package version.</p> </li> <li> <p>
      <code>GetRepositoryEndpoint</code>: Returns the endpoint of a repository
      for a specific package format. A repository has one endpoint for each
      package format: </p> <ul> <li> <p> <code>maven</code> </p> </li> <li> <p>
      <code>npm</code> </p> </li> <li> <p> <code>nuget</code> </p> </li> <li>
      <p> <code>pypi</code> </p> </li> </ul> </li> <li> <p>
      <code>GetRepositoryPermissionsPolicy</code>: Returns the resource policy
      that is set on a repository. </p> </li> <li> <p> <code>ListDomains</code>:
      Returns a list of <code>DomainSummary</code> objects. Each returned
      <code>DomainSummary</code> object contains information about a domain.</p>
      </li> <li> <p> <code>ListPackages</code>: Lists the packages in a
      repository.</p> </li> <li> <p> <code>ListPackageVersionAssets</code>:
      Lists the assets for a given package version.</p> </li> <li> <p>
      <code>ListPackageVersionDependencies</code>: Returns a list of the direct
      dependencies for a package version. </p> </li> <li> <p>
      <code>ListPackageVersions</code>: Returns a list of package versions for a
      specified package in a repository.</p> </li> <li> <p>
      <code>ListRepositories</code>: Returns a list of repositories owned by the
      Amazon Web Services account that called this method.</p> </li> <li> <p>
      <code>ListRepositoriesInDomain</code>: Returns a list of the repositories
      in a domain.</p> </li> <li> <p> <code>PublishPackageVersion</code>:
      Creates a new package version containing one or more assets.</p> </li>
      <li> <p> <code>PutDomainPermissionsPolicy</code>: Attaches a resource
      policy to a domain.</p> </li> <li> <p>
      <code>PutPackageOriginConfiguration</code>: Sets the package origin
      configuration for a package, which determine how new versions of the
      package can be added to a specific repository.</p> </li> <li> <p>
      <code>PutRepositoryPermissionsPolicy</code>: Sets the resource policy on a
      repository that specifies permissions to access it. </p> </li> <li> <p>
      <code>UpdatePackageVersionsStatus</code>: Updates the status of one or
      more versions of a package.</p> </li> <li> <p>
      <code>UpdateRepository</code>: Updates the properties of a repository.</p>
      </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codeartifact-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codeartifact-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codeartifact-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codeartifact
  - name: cloudtrail
    description: >-
      <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference.
      It provides descriptions of actions, data types, common parameters, and
      common errors for CloudTrail.</p> <p>CloudTrail is a web service that
      records Amazon Web Services API calls for your Amazon Web Services account
      and delivers log files to an Amazon S3 bucket. The recorded information
      includes the identity of the user, the start time of the Amazon Web
      Services API call, the source IP address, the request parameters, and the
      response elements returned by the service.</p> <note> <p>As an alternative
      to the API, you can use one of the Amazon Web Services SDKs, which consist
      of libraries and sample code for various programming languages and
      platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide
      programmatic access to CloudTrail. For example, the SDKs handle
      cryptographically signing requests, managing errors, and retrying requests
      automatically. For more information about the Amazon Web Services SDKs,
      including how to download and install them, see <a
      href="http://aws.amazon.com/tools/">Tools to Build on Amazon Web
      Services</a>.</p> </note> <p>See the <a
      href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html">CloudTrail
      User Guide</a> for information about the data that is included with each
      Amazon Web Services API call listed in the log files.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cloudtrail-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cloudtrail-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cloudtrail-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cloudtrail
  - name: codedeploy
    description: >-
      <p>CodeDeploy is a deployment service that automates application
      deployments to Amazon EC2 instances, on-premises instances running in your
      own facility, serverless Lambda functions, or applications in an Amazon
      ECS service.</p> <p>You can deploy a nearly unlimited variety of
      application content, such as an updated Lambda function, updated
      applications in an Amazon ECS service, code, web and configuration files,
      executables, packages, scripts, multimedia files, and so on. CodeDeploy
      can deploy application content stored in Amazon S3 buckets, GitHub
      repositories, or Bitbucket repositories. You do not need to make changes
      to your existing code before you can use CodeDeploy.</p> <p>CodeDeploy
      makes it easier for you to rapidly release new features, helps you avoid
      downtime during application deployment, and handles the complexity of
      updating your applications, without many of the risks associated with
      error-prone manual deployments.</p> <p> <b>CodeDeploy Components</b> </p>
      <p>Use the information in this guide to help you work with the following
      CodeDeploy components:</p> <ul> <li> <p> <b>Application</b>: A name that
      uniquely identifies the application you want to deploy. CodeDeploy uses
      this name, which functions as a container, to ensure the correct
      combination of revision, deployment configuration, and deployment group
      are referenced during a deployment.</p> </li> <li> <p> <b>Deployment
      group</b>: A set of individual instances, CodeDeploy Lambda deployment
      configuration settings, or an Amazon ECS service and network details. A
      Lambda deployment group specifies how to route traffic to a new version of
      a Lambda function. An Amazon ECS deployment group specifies the service
      created in Amazon ECS to deploy, a load balancer, and a listener to
      reroute production traffic to an updated containerized application. An
      Amazon EC2/On-premises deployment group contains individually tagged
      instances, Amazon EC2 instances in Amazon EC2 Auto Scaling groups, or
      both. All deployment groups can specify optional trigger, alarm, and
      rollback settings.</p> </li> <li> <p> <b>Deployment configuration</b>: A
      set of deployment rules and deployment success and failure conditions used
      by CodeDeploy during a deployment.</p> </li> <li> <p> <b>Deployment</b>:
      The process and the components used when updating a Lambda function, a
      containerized application in an Amazon ECS service, or of installing
      content on one or more instances. </p> </li> <li> <p> <b>Application
      revisions</b>: For an Lambda deployment, this is an AppSpec file that
      specifies the Lambda function to be updated and one or more functions to
      validate deployment lifecycle events. For an Amazon ECS deployment, this
      is an AppSpec file that specifies the Amazon ECS task definition,
      container, and port where production traffic is rerouted. For an
      EC2/On-premises deployment, this is an archive file that contains source
      content—source code, webpages, executable files, and deployment
      scripts—along with an AppSpec file. Revisions are stored in Amazon S3
      buckets or GitHub repositories. For Amazon S3, a revision is uniquely
      identified by its Amazon S3 object key and its ETag, version, or both. For
      GitHub, a revision is uniquely identified by its commit ID.</p> </li>
      </ul> <p>This guide also contains information to help you get details
      about the instances in your deployments, to make on-premises instances
      available for CodeDeploy deployments, to get details about a Lambda
      function deployment, and to get details about Amazon ECS service
      deployments.</p> <p> <b>CodeDeploy Information Resources</b> </p> <ul>
      <li> <p> <a
      href="https://docs.aws.amazon.com/codedeploy/latest/userguide">CodeDeploy
      User Guide</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/codedeploy/latest/APIReference/">CodeDeploy
      API Reference Guide</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html">CLI
      Reference for CodeDeploy</a> </p> </li> <li> <p> <a
      href="https://forums.aws.amazon.com/forum.jspa?forumID=179">CodeDeploy
      Developer Forum</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codedeploy-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codedeploy-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codedeploy-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codedeploy
  - name: codeguru-security
    description: >-
      <note> <p>Amazon CodeGuru Security is in preview release and is subject to
      change.</p> </note> <p>This section provides documentation for the Amazon
      CodeGuru Security API operations. CodeGuru Security is a service that uses
      program analysis and machine learning to detect security policy violations
      and vulnerabilities, and recommends ways to address these security
      risks.</p> <p>By proactively detecting and providing recommendations for
      addressing security risks, CodeGuru Security improves the overall security
      of your application code. For more information about CodeGuru Security,
      see the <a
      href="https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html">Amazon
      CodeGuru Security User Guide</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codeguru-security-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codeguru-security-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codeguru-security-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codeguru-security
  - name: codecommit
    description: >-
      <fullname>CodeCommit</fullname> <p>This is the <i>CodeCommit API
      Reference</i>. This reference provides descriptions of the operations and
      data types for CodeCommit API along with usage examples.</p> <p>You can
      use the CodeCommit API to work with the following objects:</p>
      <p>Repositories, by calling the following:</p> <ul> <li> <p>
      <a>BatchGetRepositories</a>, which returns information about one or more
      repositories associated with your Amazon Web Services account.</p> </li>
      <li> <p> <a>CreateRepository</a>, which creates an CodeCommit
      repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an
      CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which
      returns information about a specified repository.</p> </li> <li> <p>
      <a>ListRepositories</a>, which lists all CodeCommit repositories
      associated with your Amazon Web Services account.</p> </li> <li> <p>
      <a>UpdateRepositoryDescription</a>, which sets or updates the description
      of the repository.</p> </li> <li> <p>
      <a>UpdateRepositoryEncryptionKey</a>, which updates the Key Management
      Service encryption key used to encrypt and decrypt a repository.</p> </li>
      <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the
      repository. If you change the name of a repository, no other users of that
      repository can access it until you send them the new HTTPS or SSH URL to
      use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li>
      <p> <a>CreateBranch</a>, which creates a branch in a specified
      repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the
      specified branch in a repository unless it is the default branch.</p>
      </li> <li> <p> <a>GetBranch</a>, which returns information about a
      specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all
      branches for a specified repository.</p> </li> <li> <p>
      <a>UpdateDefaultBranch</a>, which changes the default branch for a
      repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul>
      <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file
      from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns
      the base-64 encoded content of an individual Git blob object in a
      repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64
      encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>,
      which returns the contents of a specified folder or directory.</p> </li>
      <li> <p> <a>ListFileCommitHistory</a>, which retrieves a list of commits
      and changes to a specified file. </p> </li> <li> <p> <a>PutFile</a>, which
      adds or modifies a single file in a specified repository and branch.</p>
      </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p>
      <a>BatchGetCommits</a>, which returns information about one or more
      commits in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which
      creates a commit for changes to a repository.</p> </li> <li> <p>
      <a>GetCommit</a>, which returns information about a commit, including
      commit messages and author and committer information.</p> </li> <li> <p>
      <a>GetDifferences</a>, which returns information about the differences in
      a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other
      fully qualified reference).</p> </li> </ul> <p>Merges, by calling the
      following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which
      returns information about conflicts in a merge between commits in a
      repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which
      creates an unreferenced commit between two branches or commits for the
      purpose of comparing them and identifying any potential conflicts.</p>
      </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information
      about merge conflicts between the base, source, and destination versions
      of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>,
      which returns information about the merge between a source and destination
      commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns
      information about merge conflicts between the source and destination
      branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which
      returns information about the available merge options between two branches
      or commit specifiers.</p> </li> <li> <p>
      <a>MergeBranchesByFastForward</a>, which merges two branches using the
      fast-forward merge option.</p> </li> <li> <p>
      <a>MergeBranchesBySquash</a>, which merges two branches using the squash
      merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which
      merges two branches using the three-way merge option.</p> </li> </ul>
      <p>Pull requests, by calling the following:</p> <ul> <li> <p>
      <a>CreatePullRequest</a>, which creates a pull request in a specified
      repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>, which
      creates an approval rule for a specified pull request.</p> </li> <li> <p>
      <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a
      specified pull request.</p> </li> <li> <p>
      <a>DescribePullRequestEvents</a>, which returns information about one or
      more pull request events.</p> </li> <li> <p>
      <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull
      request has met all the conditions specified in its associated approval
      rules.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns
      information about comments on a specified pull request.</p> </li> <li> <p>
      <a>GetPullRequest</a>, which returns information about a specified pull
      request.</p> </li> <li> <p> <a>GetPullRequestApprovalStates</a>, which
      returns information about the approval states for a specified pull
      request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>, which
      returns information about whether approval rules have been set aside
      (overriden) for a pull request, and if so, the Amazon Resource Name (ARN)
      of the user or identity that overrode the rules and their requirements for
      the pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists
      all pull requests for a repository.</p> </li> <li> <p>
      <a>MergePullRequestByFastForward</a>, which merges the source destination
      branch of a pull request into the specified destination branch for that
      pull request using the fast-forward merge option.</p> </li> <li> <p>
      <a>MergePullRequestBySquash</a>, which merges the source destination
      branch of a pull request into the specified destination branch for that
      pull request using the squash merge option.</p> </li> <li> <p>
      <a>MergePullRequestByThreeWay</a>, which merges the source destination
      branch of a pull request into the specified destination branch for that
      pull request using the three-way merge option.</p> </li> <li> <p>
      <a>OverridePullRequestApprovalRules</a>, which sets aside all approval
      rule requirements for a pull request.</p> </li> <li> <p>
      <a>PostCommentForPullRequest</a>, which posts a comment to a pull request
      at the specified line, file, or request.</p> </li> <li> <p>
      <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure
      of an approval rule for a pull request.</p> </li> <li> <p>
      <a>UpdatePullRequestApprovalState</a>, which updates the state of an
      approval on a pull request.</p> </li> <li> <p>
      <a>UpdatePullRequestDescription</a>, which updates the description of a
      pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which
      updates the status of a pull request.</p> </li> <li> <p>
      <a>UpdatePullRequestTitle</a>, which updates the title of a pull
      request.</p> </li> </ul> <p>Approval rule templates, by calling the
      following:</p> <ul> <li> <p>
      <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a
      template with a specified repository. After the template is associated
      with a repository, CodeCommit creates approval rules that match the
      template conditions on every pull request created in the specified
      repository.</p> </li> <li> <p>
      <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which
      associates a template with one or more specified repositories. After the
      template is associated with a repository, CodeCommit creates approval
      rules that match the template conditions on every pull request created in
      the specified repositories.</p> </li> <li> <p>
      <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which
      removes the association between a template and specified repositories so
      that approval rules based on the template are not automatically created
      when pull requests are created in those repositories.</p> </li> <li> <p>
      <a>CreateApprovalRuleTemplate</a>, which creates a template for approval
      rules that can then be associated with one or more repositories in your
      Amazon Web Services account.</p> </li> <li> <p>
      <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template.
      It does not remove approval rules on pull requests already created with
      the template.</p> </li> <li> <p>
      <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the
      association between a template and a repository so that approval rules
      based on the template are not automatically created when pull requests are
      created in the specified repository.</p> </li> <li> <p>
      <a>GetApprovalRuleTemplate</a>, which returns information about an
      approval rule template.</p> </li> <li> <p>
      <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates
      in the Amazon Web Services Region in your Amazon Web Services account.</p>
      </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>,
      which lists all approval rule templates that are associated with a
      specified repository.</p> </li> <li> <p>
      <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all
      repositories associated with the specified approval rule template.</p>
      </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates
      the description of an approval rule template.</p> </li> <li> <p>
      <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an
      approval rule template.</p> </li> <li> <p>
      <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an
      approval rule template.</p> </li> </ul> <p>Comments in a repository, by
      calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>,
      which deletes the content of a comment on a commit in a repository.</p>
      </li> <li> <p> <a>GetComment</a>, which returns information about a
      comment on a commit.</p> </li> <li> <p> <a>GetCommentReactions</a>, which
      returns information about emoji reactions to comments.</p> </li> <li> <p>
      <a>GetCommentsForComparedCommit</a>, which returns information about
      comments on the comparison between two commit specifiers in a
      repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which
      creates a comment on the comparison between two commit specifiers in a
      repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a
      reply to a comment.</p> </li> <li> <p> <a>PutCommentReaction</a>, which
      creates or updates an emoji reaction to a comment.</p> </li> <li> <p>
      <a>UpdateComment</a>, which updates the content of a comment on a commit
      in a repository.</p> </li> </ul> <p>Tags used to tag resources in
      CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p>
      <a>ListTagsForResource</a>, which gets information about Amazon Web
      Servicestags for a specified Amazon Resource Name (ARN) in CodeCommit.</p>
      </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a
      resource in CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which
      removes tags for a resource in CodeCommit.</p> </li> </ul> <p>Triggers, by
      calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>,
      which returns information about triggers configured for a repository.</p>
      </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers
      for a repository and can be used to create or delete triggers.</p> </li>
      <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a
      repository trigger by sending data to the trigger target.</p> </li> </ul>
      <p>For information about how to use CodeCommit, see the <a
      href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">CodeCommit
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codecommit-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codecommit-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codecommit-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codecommit
  - name: codeguruprofiler
    description: >-
      <p> This section provides documentation for the Amazon CodeGuru Profiler
      API operations. </p> <p> Amazon CodeGuru Profiler collects runtime
      performance data from your live applications, and provides recommendations
      that can help you fine-tune your application performance. Using machine
      learning algorithms, CodeGuru Profiler can help you find your most
      expensive lines of code and suggest ways you can improve efficiency and
      remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides
      different visualizations of profiling data to help you identify what code
      is running on the CPU, see how much time is consumed, and suggest ways to
      reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently
      supports applications written in all Java virtual machine (JVM) languages
      and Python. While CodeGuru Profiler supports both visualizations and
      recommendations for applications written in Java, it can also generate
      visualizations and a subset of recommendations for applications written in
      other JVM languages and Python.</p> </note> <p> For more information, see
      <a
      href="https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html">What
      is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User
      Guide</i>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codeguruprofiler-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codeguruprofiler-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codeguruprofiler-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codeguruprofiler
  - name: codestar
    description: >-
      <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS
      CodeStar. This reference provides descriptions of the operations and data
      types for the AWS CodeStar API along with usage examples.</p> <p>You can
      use the AWS CodeStar API to work with:</p> <p>Projects and their
      resources, by calling the following:</p> <ul> <li> <p>
      <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p>
      <code>DescribeProject</code>, which lists the attributes of a project.</p>
      </li> <li> <p> <code>ListProjects</code>, which lists all projects
      associated with your AWS account.</p> </li> <li> <p>
      <code>ListResources</code>, which lists the resources associated with a
      project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists
      the tags associated with a project.</p> </li> <li> <p>
      <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p>
      <code>UntagProject</code>, which removes tags from a project.</p> </li>
      <li> <p> <code>UpdateProject</code>, which updates the attributes of a
      project.</p> </li> </ul> <p>Teams and team members, by calling the
      following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds
      an IAM user to the team for a project.</p> </li> <li> <p>
      <code>DisassociateTeamMember</code>, which removes an IAM user from the
      team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which
      lists all the IAM users in the team for a project, including their roles
      and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which
      updates a team member's attributes in a project.</p> </li> </ul> <p>Users,
      by calling the following:</p> <ul> <li> <p>
      <code>CreateUserProfile</code>, which creates a user profile that contains
      data associated with the user across all projects.</p> </li> <li> <p>
      <code>DeleteUserProfile</code>, which deletes all user profile information
      across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>,
      which describes the profile of a user.</p> </li> <li> <p>
      <code>ListUserProfiles</code>, which lists all user profiles.</p> </li>
      <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a
      user.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codestar-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codestar-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codestar-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codestar
  - name: codepipeline
    description: >-
      <fullname>CodePipeline</fullname> <p> <b>Overview</b> </p> <p>This is the
      CodePipeline API Reference. This guide provides descriptions of the
      actions and data types for CodePipeline. Some functionality for your
      pipeline can only be configured through the API. For more information, see
      the <a
      href="https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html">CodePipeline
      User Guide</a>.</p> <p>You can use the CodePipeline API to work with
      pipelines, stages, actions, and transitions.</p> <p> <i>Pipelines</i> are
      models of automated release processes. Each pipeline is uniquely named,
      and consists of stages, actions, and transitions. </p> <p>You can work
      with pipelines by calling:</p> <ul> <li> <p> <a>CreatePipeline</a>, which
      creates a uniquely named pipeline.</p> </li> <li> <p>
      <a>DeletePipeline</a>, which deletes the specified pipeline.</p> </li>
      <li> <p> <a>GetPipeline</a>, which returns information about the pipeline
      structure and pipeline metadata, including the pipeline Amazon Resource
      Name (ARN).</p> </li> <li> <p> <a>GetPipelineExecution</a>, which returns
      information about a specific execution of a pipeline.</p> </li> <li> <p>
      <a>GetPipelineState</a>, which returns information about the current state
      of the stages and actions of a pipeline.</p> </li> <li> <p>
      <a>ListActionExecutions</a>, which returns action-level details for past
      executions. The details include full stage and action-level details,
      including individual action duration, status, any errors that occurred
      during the execution, and input and output artifact location details.</p>
      </li> <li> <p> <a>ListPipelines</a>, which gets a summary of all of the
      pipelines associated with your account.</p> </li> <li> <p>
      <a>ListPipelineExecutions</a>, which gets a summary of the most recent
      executions for a pipeline.</p> </li> <li> <p>
      <a>StartPipelineExecution</a>, which runs the most recent revision of an
      artifact through the pipeline.</p> </li> <li> <p>
      <a>StopPipelineExecution</a>, which stops the specified pipeline execution
      from continuing through the pipeline.</p> </li> <li> <p>
      <a>UpdatePipeline</a>, which updates a pipeline with edits or changes to
      the structure of the pipeline.</p> </li> </ul> <p>Pipelines include
      <i>stages</i>. Each stage contains one or more actions that must complete
      before the next stage begins. A stage results in success or failure. If a
      stage fails, the pipeline stops at that stage and remains stopped until
      either a new version of an artifact appears in the source location, or a
      user takes action to rerun the most recent artifact through the pipeline.
      You can call <a>GetPipelineState</a>, which displays the status of a
      pipeline, including the status of stages in the pipeline, or
      <a>GetPipeline</a>, which returns the entire structure of the pipeline,
      including the stages of that pipeline. For more information about the
      structure of stages and actions, see <a
      href="https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-structure.html">CodePipeline
      Pipeline Structure Reference</a>.</p> <p>Pipeline stages include
      <i>actions</i> that are categorized into categories such as source or
      build actions performed in a stage of a pipeline. For example, you can use
      a source action to import artifacts into a pipeline from a source such as
      Amazon S3. Like stages, you do not work with actions directly in most
      cases, but you do define and interact with actions when working with
      pipeline operations such as <a>CreatePipeline</a> and
      <a>GetPipelineState</a>. Valid action categories are:</p> <ul> <li>
      <p>Source</p> </li> <li> <p>Build</p> </li> <li> <p>Test</p> </li> <li>
      <p>Deploy</p> </li> <li> <p>Approval</p> </li> <li> <p>Invoke</p> </li>
      </ul> <p>Pipelines also include <i>transitions</i>, which allow the
      transition of artifacts from one stage to the next in a pipeline after the
      actions in one stage complete.</p> <p>You can work with transitions by
      calling:</p> <ul> <li> <p> <a>DisableStageTransition</a>, which prevents
      artifacts from transitioning to the next stage in a pipeline.</p> </li>
      <li> <p> <a>EnableStageTransition</a>, which enables transition of
      artifacts between stages in a pipeline. </p> </li> </ul> <p> <b>Using the
      API to integrate with CodePipeline</b> </p> <p>For third-party integrators
      or developers who want to create their own integrations with CodePipeline,
      the expected sequence varies from the standard API user. To integrate with
      CodePipeline, developers need to work with the following items:</p> <p>
      <b>Jobs</b>, which are instances of an action. For example, a job for a
      source action might import a revision of an artifact from a source. </p>
      <p>You can work with jobs by calling:</p> <ul> <li> <p>
      <a>AcknowledgeJob</a>, which confirms whether a job worker has received
      the specified job.</p> </li> <li> <p> <a>GetJobDetails</a>, which returns
      the details of a job.</p> </li> <li> <p> <a>PollForJobs</a>, which
      determines whether there are any jobs to act on.</p> </li> <li> <p>
      <a>PutJobFailureResult</a>, which provides details of a job failure. </p>
      </li> <li> <p> <a>PutJobSuccessResult</a>, which provides details of a job
      success.</p> </li> </ul> <p> <b>Third party jobs</b>, which are instances
      of an action created by a partner action and integrated into CodePipeline.
      Partner actions are created by members of the Amazon Web Services Partner
      Network.</p> <p>You can work with third party jobs by calling:</p> <ul>
      <li> <p> <a>AcknowledgeThirdPartyJob</a>, which confirms whether a job
      worker has received the specified job.</p> </li> <li> <p>
      <a>GetThirdPartyJobDetails</a>, which requests the details of a job for a
      partner action.</p> </li> <li> <p> <a>PollForThirdPartyJobs</a>, which
      determines whether there are any jobs to act on. </p> </li> <li> <p>
      <a>PutThirdPartyJobFailureResult</a>, which provides details of a job
      failure.</p> </li> <li> <p> <a>PutThirdPartyJobSuccessResult</a>, which
      provides details of a job success.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codepipeline-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codepipeline-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codepipeline-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codepipeline
  - name: codestar-notifications
    description: >-
      <p>This AWS CodeStar Notifications API Reference provides descriptions and
      usage examples of the operations and data types for the AWS CodeStar
      Notifications API. You can use the AWS CodeStar Notifications API to work
      with the following objects:</p> <p>Notification rules, by calling the
      following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates
      a notification rule for a resource in your account. </p> </li> <li> <p>
      <a>DeleteNotificationRule</a>, which deletes a notification rule. </p>
      </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information
      about a notification rule. </p> </li> <li> <p>
      <a>ListNotificationRules</a>, which lists the notification rules
      associated with your account. </p> </li> <li> <p>
      <a>UpdateNotificationRule</a>, which changes the name, events, or targets
      associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>,
      which subscribes a target to a notification rule. </p> </li> <li> <p>
      <a>Unsubscribe</a>, which removes a target from a notification rule. </p>
      </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p>
      <a>DeleteTarget</a>, which removes a notification rule target from a
      notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the
      targets associated with a notification rule. </p> </li> </ul> <p>Events,
      by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which
      lists the event types you can include in a notification rule. </p> </li>
      </ul> <p>Tags, by calling the following: </p> <ul> <li> <p>
      <a>ListTagsForResource</a>, which lists the tags already associated with a
      notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>,
      which associates a tag you provide with a notification rule in your
      account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag
      from a notification rule in your account. </p> </li> </ul> <p> For
      information about how to use AWS CodeStar Notifications, see the <a
      href="https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html">Amazon
      Web Services Developer Tools Console User Guide</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codestar-notifications-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codestar-notifications-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codestar-notifications-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codestar-notifications
  - name: codestar-connections
    description: >-
      <fullname>AWS CodeStar Connections</fullname> <p>This Amazon Web Services
      CodeStar Connections API Reference provides descriptions and usage
      examples of the operations and data types for the Amazon Web Services
      CodeStar Connections API. You can use the connections API to work with
      connections and installations.</p> <p> <i>Connections</i> are
      configurations that you use to connect Amazon Web Services resources to
      external code repositories. Each connection is a resource that can be
      given to services such as CodePipeline to connect to a third-party
      repository such as Bitbucket. For example, you can add the connection in
      CodePipeline so that it triggers your pipeline when a code change is made
      to your third-party code repository. Each connection is named and
      associated with a unique ARN that is used to reference the connection.</p>
      <p>When you create a connection, the console initiates a third-party
      connection handshake. <i>Installations</i> are the apps that are used to
      conduct this handshake. For example, the installation for the Bitbucket
      provider type is the Bitbucket app. When you create a connection, you can
      choose an existing installation or create one.</p> <p>When you want to
      create a connection to an installed provider type such as GitHub
      Enterprise Server, you create a <i>host</i> for your connections.</p>
      <p>You can work with connections by calling:</p> <ul> <li> <p>
      <a>CreateConnection</a>, which creates a uniquely named connection that
      can be referenced by services such as CodePipeline.</p> </li> <li> <p>
      <a>DeleteConnection</a>, which deletes the specified connection.</p> </li>
      <li> <p> <a>GetConnection</a>, which returns information about the
      connection, including the connection status.</p> </li> <li> <p>
      <a>ListConnections</a>, which lists the connections associated with your
      account.</p> </li> </ul> <p>You can work with hosts by calling:</p> <ul>
      <li> <p> <a>CreateHost</a>, which creates a host that represents the
      infrastructure where your provider is installed.</p> </li> <li> <p>
      <a>DeleteHost</a>, which deletes the specified host.</p> </li> <li> <p>
      <a>GetHost</a>, which returns information about the host, including the
      setup status.</p> </li> <li> <p> <a>ListHosts</a>, which lists the hosts
      associated with your account.</p> </li> </ul> <p>You can work with tags in
      Amazon Web Services CodeStar Connections by calling the following:</p>
      <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about
      Amazon Web Services tags for a specified Amazon Resource Name (ARN) in
      Amazon Web Services CodeStar Connections.</p> </li> <li> <p>
      <a>TagResource</a>, which adds or updates tags for a resource in Amazon
      Web Services CodeStar Connections.</p> </li> <li> <p>
      <a>UntagResource</a>, which removes tags for a resource in Amazon Web
      Services CodeStar Connections.</p> </li> </ul> <p>For information about
      how to use Amazon Web Services CodeStar Connections, see the <a
      href="https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html">Developer
      Tools User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/codestar-connections-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/codestar-connections-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/codestar-connections-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:codestar-connections
  - name: cognito-idp
    description: >-
      <p>With the Amazon Cognito user pools API, you can configure user pools
      and authenticate users. To authenticate users from third-party identity
      providers (IdPs) in this API, you can <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html">link
      IdP users to native user profiles</a>. Learn more about the authentication
      and authorization of federated users at <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html">Adding
      user pool sign-in through a third party</a> and in the <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html">User
      pool federation endpoints and hosted UI reference</a>.</p> <p>This API
      reference provides detailed information about API operations and object
      types in Amazon Cognito.</p> <p>Along with resource management operations,
      the Amazon Cognito user pools API includes classes of operations and
      authorization models for client-side and server-side authentication of
      users. You can interact with operations in the Amazon Cognito user pools
      API as any of the following subjects.</p> <ol> <li> <p>An administrator
      who wants to configure user pools, app clients, users, groups, or other
      user pool functions.</p> </li> <li> <p>A server-side app, like a web
      application, that wants to use its Amazon Web Services privileges to
      manage, authenticate, or authorize a user.</p> </li> <li> <p>A client-side
      app, like a mobile app, that wants to make unauthenticated requests to
      manage, authenticate, or authorize a user.</p> </li> </ol> <p>For more
      information, see <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using
      the Amazon Cognito user pools API and user pool endpoints</a> in the
      <i>Amazon Cognito Developer Guide</i>.</p> <p>With your Amazon Web
      Services SDK, you can build the logic to support operational flows in
      every use case for this API. You can also make direct REST API requests to
      <a
      href="https://docs.aws.amazon.com/general/latest/gr/cognito_identity.html#cognito_identity_your_user_pools_region">Amazon
      Cognito user pools service endpoints</a>. The following links can get you
      started with the <code>CognitoIdentityProvider</code> client in other
      supported Amazon Web Services SDKs.</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp">Amazon
      Web Services Command Line Interface</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html">Amazon
      Web Services SDK for .NET</a> </p> </li> <li> <p> <a
      href="https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html">Amazon
      Web Services SDK for C++</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider">Amazon
      Web Services SDK for Go</a> </p> </li> <li> <p> <a
      href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html">Amazon
      Web Services SDK for Java V2</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html">Amazon
      Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html">Amazon
      Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a
      href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html">Amazon
      Web Services SDK for Python</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html">Amazon
      Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with
      an Amazon Web Services SDK, see <a
      href="http://aws.amazon.com/developer/tools/">Tools to Build on Amazon Web
      Services</a>. For example actions and scenarios, see <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html">Code
      examples for Amazon Cognito Identity Provider using Amazon Web Services
      SDKs</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cognito-idp-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cognito-idp-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cognito-idp-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cognito-idp
  - name: cognito-sync
    description: >-
      <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides
      an AWS service and client library that enable cross-device syncing of
      application-related user data. High-level client libraries are available
      for both iOS and Android. You can use these libraries to persist data
      locally so that it's available even if the device is offline. Developer
      credentials don't need to be stored on the mobile device to access the
      service. You can use Amazon Cognito to obtain a normalized user ID and
      credentials. User data is persisted in a dataset that can store up to 1 MB
      of key-value pairs, and you can have up to 20 datasets per user
      identity.</p> <p>With Amazon Cognito Sync, the data stored for each
      identity is accessible only to credentials assigned to that identity. In
      order to use the Cognito Sync service, you need to make API calls using
      credentials retrieved with <a
      href="http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html">Amazon
      Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an
      Android or iOS application, you will probably want to make API calls via
      the AWS Mobile SDK. To learn more, see the <a
      href="http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html">Developer
      Guide for Android</a> and the <a
      href="http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html">Developer
      Guide for iOS</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cognito-sync-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cognito-sync-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cognito-sync-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cognito-sync
  - name: comprehendmedical
    description: >-
      <p>Amazon Comprehend Medical extracts structured information from
      unstructured clinical text. Use these actions to gain insight in your
      documents. Amazon Comprehend Medical only detects entities in English
      language texts. Amazon Comprehend Medical places limits on the sizes of
      files allowed for different API operations. To learn more, see <a
      href="https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html">Guidelines
      and quotas</a> in the <i>Amazon Comprehend Medical Developer
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/comprehendmedical-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/comprehendmedical-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/comprehendmedical-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:comprehendmedical
  - name: cognito-identity
    description: >-
      <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito
      Federated Identities is a web service that delivers scoped temporary
      credentials to mobile devices and other untrusted environments. It
      uniquely identifies a device and supplies the user with a consistent
      identity over the lifetime of an application.</p> <p>Using Amazon Cognito
      Federated Identities, you can enable authentication with one or more
      third-party identity providers (Facebook, Google, or Login with Amazon) or
      an Amazon Cognito user pool, and you can also choose to support
      unauthenticated access from your app. Cognito delivers a unique identifier
      for each user and acts as an OpenID token provider trusted by AWS Security
      Token Service (STS) to access temporary, limited-privilege AWS
      credentials.</p> <p>For a description of the authentication flow from the
      Amazon Cognito Developer Guide see <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication
      Flow</a>.</p> <p>For more information see <a
      href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon
      Cognito Federated Identities</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cognito-identity-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cognito-identity-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cognito-identity-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cognito-identity
  - name: connect
    description: >-
      <p>Amazon Connect is a cloud-based contact center solution that you use to
      set up and manage a customer contact center and provide reliable customer
      engagement at any scale.</p> <p>Amazon Connect provides metrics and
      real-time reporting that enable you to optimize contact routing. You can
      also resolve customer issues more efficiently by getting customers in
      touch with the appropriate agents.</p> <p>There are limits to the number
      of Amazon Connect resources that you can create. There are also limits to
      the number of requests that you can make per second. For more information,
      see <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html">Amazon
      Connect Service Quotas</a> in the <i>Amazon Connect Administrator
      Guide</i>.</p> <p>You can connect programmatically to an Amazon Web
      Services service by using an endpoint. For a list of Amazon Connect
      endpoints, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/connect_region.html">Amazon
      Connect Endpoints</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/connect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/connect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/connect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:connect
  - name: config
    description: >-
      <fullname>Config</fullname> <p>Config provides a way to keep track of the
      configurations of all the Amazon Web Services resources associated with
      your Amazon Web Services account. You can use Config to get the current
      and historical configurations of each Amazon Web Services resource and
      also to get information about the relationship between the resources. An
      Amazon Web Services resource can be an Amazon Compute Cloud (Amazon EC2)
      instance, an Elastic Block Store (EBS) volume, an elastic network
      Interface (ENI), or a security group. For a complete list of resources
      currently supported by Config, see <a
      href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported
      Amazon Web Services resources</a>.</p> <p>You can access and manage Config
      through the Amazon Web Services Management Console, the Amazon Web
      Services Command Line Interface (Amazon Web Services CLI), the Config API,
      or the Amazon Web Services SDKs for Config. This reference guide contains
      documentation for the Config API and the Amazon Web Services CLI commands
      that you can use to manage Config. The Config API uses the Signature
      Version 4 protocol for signing requests. For more information about how to
      sign a request with this protocol, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4 Signing Process</a>. For detailed information about Config
      features and their associated actions or commands, as well as how to work
      with Amazon Web Services Management Console, see <a
      href="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html">What
      Is Config</a> in the <i>Config Developer Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/config-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/config-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/config-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:config
  - name: connect-contact-lens
    description: >-
      <p>Contact Lens for Amazon Connect enables you to analyze conversations
      between customer and agents, by using speech transcription, natural
      language processing, and intelligent search capabilities. It performs
      sentiment analysis, detects issues, and enables you to automatically
      categorize contacts.</p> <p>Contact Lens for Amazon Connect provides both
      real-time and post-call analytics of customer-agent conversations. For
      more information, see <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/analyze-conversations.html">Analyze
      conversations using Contact Lens</a> in the <i>Amazon Connect
      Administrator Guide</i>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/connect-contact-lens-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/connect-contact-lens-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/connect-contact-lens-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:connect-contact-lens
  - name: compute-optimizer
    description: >-
      <p>Compute Optimizer is a service that analyzes the configuration and
      utilization metrics of your Amazon Web Services compute resources, such as
      Amazon EC2 instances, Amazon EC2 Auto Scaling groups, Lambda functions,
      Amazon EBS volumes, and Amazon ECS services on Fargate. It reports whether
      your resources are optimal, and generates optimization recommendations to
      reduce the cost and improve the performance of your workloads. Compute
      Optimizer also provides recent utilization metric data, in addition to
      projected utilization metric data for the recommendations, which you can
      use to evaluate which recommendation provides the best price-performance
      trade-off. The analysis of your usage patterns can help you decide when to
      move or resize your running resources, and still meet your performance and
      capacity requirements. For more information about Compute Optimizer,
      including the required permissions to use the service, see the <a
      href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/">Compute
      Optimizer User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/compute-optimizer-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/compute-optimizer-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/compute-optimizer-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:compute-optimizer
  - name: connectparticipant
    description: >-
      <p>Amazon Connect is an easy-to-use omnichannel cloud contact center
      service that enables companies of any size to deliver superior customer
      service at a lower cost. Amazon Connect communications capabilities make
      it easy for companies to deliver personalized interactions across
      communication channels, including chat. </p> <p>Use the Amazon Connect
      Participant Service to manage participants (for example, agents,
      customers, and managers listening in), and to send messages and events
      within a chat contact. The APIs in the service enable the following:
      sending chat messages, attachment sharing, managing a participant's
      connection state and message events, and retrieving chat transcripts.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/connectparticipant-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/connectparticipant-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/connectparticipant-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:connectparticipant
  - name: connectcases
    description: >-
      <p>With Amazon Connect Cases, your agents can track and manage customer
      issues that require multiple interactions, follow-up tasks, and teams in
      your contact center. A case represents a customer issue. It records the
      issue, the steps and interactions taken to resolve the issue, and the
      outcome. For more information, see <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Amazon
      Connect Cases</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/connectcases-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/connectcases-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/connectcases-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:connectcases
  - name: connectcampaigns
    description: <p>Provide APIs to create and manage Amazon Connect Campaigns.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/connectcampaigns-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/connectcampaigns-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/connectcampaigns-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:connectcampaigns
  - name: comprehend
    description: >-
      <p>Amazon Comprehend is an Amazon Web Services service for gaining insight
      into the content of documents. Use these actions to determine the topics
      contained in your documents, the topics they discuss, the predominant
      sentiment expressed in them, the predominant language used, and more.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/comprehend-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/comprehend-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/comprehend-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:comprehend
  - name: cost-optimization-hub
    description: >-
      <p>You can use the Cost Optimization Hub API to programmatically identify,
      filter, aggregate, and quantify savings for your cost optimization
      recommendations across multiple Amazon Web Services Regions and Amazon Web
      Services accounts in your organization.</p> <p>The Cost Optimization Hub
      API provides the following endpoint:</p> <ul> <li> <p>
      https://cost-optimization-hub.us-east-1.amazonaws.com </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cost-optimization-hub-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cost-optimization-hub-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cost-optimization-hub-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cost-optimization-hub
  - name: controltower
    description: >-
      <p>These interfaces allow you to apply the Amazon Web Services library of
      pre-defined <i>controls</i> to your organizational units,
      programmatically. In Amazon Web Services Control Tower, the terms
      "control" and "guardrail" are synonyms.</p> <p>To call these APIs, you'll
      need to know:</p> <ul> <li> <p>the <code>controlIdentifier</code> for the
      control--or guardrail--you are targeting.</p> </li> <li> <p>the ARN
      associated with the target organizational unit (OU), which we call the
      <code>targetIdentifier</code>.</p> </li> <li> <p>the ARN associated with a
      resource that you wish to tag or untag.</p> </li> </ul> <p> <b>To get the
      <code>controlIdentifier</code> for your Amazon Web Services Control Tower
      control:</b> </p> <p>The <code>controlIdentifier</code> is an ARN that is
      specified for each control. You can view the
      <code>controlIdentifier</code> in the console on the <b>Control
      details</b> page, as well as in the documentation.</p> <p>The
      <code>controlIdentifier</code> is unique in each Amazon Web Services
      Region for each control. You can find the <code>controlIdentifier</code>
      for each Region and control in the <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-metadata-tables.html">Tables
      of control metadata</a> in the <i>Amazon Web Services Control Tower User
      Guide.</i> </p> <p>A quick-reference list of control identifers for the
      Amazon Web Services Control Tower legacy <i>Strongly recommended</i> and
      <i>Elective</i> controls is given in <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-identifiers.html.html">Resource
      identifiers for APIs and controls</a> in the <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-identifiers.html">Controls
      reference guide section</a> of the <i>Amazon Web Services Control Tower
      User Guide</i>. Remember that <i>Mandatory</i> controls cannot be added or
      removed.</p> <note> <p> <b>ARN format:</b>
      <code>arn:aws:controltower:{REGION}::control/{CONTROL_NAME}</code> </p>
      <p> <b>Example:</b> </p> <p>
      <code>arn:aws:controltower:us-west-2::control/AWS-GR_AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED</code>
      </p> </note> <p> <b>To get the <code>targetIdentifier</code>:</b> </p>
      <p>The <code>targetIdentifier</code> is the ARN for an OU.</p> <p>In the
      Amazon Web Services Organizations console, you can find the ARN for the OU
      on the <b>Organizational unit details</b> page associated with that
      OU.</p> <note> <p> <b>OU ARN format:</b> </p> <p>
      <code>arn:${Partition}:organizations::${MasterAccountId}:ou/o-${OrganizationId}/ou-${OrganizationalUnitId}</code>
      </p> </note> <p class="title"> <b>Details and examples</b> </p> <ul> <li>
      <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-api-examples-short.html">Control
      API input and output examples with CLI</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/enable-controls.html">Enable
      controls with CloudFormation</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-metadata-tables.html">Control
      metadata tables</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/control-identifiers.html">List
      of identifiers for legacy controls</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/controls.html">Controls
      reference guide</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/controls-reference.html">Controls
      library groupings</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/creating-resources-with-cloudformation.html">Creating
      Amazon Web Services Control Tower resources with Amazon Web Services
      CloudFormation</a> </p> </li> </ul> <p>To view the open source resource
      repository on GitHub, see <a
      href="https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-controltower">aws-cloudformation/aws-cloudformation-resource-providers-controltower</a>
      </p> <p> <b>Recording API Requests</b> </p> <p>Amazon Web Services Control
      Tower supports Amazon Web Services CloudTrail, a service that records
      Amazon Web Services API calls for your Amazon Web Services account and
      delivers log files to an Amazon S3 bucket. By using information collected
      by CloudTrail, you can determine which requests the Amazon Web Services
      Control Tower service received, who made the request and when, and so on.
      For more about Amazon Web Services Control Tower and its support for
      CloudTrail, see <a
      href="https://docs.aws.amazon.com/controltower/latest/userguide/logging-using-cloudtrail.html">Logging
      Amazon Web Services Control Tower Actions with Amazon Web Services
      CloudTrail</a> in the Amazon Web Services Control Tower User Guide. To
      learn more about CloudTrail, including how to turn it on and find your log
      files, see the Amazon Web Services CloudTrail User Guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/controltower-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/controltower-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/controltower-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:controltower
  - name: databrew
    description: >-
      <p>Glue DataBrew is a visual, cloud-scale data-preparation service.
      DataBrew simplifies data preparation tasks, targeting data issues that are
      hard to spot and time-consuming to fix. DataBrew empowers users of all
      technical levels to visualize the data and perform one-click data
      transformations, with no coding required.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/databrew-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/databrew-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/databrew-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:databrew
  - name: customer-profiles
    description: >-
      <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect
      Customer Profiles is a unified customer profile for your contact center
      that has pre-built connectors powered by AppFlow that make it easy to
      combine customer information from third party applications, such as
      Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning
      (ERP), with contact history from your Amazon Connect contact center. If
      you're new to Amazon Connect, you might find it helpful to review the <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/">Amazon
      Connect Administrator Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/customer-profiles-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/customer-profiles-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/customer-profiles-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:customer-profiles
  - name: cur
    description: >-
      <p>You can use the Amazon Web Services Cost and Usage Report API to
      programmatically create, query, and delete Amazon Web Services Cost and
      Usage Report definitions.</p> <p>Amazon Web Services Cost and Usage Report
      track the monthly Amazon Web Services costs and usage associated with your
      Amazon Web Services account. The report contains line items for each
      unique combination of Amazon Web Services product, usage type, and
      operation that your Amazon Web Services account uses. You can configure
      the Amazon Web Services Cost and Usage Report to show only the data that
      you want, using the Amazon Web Services Cost and Usage Report API.</p>
      <p>Service Endpoint</p> <p>The Amazon Web Services Cost and Usage Report
      API provides the following endpoint:</p> <ul> <li>
      <p>cur.us-east-1.amazonaws.com</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/cur-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/cur-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/cur-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:cur
  - name: datasync
    description: >-
      <fullname>DataSync</fullname> <p>DataSync is an online data movement and
      discovery service that simplifies data migration and helps you quickly,
      easily, and securely transfer your file or object data to, from, and
      between Amazon Web Services storage services.</p> <p>This API interface
      reference includes documentation for using DataSync programmatically. For
      complete information, see the <i> <a
      href="https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html">DataSync
      User Guide</a> </i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/datasync-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/datasync-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/datasync-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:datasync
  - name: datazone
    description: >-
      <p>Amazon DataZone is a data management service that enables you to
      catalog, discover, govern, share, and analyze your data. With Amazon
      DataZone, you can share and access your data across accounts and supported
      regions. Amazon DataZone simplifies your experience across Amazon Web
      Services services, including, but not limited to, Amazon Redshift, Amazon
      Athena, Amazon Web Services Glue, and Amazon Web Services Lake
      Formation.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/datazone-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/datazone-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/datazone-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:datazone
  - name: dataexchange
    description: >-
      <p>AWS Data Exchange is a service that makes it easy for AWS customers to
      exchange data in the cloud. You can use the AWS Data Exchange APIs to
      create, update, manage, and access file-based data set in the AWS
      Cloud.</p> <p>As a subscriber, you can view and access the data sets that
      you have an entitlement to through a subscription. You can use the APIs to
      download or copy your entitled data sets to Amazon Simple Storage Service
      (Amazon S3) for use across a variety of AWS analytics and machine learning
      services.</p> <p>As a provider, you can create and manage your data sets
      that you would like to publish to a product. Being able to package and
      provide your data sets into products requires a few steps to determine
      eligibility. For more information, visit the <i>AWS Data Exchange User
      Guide</i>.</p> <p>A data set is a collection of data that can be changed
      or updated over time. Data sets can be updated using revisions, which
      represent a new version or incremental change to a data set. A revision
      contains one or more assets. An asset in AWS Data Exchange is a piece of
      data that can be stored as an Amazon S3 object, Redshift datashare, API
      Gateway API, AWS Lake Formation data permission, or Amazon S3 data access.
      The asset can be a structured data file, an image file, or some other data
      file. Jobs are asynchronous import or export operations used to create or
      copy assets.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/dataexchange-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/dataexchange-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/dataexchange-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:dataexchange
  - name: datapipeline
    description: >-
      <p>AWS Data Pipeline configures and manages a data-driven workflow called
      a pipeline. AWS Data Pipeline handles the details of scheduling and
      ensuring that data dependencies are met so that your application can focus
      on processing the data.</p> <p>AWS Data Pipeline provides a JAR
      implementation of a task runner called AWS Data Pipeline Task Runner. AWS
      Data Pipeline Task Runner provides logic for common data management
      scenarios, such as performing database queries and running data analysis
      using Amazon Elastic MapReduce (Amazon EMR). You can use AWS Data Pipeline
      Task Runner as your task runner, or you can write your own task runner to
      provide custom data management.</p> <p>AWS Data Pipeline implements two
      main sets of functionality. Use the first set to create a pipeline and
      define data sources, schedules, dependencies, and the transforms to be
      performed on the data. Use the second set in your task runner application
      to receive the next task ready for processing. The logic for performing
      the task, such as querying the data, running data analysis, or converting
      the data from one format to another, is contained within the task runner.
      The task runner performs the task assigned to it by the web service,
      reporting progress to the web service as it does so. When the task is
      done, the task runner reports the final success or failure of the task to
      the web service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/datapipeline-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/datapipeline-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/datapipeline-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:datapipeline
  - name: devicefarm
    description: >-
      <p>Welcome to the AWS Device Farm API documentation, which contains APIs
      for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm
      makes it possible for you to test your web applications on desktop
      browsers using Selenium. The APIs for desktop browser testing contain
      <code>TestGrid</code> in their names. For more information, see <a
      href="https://docs.aws.amazon.com/devicefarm/latest/testgrid/">Testing Web
      Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing
      on real mobile devices</p> <p>Device Farm makes it possible for you to
      test apps on physical phones, tablets, and other devices in the cloud. For
      more information, see the <a
      href="https://docs.aws.amazon.com/devicefarm/latest/developerguide/">Device
      Farm Developer Guide</a>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/devicefarm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/devicefarm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/devicefarm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:devicefarm
  - name: directconnect
    description: >-
      <p>Direct Connect links your internal network to an Direct Connect
      location over a standard Ethernet fiber-optic cable. One end of the cable
      is connected to your router, the other to an Direct Connect router. With
      this connection in place, you can create virtual interfaces directly to
      the Amazon Web Services Cloud (for example, to Amazon EC2 and Amazon S3)
      and to Amazon VPC, bypassing Internet service providers in your network
      path. A connection provides access to all Amazon Web Services Regions
      except the China (Beijing) and (China) Ningxia Regions. Amazon Web
      Services resources in the China Regions can only be accessed through
      locations associated with those Regions.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/directconnect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/directconnect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/directconnect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:directconnect
  - name: detective
    description: >-
      <p>Detective uses machine learning and purpose-built visualizations to
      help you to analyze and investigate security issues across your Amazon Web
      Services (Amazon Web Services) workloads. Detective automatically extracts
      time-based events such as login attempts, API calls, and network traffic
      from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs.
      It also extracts findings detected by Amazon GuardDuty.</p> <p>The
      Detective API primarily supports the creation and management of behavior
      graphs. A behavior graph contains the extracted data from a set of member
      accounts, and is created and managed by an administrator account.</p>
      <p>To add a member account to the behavior graph, the administrator
      account sends an invitation to the account. When the account accepts the
      invitation, it becomes a member account in the behavior graph.</p>
      <p>Detective is also integrated with Organizations. The organization
      management account designates the Detective administrator account for the
      organization. That account becomes the administrator account for the
      organization behavior graph. The Detective administrator account is also
      the delegated administrator account for Detective in Organizations.</p>
      <p>The Detective administrator account can enable any organization account
      as a member account in the organization behavior graph. The organization
      accounts do not receive invitations. The Detective administrator account
      can also invite other accounts to the organization behavior graph.</p>
      <p>Every behavior graph is specific to a Region. You can only use the API
      to manage behavior graphs that belong to the Region that is associated
      with the currently selected endpoint.</p> <p>The administrator account for
      a behavior graph can use the Detective API to do the following:</p> <ul>
      <li> <p>Enable and disable Detective. Enabling Detective creates a new
      behavior graph.</p> </li> <li> <p>View the list of member accounts in a
      behavior graph.</p> </li> <li> <p>Add member accounts to a behavior
      graph.</p> </li> <li> <p>Remove member accounts from a behavior graph.</p>
      </li> <li> <p>Apply tags to a behavior graph.</p> </li> </ul> <p>The
      organization management account can use the Detective API to select the
      delegated administrator for Detective.</p> <p>The Detective administrator
      account for an organization can use the Detective API to do the
      following:</p> <ul> <li> <p>Perform all of the functions of an
      administrator account.</p> </li> <li> <p>Determine whether to
      automatically enable new organization accounts as member accounts in the
      organization behavior graph.</p> </li> </ul> <p>An invited member account
      can use the Detective API to do the following:</p> <ul> <li> <p>View the
      list of behavior graphs that they are invited to.</p> </li> <li> <p>Accept
      an invitation to contribute to a behavior graph.</p> </li> <li> <p>Decline
      an invitation to contribute to a behavior graph.</p> </li> <li> <p>Remove
      their account from a behavior graph.</p> </li> </ul> <p>All API actions
      are logged as CloudTrail events. See <a
      href="https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html">Logging
      Detective API Calls with CloudTrail</a>.</p> <note> <p>We replaced the
      term "master account" with the term "administrator account." An
      administrator account is used to centrally manage multiple accounts. In
      the case of Detective, the administrator account manages the accounts in
      their behavior graph.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/detective-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/detective-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/detective-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:detective
  - name: dlm
    description: >-
      <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data
      Lifecycle Manager, you can manage the lifecycle of your Amazon Web
      Services resources. You create lifecycle policies, which are used to
      automate operations on the specified resources.</p> <p>Amazon Data
      Lifecycle Manager supports Amazon EBS volumes and snapshots. For
      information about using Amazon Data Lifecycle Manager with Amazon EBS, see
      <a
      href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html">
      Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/dlm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/dlm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/dlm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:dlm
  - name: devops-guru
    description: >-
      <p> Amazon DevOps Guru is a fully managed service that helps you identify
      anomalous behavior in business critical operational applications. You
      specify the Amazon Web Services resources that you want DevOps Guru to
      cover, then the Amazon CloudWatch metrics and Amazon Web Services
      CloudTrail events related to those resources are analyzed. When anomalous
      behavior is detected, DevOps Guru creates an <i>insight</i> that includes
      recommendations, related events, and related metrics that can help you
      improve your operational applications. For more information, see <a
      href="https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html">What
      is Amazon DevOps Guru</a>. </p> <p> You can specify 1 or 2 Amazon Simple
      Notification Service topics so you are notified every time a new insight
      is created. You can also enable DevOps Guru to generate an OpsItem in
      Amazon Web Services Systems Manager for each insight to help you manage
      and track your work addressing insights. </p> <p> To learn about the
      DevOps Guru workflow, see <a
      href="https://docs.aws.amazon.com/devops-guru/latest/userguide/welcome.html#how-it-works">How
      DevOps Guru works</a>. To learn about DevOps Guru concepts, see <a
      href="https://docs.aws.amazon.com/devops-guru/latest/userguide/concepts.html">Concepts
      in DevOps Guru</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/devops-guru-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/devops-guru-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/devops-guru-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:devops-guru
  - name: dax
    description: >-
      <p>DAX is a managed caching service engineered for Amazon DynamoDB. DAX
      dramatically speeds up database reads by caching frequently-accessed data
      from DynamoDB, so applications can access that data with sub-millisecond
      latency. You can create a DAX cluster easily, using the AWS Management
      Console. With a few simple modifications to your code, your application
      can begin taking advantage of the DAX cluster and realize significant
      improvements in read performance.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/dax-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/dax-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/dax-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:dax
  - name: discovery
    description: >-
      <fullname>Amazon Web Services Application Discovery Service</fullname>
      <p>Amazon Web Services Application Discovery Service (Application
      Discovery Service) helps you plan application migration projects. It
      automatically identifies servers, virtual machines (VMs), and network
      dependencies in your on-premises data centers. For more information, see
      the <a href="http://aws.amazon.com/application-discovery/faqs/">Amazon Web
      Services Application Discovery Service FAQ</a>. </p> <p>Application
      Discovery Service offers three ways of performing discovery and collecting
      data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless
      discovery</b> using Amazon Web Services Application Discovery Service
      Agentless Collector (Agentless Collector), which doesn't require you to
      install an agent on each host.</p> <ul> <li> <p>Agentless Collector
      gathers server information regardless of the operating systems, which
      minimizes the time required for initial on-premises infrastructure
      assessment.</p> </li> <li> <p>Agentless Collector doesn't collect
      information about network dependencies, only agent-based discovery
      collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p>
      <b>Agent-based discovery</b> using the Amazon Web Services Application
      Discovery Agent (Application Discovery Agent) collects a richer set of
      data than agentless discovery, which you install on one or more hosts in
      your data center.</p> <ul> <li> <p> The agent captures infrastructure and
      application information, including an inventory of running processes,
      system performance information, resource utilization, and network
      dependencies.</p> </li> <li> <p>The information collected by agents is
      secured at rest and in transit to the Application Discovery Service
      database in the Amazon Web Services cloud. For more information, see <a
      href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html">Amazon
      Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul>
      <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b>
      integrate with Application Discovery Service, enabling you to import
      details of your on-premises environment directly into Amazon Web Services
      Migration Hub (Migration Hub) without using Agentless Collector or
      Application Discovery Agent.</p> <ul> <li> <p>Third-party application
      discovery tools can query Amazon Web Services Application Discovery
      Service, and they can write to the Application Discovery Service database
      using the public API.</p> </li> <li> <p>In this way, you can import data
      into Migration Hub and view it, so that you can associate applications
      with servers and track migrations.</p> </li> </ul> </li> </ul> <p>
      <b>Working With This Guide</b> </p> <p>This API reference provides
      descriptions, syntax, and usage examples for each of the actions and data
      types for Application Discovery Service. The topic for each action shows
      the API request parameters and the response. Alternatively, you can use
      one of the Amazon Web Services SDKs to access an API that is tailored to
      the programming language or platform that you're using. For more
      information, see <a href="http://aws.amazon.com/tools/#SDKs">Amazon Web
      Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your
      Migration Hub home Region before you call any of these APIs.</p> </li>
      <li> <p>You must make API calls for write actions (create, notify,
      associate, disassociate, import, or put) while in your home Region, or a
      <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li>
      <p>API calls for read actions (list, describe, stop, and delete) are
      permitted outside of your home Region.</p> </li> <li> <p>Although it is
      unlikely, the Migration Hub home Region could change. If you call APIs
      outside the home Region, an <code>InvalidInputException</code> is
      returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to
      obtain the latest Migration Hub home Region.</p> </li> </ul> </note>
      <p>This guide is intended for use with the <a
      href="https://docs.aws.amazon.com/application-discovery/latest/userguide/">Amazon
      Web Services Application Discovery Service User Guide</a>.</p> <important>
      <p>All data is handled according to the <a
      href="https://aws.amazon.com/privacy/">Amazon Web Services Privacy
      Policy</a>. You can operate Application Discovery Service offline to
      inspect collected data before it is shared with the service.</p>
      </important>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/discovery-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/discovery-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/discovery-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:discovery
  - name: ds
    description: >-
      <fullname>Directory Service</fullname> <p>Directory Service is a web
      service that makes it easy for you to setup and run directories in the
      Amazon Web Services cloud, or connect your Amazon Web Services resources
      with an existing self-managed Microsoft Active Directory. This guide
      provides detailed information about Directory Service operations, data
      types, parameters, and errors. For information about Directory Services
      features, see <a href="https://aws.amazon.com/directoryservice/">Directory
      Service</a> and the <a
      href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html">Directory
      Service Administration Guide</a>.</p> <note> <p>Amazon Web Services
      provides SDKs that consist of libraries and sample code for various
      programming languages and platforms (Java, Ruby, .Net, iOS, Android,
      etc.). The SDKs provide a convenient way to create programmatic access to
      Directory Service and other Amazon Web Services services. For more
      information about the Amazon Web Services SDKs, including how to download
      and install them, see <a href="http://aws.amazon.com/tools/">Tools for
      Amazon Web Services</a>.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ds-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ds-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ds-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ds
  - name: drs
    description: <p>AWS Elastic Disaster Recovery Service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/drs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/drs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/drs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:drs
  - name: dms
    description: >-
      <fullname>Database Migration Service</fullname> <p>Database Migration
      Service (DMS) can migrate your data to and from the most widely used
      commercial and open-source databases such as Oracle, PostgreSQL, Microsoft
      SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP
      Adaptive Server Enterprise (ASE). The service supports homogeneous
      migrations such as Oracle to Oracle, as well as heterogeneous migrations
      between different database platforms, such as Oracle to MySQL or SQL
      Server to PostgreSQL.</p> <p>For more information about DMS, see <a
      href="https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html">What
      Is Database Migration Service?</a> in the <i>Database Migration Service
      User Guide.</i> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/dms-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/dms-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/dms-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:dms
  - name: ebs
    description: >-
      <p>You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to
      create Amazon EBS snapshots, write data directly to your snapshots, read
      data on your snapshots, and identify the differences or changes between
      two snapshots. If you’re an independent software vendor (ISV) who offers
      backup services for Amazon EBS, the EBS direct APIs make it more efficient
      and cost-effective to track incremental changes on your Amazon EBS volumes
      through snapshots. This can be done without having to create new volumes
      from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2)
      instances to compare the differences.</p> <p>You can create incremental
      snapshots directly from data on-premises into volumes and the cloud to use
      for quick disaster recovery. With the ability to write and read snapshots,
      you can write your on-premises data to an snapshot during a disaster. Then
      after recovery, you can restore it back to Amazon Web Services or
      on-premises from the snapshot. You no longer need to build and maintain
      complex mechanisms to copy data to and from Amazon EBS.</p> <p>This API
      reference provides detailed information about the actions, data types,
      parameters, and errors of the EBS direct APIs. For more information about
      the elements that make up the EBS direct APIs, and examples of how to use
      them effectively, see <a
      href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html">Accessing
      the Contents of an Amazon EBS Snapshot</a> in the <i>Amazon Elastic
      Compute Cloud User Guide</i>. For more information about the supported
      Amazon Web Services Regions, endpoints, and service quotas for the EBS
      direct APIs, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/ebs-service.html">Amazon
      Elastic Block Store Endpoints and Quotas</a> in the <i>Amazon Web Services
      General Reference</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ebs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ebs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ebs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ebs
  - name: docdb
    description: >-
      <p>Amazon DocumentDB is a fast, reliable, and fully managed database
      service. Amazon DocumentDB makes it easy to set up, operate, and scale
      MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can
      run the same application code and use the same drivers and tools that you
      use with MongoDB.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/docdb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/docdb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/docdb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:docdb
  - name: docdb-elastic
    description: <p>The new Amazon Elastic DocumentDB service endpoint.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/docdb-elastic-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/docdb-elastic-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/docdb-elastic-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:docdb-elastic
  - name: ec2-instance-connect
    description: >-
      <p>Amazon EC2 Instance Connect enables system administrators to publish
      one-time use SSH public keys to EC2, providing users a simple and secure
      way to connect to their instances.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ec2-instance-connect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ec2-instance-connect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ec2-instance-connect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ec2-instance-connect
  - name: dynamodb
    description: >-
      <p>Amazon DynamoDB is a fast, highly scalable, highly available,
      cost-effective non-relational database service.</p> <p>Amazon DynamoDB
      removes traditional scalability limitations on data storage while
      maintaining low latency and predictable performance.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/dynamodb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/dynamodb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/dynamodb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:dynamodb
  - name: ec2
    description: >-
      <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic
      Compute Cloud (Amazon EC2) provides resizable computing capacity in the
      Amazon Web Services (AWS) cloud. Using Amazon EC2 eliminates your need to
      invest in hardware up front, so you can develop and deploy applications
      faster.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ec2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ec2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ec2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ec2
  - name: eks
    description: >-
      <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service
      that makes it easy for you to run Kubernetes on Amazon Web Services
      without needing to setup or maintain your own Kubernetes control plane.
      Kubernetes is an open-source system for automating the deployment,
      scaling, and management of containerized applications.</p> <p>Amazon EKS
      runs up-to-date versions of the open-source Kubernetes software, so you
      can use all the existing plugins and tooling from the Kubernetes
      community. Applications running on Amazon EKS are fully compatible with
      applications running on any standard Kubernetes environment, whether
      running in on-premises data centers or public clouds. This means that you
      can easily migrate any standard Kubernetes application to Amazon EKS
      without any code modification required.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/eks-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/eks-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/eks-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:eks
  - name: ecr
    description: >-
      <fullname>Amazon Elastic Container Registry</fullname> <p>Amazon Elastic
      Container Registry (Amazon ECR) is a managed container image registry
      service. Customers can use the familiar Docker CLI, or their preferred
      client, to push, pull, and manage images. Amazon ECR provides a secure,
      scalable, and reliable registry for your Docker or Open Container
      Initiative (OCI) images. Amazon ECR supports private repositories with
      resource-based permissions using IAM so that specific users or Amazon EC2
      instances can access repositories and images.</p> <p>Amazon ECR has
      service endpoints in each supported Region. For more information, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/ecr.html">Amazon ECR
      endpoints</a> in the <i>Amazon Web Services General Reference</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ecr-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ecr-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ecr-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ecr
  - name: ecs
    description: >-
      <fullname>Amazon Elastic Container Service</fullname> <p>Amazon Elastic
      Container Service (Amazon ECS) is a highly scalable, fast, container
      management service. It makes it easy to run, stop, and manage Docker
      containers. You can host your cluster on a serverless infrastructure
      that's managed by Amazon ECS by launching your services or tasks on
      Fargate. For more control, you can host your tasks on a cluster of Amazon
      Elastic Compute Cloud (Amazon EC2) or External (on-premises) instances
      that you manage.</p> <p>Amazon ECS makes it easy to launch and stop
      container-based applications with simple API calls. This makes it easy to
      get the state of your cluster from a centralized service, and gives you
      access to many familiar Amazon EC2 features.</p> <p>You can use Amazon ECS
      to schedule the placement of containers across your cluster based on your
      resource needs, isolation policies, and availability requirements. With
      Amazon ECS, you don't need to operate your own cluster management and
      configuration management systems. You also don't need to worry about
      scaling your management infrastructure. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ecs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ecs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ecs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ecs
  - name: elasticache
    description: >-
      <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web
      service that makes it easier to set up, operate, and scale a distributed
      cache in the cloud.</p> <p>With ElastiCache, customers get all of the
      benefits of a high-performance, in-memory cache with less of the
      administrative burden involved in launching and managing a distributed
      cache. The service makes setup, scaling, and cluster failure handling much
      simpler than in a self-managed cache deployment.</p> <p>In addition,
      through integration with Amazon CloudWatch, customers get enhanced
      visibility into the key performance statistics associated with their cache
      and can receive alarms if a part of their cache runs hot.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticache-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticache-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticache-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticache
  - name: ecr-public
    description: >-
      <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon
      Elastic Container Registry Public (Amazon ECR Public) is a managed
      container image registry service. Amazon ECR provides both public and
      private registries to host your container images. You can use the Docker
      CLI or your preferred client to push, pull, and manage images. Amazon ECR
      provides a secure, scalable, and reliable registry for your Docker or Open
      Container Initiative (OCI) images. Amazon ECR supports public repositories
      with this API. For information about the Amazon ECR API for private
      repositories, see <a
      href="https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html">Amazon
      Elastic Container Registry API Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ecr-public-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ecr-public-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ecr-public-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ecr-public
  - name: elasticfilesystem
    description: >-
      <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File
      System (Amazon EFS) provides simple, scalable file storage for use with
      Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With
      Amazon EFS, storage capacity is elastic, growing and shrinking
      automatically as you add and remove files, so that your applications have
      the storage they need, when they need it. For more information, see the <a
      href="https://docs.aws.amazon.com/efs/latest/ug/api-reference.html">Amazon
      Elastic File System API Reference</a> and the <a
      href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">Amazon
      Elastic File System User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticfilesystem-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticfilesystem-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticfilesystem-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticfilesystem
  - name: elasticloadbalancing
    description: >-
      <fullname>Elastic Load Balancing</fullname> <p>A load balancer can
      distribute incoming traffic across your EC2 instances. This enables you to
      increase the availability of your application. The load balancer also
      monitors the health of its registered instances and ensures that it routes
      traffic only to healthy instances. You configure your load balancer to
      accept incoming traffic by specifying one or more listeners, which are
      configured with a protocol and port number for connections from clients to
      the load balancer and a protocol and port number for connections from the
      load balancer to the instances.</p> <p>Elastic Load Balancing supports
      three types of load balancers: Application Load Balancers, Network Load
      Balancers, and Classic Load Balancers. You can select a load balancer
      based on your application needs. For more information, see the <a
      href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic
      Load Balancing User Guide</a>.</p> <p>This reference covers the 2012-06-01
      API, which supports Classic Load Balancers. The 2015-12-01 API supports
      Application Load Balancers and Network Load Balancers.</p> <p>To get
      started, create a load balancer with one or more listeners using
      <a>CreateLoadBalancer</a>. Register your instances with the load balancer
      using <a>RegisterInstancesWithLoadBalancer</a>.</p> <p>All Elastic Load
      Balancing operations are <i>idempotent</i>, which means that they complete
      at most one time. If you repeat an operation, it succeeds with a 200 OK
      response code.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticloadbalancing-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticloadbalancing-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticloadbalancing-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticloadbalancing
  - name: elasticbeanstalk
    description: >-
      <fullname>AWS Elastic Beanstalk</fullname> <p>AWS Elastic Beanstalk makes
      it easy for you to create, deploy, and manage scalable, fault-tolerant
      applications running on the Amazon Web Services cloud.</p> <p>For more
      information about this product, go to the <a
      href="http://aws.amazon.com/elasticbeanstalk/">AWS Elastic Beanstalk</a>
      details page. The location of the latest AWS Elastic Beanstalk WSDL is <a
      href="https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl">https://elasticbeanstalk.s3.amazonaws.com/doc/2010-12-01/AWSElasticBeanstalk.wsdl</a>.
      To install the Software Development Kits (SDKs), Integrated Development
      Environment (IDE) Toolkits, and command line tools that enable you to
      access the API, go to <a href="http://aws.amazon.com/tools/">Tools for
      Amazon Web Services</a>.</p> <p> <b>Endpoints</b> </p> <p>For a list of
      region-specific endpoints that AWS Elastic Beanstalk supports, go to <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region">Regions
      and Endpoints</a> in the <i>Amazon Web Services Glossary</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticbeanstalk-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticbeanstalk-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticbeanstalk-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticbeanstalk
  - name: elastic-inference
    description: >-
      <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting
      April 15, 2023, AWS will not onboard new customers to Amazon Elastic
      Inference (EI), and will help current customers migrate their workloads to
      options that offer better price and performance. After April 15, 2023, new
      customers will not be able to launch instances with Amazon EI accelerators
      in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who
      have used Amazon EI at least once during the past 30-day period are
      considered current customers and will be able to continue using the
      service. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elastic-inference-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elastic-inference-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elastic-inference-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elastic-inference
  - name: eks-auth
    description: >-
      <p>The Amazon EKS Auth API and the <code>AssumeRoleForPodIdentity</code>
      action are only used by the EKS Pod Identity Agent.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/eks-auth-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/eks-auth-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/eks-auth-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:eks-auth
  - name: elasticloadbalancingv2
    description: >-
      <fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes
      incoming traffic across targets, such as your EC2 instances. This enables
      you to increase the availability of your application. The load balancer
      also monitors the health of its registered targets and ensures that it
      routes traffic only to healthy targets. You configure your load balancer
      to accept incoming traffic by specifying one or more listeners, which are
      configured with a protocol and port number for connections from clients to
      the load balancer. You configure a target group with a protocol and port
      number for connections from the load balancer to the targets, and with
      health check settings to be used when checking the health status of the
      targets.</p> <p>Elastic Load Balancing supports the following types of
      load balancers: Application Load Balancers, Network Load Balancers,
      Gateway Load Balancers, and Classic Load Balancers. This reference covers
      the following load balancer types:</p> <ul> <li> <p>Application Load
      Balancer - Operates at the application layer (layer 7) and supports HTTP
      and HTTPS.</p> </li> <li> <p>Network Load Balancer - Operates at the
      transport layer (layer 4) and supports TCP, TLS, and UDP.</p> </li> <li>
      <p>Gateway Load Balancer - Operates at the network layer (layer 3).</p>
      </li> </ul> <p>For more information, see the <a
      href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic
      Load Balancing User Guide</a>.</p> <p>All Elastic Load Balancing
      operations are idempotent, which means that they complete at most one
      time. If you repeat an operation, it succeeds.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticloadbalancingv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticloadbalancingv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticloadbalancingv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticloadbalancingv2
  - name: elasticmapreduce
    description: >-
      <p>Amazon EMR is a web service that makes it easier to process large
      amounts of data efficiently. Amazon EMR uses Hadoop processing combined
      with several Amazon Web Services services to do tasks such as web
      indexing, data mining, log file analysis, machine learning, scientific
      simulation, and data warehouse management.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elasticmapreduce-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elasticmapreduce-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elasticmapreduce-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elasticmapreduce
  - name: emr-containers
    description: >-
      <p>Amazon EMR on EKS provides a deployment option for Amazon EMR that
      allows you to run open-source big data frameworks on Amazon Elastic
      Kubernetes Service (Amazon EKS). With this deployment option, you can
      focus on running analytics workloads while Amazon EMR on EKS builds,
      configures, and manages containers for open-source applications. For more
      information about Amazon EMR on EKS concepts and tasks, see <a
      href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html">What
      is shared id="EMR-EKS"/&gt;</a>.</p> <p> <i>Amazon EMR containers</i> is
      the API name for Amazon EMR on EKS. The <code>emr-containers</code> prefix
      is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in
      the CLI commands for Amazon EMR on EKS. For example, <code>aws
      emr-containers start-job-run</code>.</p> </li> <li> <p>It is the prefix
      before IAM policy actions for Amazon EMR on EKS. For example,
      <code>"Action": [ "emr-containers:StartJobRun"]</code>. For more
      information, see <a
      href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions">Policy
      actions for Amazon EMR on EKS</a>.</p> </li> <li> <p>It is the prefix used
      in Amazon EMR on EKS service endpoints. For example,
      <code>emr-containers.us-east-2.amazonaws.com</code>. For more information,
      see <a
      href="https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/service-quotas.html#service-endpoints">Amazon
      EMR on EKSService Endpoints</a>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/emr-containers-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/emr-containers-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/emr-containers-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:emr-containers
  - name: elastictranscoder
    description: >-
      <fullname>AWS Elastic Transcoder Service</fullname> <p>The AWS Elastic
      Transcoder Service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/elastictranscoder-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/elastictranscoder-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/elastictranscoder-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:elastictranscoder
  - name: email
    description: >-
      <fullname>Amazon Simple Email Service</fullname> <p> This document
      contains reference information for the <a
      href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon
      SES) API, version 2010-12-01. This document is best used in conjunction
      with the <a
      href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon
      SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES
      endpoints to use in service requests, see <a
      href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions
      and Amazon SES</a> in the <a
      href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon
      SES Developer Guide</a>.</p> </note> <p>This documentation contains
      reference information related to the following:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/ses/latest/APIReference/API_Operations.html">Amazon
      SES API Actions</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/ses/latest/APIReference/API_Types.html">Amazon
      SES API Data Types</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/ses/latest/APIReference/CommonParameters.html">Common
      Parameters</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/ses/latest/APIReference/CommonErrors.html">Common
      Errors</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/email-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/email-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/email-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:email
  - name: emr-serverless
    description: >-
      <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon
      EMR Serverless provides a serverless runtime environment that simplifies
      running analytics applications using the latest open source frameworks
      such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you
      don’t have to configure, optimize, secure, or operate clusters to run
      applications with these frameworks.</p> <p>The API reference to Amazon EMR
      Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code>
      prefix is used in the following scenarios: </p> <ul> <li> <p>It is the
      prefix in the CLI commands for Amazon EMR Serverless. For example,
      <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the
      prefix before IAM policy actions for Amazon EMR Serverless. For example,
      <code>"Action": ["emr-serverless:StartJobRun"]</code>. For more
      information, see <a
      href="https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions">Policy
      actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix
      used in Amazon EMR Serverless service endpoints. For example,
      <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/emr-serverless-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/emr-serverless-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/emr-serverless-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:emr-serverless
  - name: es
    description: >-
      <fullname>Amazon Elasticsearch Configuration Service</fullname> <p>Use the
      Amazon Elasticsearch Configuration API to create, configure, and manage
      Elasticsearch domains.</p> <p>For sample code that uses the Configuration
      API, see the <a
      href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html">Amazon
      Elasticsearch Service Developer Guide</a>. The guide also contains <a
      href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html">sample
      code for sending signed HTTP requests to the Elasticsearch APIs</a>.</p>
      <p>The endpoint for configuration service requests is region-specific:
      es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com.
      For a current list of supported regions and endpoints, see <a
      href="http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions"
      target="_blank">Regions and Endpoints</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/es-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/es-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/es-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:es
  - name: entitlement.marketplace
    description: >-
      <fullname>AWS Marketplace Entitlement Service</fullname> <p>This reference
      provides descriptions of the AWS Marketplace Entitlement Service API.</p>
      <p>AWS Marketplace Entitlement Service is used to determine the
      entitlement of a customer to a given product. An entitlement represents
      capacity in a product owned by the customer. For example, a customer might
      own some number of users or seats in an SaaS application or some amount of
      data capacity in a multi-tenant database.</p> <p> <b>Getting Entitlement
      Records</b> </p> <ul> <li> <p> <i>GetEntitlements</i>- Gets the
      entitlements for a Marketplace product.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/entitlementmarketplace-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/entitlementmarketplace-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/entitlementmarketplace-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:entitlementmarketplace
  - name: entityresolution
    description: >-
      <p>Welcome to the <i>Entity Resolution API Reference</i>.</p> <p>Entity
      Resolution is an Amazon Web Services service that provides pre-configured
      entity resolution capabilities that enable developers and analysts at
      advertising and marketing companies to build an accurate and complete view
      of their consumers.</p> <p> With Entity Resolution, you can match source
      records containing consumer identifiers, such as name, email address, and
      phone number. This is true even when these records have incomplete or
      conflicting identifiers. For example, Entity Resolution can effectively
      match a source record from a customer relationship management (CRM) system
      with a source record from a marketing system containing campaign
      information.</p> <p>To learn more about Entity Resolution concepts,
      procedures, and best practices, see the <a
      href="https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html">Entity
      Resolution User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/entityresolution-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/entityresolution-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/entityresolution-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:entityresolution
  - name: eventbridge
    description: >-
      <p>Amazon EventBridge helps you to respond to state changes in your Amazon
      Web Services resources. When your resources change state, they
      automatically send events to an event stream. You can create rules that
      match selected events in the stream and route them to targets to take
      action. You can also use rules to take action on a predetermined schedule.
      For example, you can configure rules to:</p> <ul> <li> <p>Automatically
      invoke an Lambda function to update DNS entries when an event notifies you
      that Amazon EC2 instance enters the running state.</p> </li> <li>
      <p>Direct specific API records from CloudTrail to an Amazon Kinesis data
      stream for detailed analysis of potential security or availability
      risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a
      snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information
      about the features of Amazon EventBridge, see the <a
      href="https://docs.aws.amazon.com/eventbridge/latest/userguide">Amazon
      EventBridge User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/eventbridge-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/eventbridge-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/eventbridge-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:eventbridge
  - name: events
    description: >-
      <p>Amazon EventBridge helps you to respond to state changes in your Amazon
      Web Services resources. When your resources change state, they
      automatically send events to an event stream. You can create rules that
      match selected events in the stream and route them to targets to take
      action. You can also use rules to take action on a predetermined schedule.
      For example, you can configure rules to:</p> <ul> <li> <p>Automatically
      invoke an Lambda function to update DNS entries when an event notifies you
      that Amazon EC2 instance enters the running state.</p> </li> <li>
      <p>Direct specific API records from CloudTrail to an Amazon Kinesis data
      stream for detailed analysis of potential security or availability
      risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a
      snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information
      about the features of Amazon EventBridge, see the <a
      href="https://docs.aws.amazon.com/eventbridge/latest/userguide">Amazon
      EventBridge User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/events-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/events-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/events-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:events
  - name: firehose
    description: >-
      <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon
      Kinesis Data Firehose is a fully managed service that delivers real-time
      streaming data to destinations such as Amazon Simple Storage Service
      (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and
      various other supportd destinations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/firehose-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/firehose-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/firehose-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:firehose
  - name: evidently
    description: >-
      <p>You can use Amazon CloudWatch Evidently to safely validate new features
      by serving them to a specified percentage of your users while you roll out
      the feature. You can monitor the performance of the new feature to help
      you decide when to ramp up traffic to your users. This helps you reduce
      risk and identify unintended consequences before you fully launch the
      feature.</p> <p>You can also conduct A/B experiments to make feature
      design decisions based on evidence and data. An experiment can test as
      many as five variations at once. Evidently collects experiment data and
      analyzes it using statistical methods. It also provides clear
      recommendations about which variations perform better. You can test both
      user-facing features and backend features.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/evidently-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/evidently-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/evidently-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:evidently
  - name: forecast
    description: <p>Provides APIs for creating and managing Amazon Forecast resources.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/forecast-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/forecast-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/forecast-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:forecast
  - name: fis
    description: >-
      <p>Fault Injection Simulator is a managed service that enables you to
      perform fault injection experiments on your Amazon Web Services workloads.
      For more information, see the <a
      href="https://docs.aws.amazon.com/fis/latest/userguide/">Fault Injection
      Simulator User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/fis-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/fis-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/fis-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:fis
  - name: forecastquery
    description: <p>Provides APIs for creating and managing Amazon Forecast resources.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/forecastquery-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/forecastquery-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/forecastquery-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:forecastquery
  - name: frauddetector
    description: >-
      <p>This is the Amazon Fraud Detector API Reference. This guide is for
      developers who need detailed information about Amazon Fraud Detector API
      actions, data types, and errors. For more information about Amazon Fraud
      Detector features, see the <a
      href="https://docs.aws.amazon.com/frauddetector/latest/ug/">Amazon Fraud
      Detector User Guide</a>.</p> <p>We provide the Query API as well as AWS
      software development kits (SDK) for Amazon Fraud Detector in Java and
      Python programming languages.</p> <p>The Amazon Fraud Detector Query API
      provides HTTPS requests that use the HTTP verb GET or POST and a Query
      parameter <code>Action</code>. AWS SDK provides libraries, sample code,
      tutorials, and other resources for software developers who prefer to build
      applications using language-specific APIs instead of submitting a request
      over HTTP or HTTPS. These libraries provide basic functions that
      automatically take care of tasks such as cryptographically signing your
      requests, retrying requests, and handling error responses, so that it is
      easier for you to get started. For more information about the AWS SDKs, go
      to <a href="https://aws.amazon.com/developer/tools/">Tools to build on
      AWS</a> page, scroll down to the <b>SDK</b> section, and choose plus (+)
      sign to expand the section. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/frauddetector-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/frauddetector-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/frauddetector-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:frauddetector
  - name: fms
    description: >-
      <p>This is the <i>Firewall Manager API Reference</i>. This guide is for
      developers who need detailed information about the Firewall Manager API
      actions, data types, and errors. For detailed information about Firewall
      Manager features, see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-chapter.html">Firewall
      Manager Developer Guide</a>.</p> <p>Some API actions require explicit
      resource permissions. For information, see the developer guide topic <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-security_iam_service-with-iam.html#fms-security_iam_service-with-iam-roles-service">Service
      roles for Firewall Manager</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/fms-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/fms-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/fms-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:fms
  - name: gamelift
    description: >-
      <p>Amazon GameLift provides solutions for hosting session-based
      multiplayer game servers in the cloud, including tools for deploying,
      operating, and scaling game servers. Built on Amazon Web Services global
      computing infrastructure, GameLift helps you deliver high-performance,
      high-reliability, low-cost game servers while dynamically scaling your
      resource usage to meet player demand. </p> <p> <b>About Amazon GameLift
      solutions</b> </p> <p>Get more information on these Amazon GameLift
      solutions in the <a
      href="https://docs.aws.amazon.com/gamelift/latest/developerguide/">Amazon
      GameLift Developer Guide</a>.</p> <ul> <li> <p>Amazon GameLift managed
      hosting -- Amazon GameLift offers a fully managed service to set up and
      maintain computing machines for hosting, manage game session and player
      session life cycle, and handle security, storage, and performance
      tracking. You can use automatic scaling tools to balance player demand and
      hosting costs, configure your game session management to minimize player
      latency, and add FlexMatch for matchmaking.</p> </li> <li> <p>Managed
      hosting with Realtime Servers -- With Amazon GameLift Realtime Servers,
      you can quickly configure and set up ready-to-go game servers for your
      game. Realtime Servers provides a game server framework with core Amazon
      GameLift infrastructure already built in. Then use the full range of
      Amazon GameLift managed hosting features, including FlexMatch, for your
      game.</p> </li> <li> <p>Amazon GameLift FleetIQ -- Use Amazon GameLift
      FleetIQ as a standalone service while hosting your games using EC2
      instances and Auto Scaling groups. Amazon GameLift FleetIQ provides
      optimizations for game hosting, including boosting the viability of
      low-cost Spot Instances gaming. For a complete solution, pair the Amazon
      GameLift FleetIQ and FlexMatch standalone services.</p> </li> <li>
      <p>Amazon GameLift FlexMatch -- Add matchmaking to your game hosting
      solution. FlexMatch is a customizable matchmaking service for multiplayer
      games. Use FlexMatch as integrated with Amazon GameLift managed hosting or
      incorporate FlexMatch as a standalone service into your own hosting
      solution.</p> </li> </ul> <p> <b>About this API Reference</b> </p> <p>This
      reference guide describes the low-level service API for Amazon GameLift.
      With each topic in this guide, you can find links to language-specific SDK
      guides and the Amazon Web Services CLI reference. Useful links:</p> <ul>
      <li> <p> <a
      href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html">Amazon
      GameLift API operations listed by tasks</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-components.html">
      Amazon GameLift tools and resources</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/gamelift-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/gamelift-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/gamelift-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:gamelift
  - name: freetier
    description: >-
      <p>You can use the Amazon Web Services Free Tier API to query
      programmatically your Free Tier usage data.</p> <p>Free Tier tracks your
      monthly usage data for all free tier offers that are associated with your
      Amazon Web Services account. You can use the Free Tier API to filter and
      show only the data that you want.</p> <p>Service endpoint</p> <p>The Free
      Tier API provides the following endpoint:</p> <ul> <li>
      <p>https://freetier.us-east-1.api.aws</p> </li> </ul> <p>For more
      information, see <a
      href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-free-tier.html">Using
      the Amazon Web Services Free Tier</a> in the <i>Billing User
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/freetier-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/freetier-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/freetier-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:freetier
  - name: globalaccelerator
    description: >-
      <fullname>Global Accelerator</fullname> <p>This is the <i>Global
      Accelerator API Reference</i>. This guide is for developers who need
      detailed information about Global Accelerator API actions, data types, and
      errors. For more information about Global Accelerator features, see the <a
      href="https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html">Global
      Accelerator Developer Guide</a>.</p> <p>Global Accelerator is a service in
      which you create <i>accelerators</i> to improve the performance of your
      applications for local and global users. Depending on the type of
      accelerator you choose, you can gain additional benefits. </p> <ul> <li>
      <p>By using a standard accelerator, you can improve availability of your
      internet applications that are used by a global audience. With a standard
      accelerator, Global Accelerator directs traffic to optimal endpoints over
      the Amazon Web Services global network. </p> </li> <li> <p>For other
      scenarios, you might choose a custom routing accelerator. With a custom
      routing accelerator, you can use application logic to directly map one or
      more users to a specific endpoint among many endpoints.</p> </li> </ul>
      <important> <p>Global Accelerator is a global service that supports
      endpoints in multiple Amazon Web Services Regions but you must specify the
      US West (Oregon) Region to create, update, or otherwise work with
      accelerators. That is, for example, specify <code>--region
      us-west-2</code> on Amazon Web Services CLI commands.</p> </important>
      <p>By default, Global Accelerator provides you with static IP addresses
      that you associate with your accelerator. The static IP addresses are
      anycast from the Amazon Web Services edge network. For IPv4, Global
      Accelerator provides two static IPv4 addresses. For dual-stack, Global
      Accelerator provides a total of four addresses: two static IPv4 addresses
      and two static IPv6 addresses. With a standard accelerator for IPv4,
      instead of using the addresses that Global Accelerator provides, you can
      configure these entry points to be IPv4 addresses from your own IP address
      ranges that you bring to Global Accelerator (BYOIP). </p> <p>For a
      standard accelerator, they distribute incoming application traffic across
      multiple endpoint resources in multiple Amazon Web Services Regions ,
      which increases the availability of your applications. Endpoints for
      standard accelerators can be Network Load Balancers, Application Load
      Balancers, Amazon EC2 instances, or Elastic IP addresses that are located
      in one Amazon Web Services Region or multiple Amazon Web Services Regions.
      For custom routing accelerators, you map traffic that arrives to the
      static IP addresses to specific Amazon EC2 servers in endpoints that are
      virtual private cloud (VPC) subnets.</p> <important> <p>The static IP
      addresses remain assigned to your accelerator for as long as it exists,
      even if you disable the accelerator and it no longer accepts or routes
      traffic. However, when you <i>delete</i> an accelerator, you lose the
      static IP addresses that are assigned to it, so you can no longer route
      traffic by using them. You can use IAM policies like tag-based permissions
      with Global Accelerator to limit the users who have permissions to delete
      an accelerator. For more information, see <a
      href="https://docs.aws.amazon.com/global-accelerator/latest/dg/access-control-manage-access-tag-policies.html">Tag-based
      policies</a>.</p> </important> <p>For standard accelerators, Global
      Accelerator uses the Amazon Web Services global network to route traffic
      to the optimal regional endpoint based on health, client location, and
      policies that you configure. The service reacts instantly to changes in
      health or configuration to ensure that internet traffic from clients is
      always directed to healthy endpoints.</p> <p>For more information about
      understanding and using Global Accelerator, see the <a
      href="https://docs.aws.amazon.com/global-accelerator/latest/dg/what-is-global-accelerator.html">Global
      Accelerator Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/globalaccelerator-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/globalaccelerator-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/globalaccelerator-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:globalaccelerator
  - name: glacier
    description: >-
      <p> Amazon S3 Glacier (Glacier) is a storage solution for "cold data."</p>
      <p>Glacier is an extremely low-cost storage service that provides secure,
      durable, and easy-to-use storage for data backup and archival. With
      Glacier, customers can store their data cost effectively for months,
      years, or decades. Glacier also enables customers to offload the
      administrative burdens of operating and scaling storage to AWS, so they
      don't have to worry about capacity planning, hardware provisioning, data
      replication, hardware failure and recovery, or time-consuming hardware
      migrations.</p> <p>Glacier is a great storage choice when low storage cost
      is paramount and your data is rarely retrieved. If your application
      requires fast or frequent access to your data, consider using Amazon S3.
      For more information, see <a href="http://aws.amazon.com/s3/">Amazon
      Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of
      data in any format. There is no maximum limit on the total amount of data
      you can store in Glacier.</p> <p>If you are a first-time user of Glacier,
      we recommend that you begin by reading the following sections in the
      <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html">What
      is Amazon S3 Glacier</a> - This section of the Developer Guide describes
      the underlying data model, the operations it supports, and the AWS SDKs
      that you can use to interact with the service.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html">Getting
      Started with Amazon S3 Glacier</a> - The Getting Started section walks you
      through the process of creating a vault, uploading archives, creating jobs
      to download archives, retrieving the job output, and deleting
      archives.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/glacier-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/glacier-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/glacier-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:glacier
  - name: finspace-data
    description: <p> The FinSpace APIs let you take actions inside the FinSpace.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/finspace-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/finspace-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/finspace-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:finspace-data
  - name: finspace
    description: >-
      <p>The FinSpace management service provides the APIs for managing FinSpace
      environments.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/finspace-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/finspace-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/finspace-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:finspace
  - name: fsx
    description: >-
      <p>Amazon FSx is a fully managed service that makes it easy for storage
      and application administrators to launch and use shared file storage.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/fsx-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/fsx-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/fsx-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:fsx
  - name: greengrassv2
    description: >-
      <p>IoT Greengrass brings local compute, messaging, data management, sync,
      and ML inference capabilities to edge devices. This enables devices to
      collect and analyze data closer to the source of information, react
      autonomously to local events, and communicate securely with each other on
      local networks. Local devices can also communicate securely with Amazon
      Web Services IoT Core and export IoT data to the Amazon Web Services
      Cloud. IoT Greengrass developers can use Lambda functions and components
      to create and deploy applications to fleets of edge devices for local
      operation.</p> <p>IoT Greengrass Version 2 provides a new major version of
      the IoT Greengrass Core software, new APIs, and a new console. Use this
      API reference to learn how to use the IoT Greengrass V2 API operations to
      manage components, manage deployments, and core devices.</p> <p>For more
      information, see <a
      href="https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html">What
      is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/greengrassv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/greengrassv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/greengrassv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:greengrassv2
  - name: glue
    description: >-
      <fullname>Glue</fullname> <p>Defines the public endpoint for the Glue
      service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/glue-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/glue-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/glue-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:glue
  - name: grafana
    description: >-
      <p>Amazon Managed Grafana is a fully managed and secure data visualization
      service that you can use to instantly query, correlate, and visualize
      operational metrics, logs, and traces from multiple sources. Amazon
      Managed Grafana makes it easy to deploy, operate, and scale Grafana, a
      widely deployed data visualization tool that is popular for its extensible
      data support.</p> <p>With Amazon Managed Grafana, you create logically
      isolated Grafana servers called <i>workspaces</i>. In a workspace, you can
      create Grafana dashboards and visualizations to analyze your metrics,
      logs, and traces without having to build, package, or deploy any hardware
      to run Grafana servers. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/grafana-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/grafana-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/grafana-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:grafana
  - name: guardduty
    description: >-
      <p>Amazon GuardDuty is a continuous security monitoring service that
      analyzes and processes the following foundational data sources - VPC flow
      logs, Amazon Web Services CloudTrail management event logs, CloudTrail S3
      data event logs, EKS audit logs, DNS logs, Amazon EBS volume data, runtime
      activity belonging to container workloads, such as Amazon EKS, Amazon ECS
      (including Amazon Web Services Fargate), and Amazon EC2 instances. It uses
      threat intelligence feeds, such as lists of malicious IPs and domains, and
      machine learning to identify unexpected, potentially unauthorized, and
      malicious activity within your Amazon Web Services environment. This can
      include issues like escalations of privileges, uses of exposed
      credentials, or communication with malicious IPs, domains, or presence of
      malware on your Amazon EC2 instances and container workloads. For example,
      GuardDuty can detect compromised EC2 instances and container workloads
      serving malware, or mining bitcoin. </p> <p>GuardDuty also monitors Amazon
      Web Services account access behavior for signs of compromise, such as
      unauthorized infrastructure deployments like EC2 instances deployed in a
      Region that has never been used, or unusual API calls like a password
      policy change to reduce password strength. </p> <p>GuardDuty informs you
      about the status of your Amazon Web Services environment by producing
      security findings that you can view in the GuardDuty console or through
      Amazon EventBridge. For more information, see the <i> <a
      href="https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html">Amazon
      GuardDuty User Guide</a> </i>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/guardduty-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/guardduty-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/guardduty-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:guardduty
  - name: greengrass
    description: >-
      AWS IoT Greengrass seamlessly extends AWS onto physical devices so they
      can act locally on the data they generate, while still using the cloud for
      management, analytics, and durable storage. AWS IoT Greengrass ensures
      your devices can respond quickly to local events and operate with
      intermittent connectivity. AWS IoT Greengrass minimizes the cost of
      transmitting data to the cloud by allowing you to author AWS Lambda
      functions that execute locally.
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/greengrass-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/greengrass-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/greengrass-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:greengrass
  - name: healthlake
    description: >-
      <p>AWS HealthLake is a HIPAA eligibile service that allows customers to
      store, transform, query, and analyze their FHIR-formatted data in a
      consistent fashion in the cloud.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/healthlake-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/healthlake-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/healthlake-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:healthlake
  - name: honeycode
    description: >-
      <p> Amazon Honeycode is a fully managed service that allows you to quickly
      build mobile and web apps for teams—without programming. Build Honeycode
      apps for managing almost anything, like projects, customers, operations,
      approvals, resources, and even your team. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/honeycode-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/honeycode-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/honeycode-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:honeycode
  - name: iam
    description: >-
      <fullname>Identity and Access Management</fullname> <p>Identity and Access
      Management (IAM) is a web service for securely controlling access to
      Amazon Web Services services. With IAM, you can centrally manage users,
      security credentials such as access keys, and permissions that control
      which Amazon Web Services resources users and applications can access. For
      more information about IAM, see <a
      href="http://aws.amazon.com/iam/">Identity and Access Management (IAM)</a>
      and the <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Identity and
      Access Management User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iam-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iam-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iam-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iam
  - name: groundstation
    description: >-
      <p>Welcome to the AWS Ground Station API Reference. AWS Ground Station is
      a fully managed service that enables you to control satellite
      communications, downlink and process satellite data, and scale your
      satellite operations efficiently and cost-effectively without having to
      build or manage your own ground station infrastructure.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/groundstation-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/groundstation-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/groundstation-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:groundstation
  - name: identitystore
    description: >-
      <p>The Identity Store service used by IAM Identity Center provides a
      single place to retrieve all of your identities (users and groups). For
      more information, see the <a
      href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">IAM
      Identity Center User Guide</a>.</p> <p>This reference guide describes the
      identity store operations that you can call programmatically and includes
      detailed information about data types and errors.</p> <note> <p>IAM
      Identity Center uses the <code>sso</code> and <code>identitystore</code>
      API namespaces.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/identitystore-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/identitystore-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/identitystore-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:identitystore
  - name: imagebuilder
    description: >-
      <p>EC2 Image Builder is a fully managed Amazon Web Services service that
      makes it easier to automate the creation, management, and deployment of
      customized, secure, and up-to-date "golden" server images that are
      pre-installed and pre-configured with software and settings to meet
      specific IT standards.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/imagebuilder-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/imagebuilder-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/imagebuilder-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:imagebuilder
  - name: importexport
    description: >-
      <fullname>AWS Import/Export Service</fullname> AWS Import/Export
      accelerates transferring large amounts of data between the AWS cloud and
      portable storage devices that you mail to us. AWS Import/Export transfers
      data directly onto and off of your storage devices using Amazon's
      high-speed internal network and bypassing the Internet. For large data
      sets, AWS Import/Export is often faster than Internet transfer and more
      cost effective than upgrading your connectivity.
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/importexport-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/importexport-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/importexport-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:importexport
  - name: inspector-scan
    description: >-
      <p>Amazon Inspector Scan is a vulnerability discovery service that scans a
      provided Software Bill of Materials (SBOM) for security
      vulnerabilities.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/inspector-scan-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/inspector-scan-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/inspector-scan-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:inspector-scan
  - name: health
    description: >-
      <fullname>Health</fullname> <p>The Health API provides access to the
      Health information that appears in the <a
      href="https://health.aws.amazon.com/health/home">Health Dashboard</a>. You
      can use the API operations to get information about events that might
      affect your Amazon Web Services and resources.</p> <p>You must have a
      Business, Enterprise On-Ramp, or Enterprise Support plan from <a
      href="http://aws.amazon.com/premiumsupport/">Amazon Web Services
      Support</a> to use the Health API. If you call the Health API from an
      Amazon Web Services account that doesn't have a Business, Enterprise
      On-Ramp, or Enterprise Support plan, you receive a
      <code>SubscriptionRequiredException</code> error.</p> <p>For API access,
      you need an access key ID and a secret access key. Use temporary
      credentials instead of long-term access keys when possible. Temporary
      credentials include an access key ID, a secret access key, and a security
      token that indicates when the credentials expire. For more information,
      see <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best
      practices for managing Amazon Web Services access keys</a> in the
      <i>Amazon Web Services General Reference</i>.</p> <p>You can use the
      Health endpoint health.us-east-1.amazonaws.com (HTTPS) to call the Health
      API operations. Health supports a multi-Region application architecture
      and has two regional endpoints in an active-passive configuration. You can
      use the high availability endpoint example to determine which Amazon Web
      Services Region is active, so that you can get the latest information from
      the API. For more information, see <a
      href="https://docs.aws.amazon.com/health/latest/ug/health-api.html">Accessing
      the Health API</a> in the <i>Health User Guide</i>.</p> <p>For
      authentication of requests, Health uses the <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4 Signing Process</a>.</p> <p>If your Amazon Web Services account
      is part of Organizations, you can use the Health organizational view
      feature. This feature provides a centralized view of Health events across
      all accounts in your organization. You can aggregate Health events in real
      time to identify accounts in your organization that are affected by an
      operational event or get notified of security vulnerabilities. Use the
      organizational view API operations to enable this feature and return event
      information. For more information, see <a
      href="https://docs.aws.amazon.com/health/latest/ug/aggregate-events.html">Aggregating
      Health events</a> in the <i>Health User Guide</i>.</p> <note> <p>When you
      use the Health API operations to return Health events, see the following
      recommendations:</p> <ul> <li> <p>Use the <a
      href="https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html#AWSHealth-Type-Event-eventScopeCode">eventScopeCode</a>
      parameter to specify whether to return Health events that are public or
      account-specific.</p> </li> <li> <p>Use pagination to view all events from
      the response. For example, if you call the
      <code>DescribeEventsForOrganization</code> operation to get all events in
      your organization, you might receive several page results. Specify the
      <code>nextToken</code> in the next request to return more results.</p>
      </li> </ul> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/health-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/health-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/health-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:health
  - name: inspector
    description: >-
      <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to
      analyze the behavior of your AWS resources and to identify potential
      security issues. For more information, see <a
      href="https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html">
      Amazon Inspector User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/inspector-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/inspector-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/inspector-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:inspector
  - name: iot
    description: >-
      <fullname>IoT</fullname> <p>IoT provides secure, bi-directional
      communication between Internet-connected devices (such as sensors,
      actuators, embedded devices, or smart appliances) and the Amazon Web
      Services cloud. You can discover your custom IoT-Data endpoint to
      communicate with, configure rules for data processing and integration with
      other services, organize resources associated with each device (Registry),
      configure logging, and create and manage policies and credentials to
      authenticate devices.</p> <p>The service endpoints that expose this API
      are listed in <a
      href="https://docs.aws.amazon.com/general/latest/gr/iot-core.html">Amazon
      Web Services IoT Core Endpoints and Quotas</a>. You must use the endpoint
      for the region that has the resources you want to access.</p> <p>The
      service name used by <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Amazon
      Web Services Signature Version 4</a> to sign the request is:
      <i>execute-api</i>.</p> <p>For more information about how IoT works, see
      the <a
      href="https://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html">Developer
      Guide</a>.</p> <p>For information about how to use the credentials
      provider for IoT, see <a
      href="https://docs.aws.amazon.com/iot/latest/developerguide/authorizing-direct-aws.html">Authorizing
      Direct Calls to Amazon Web Services Services</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot
  - name: iot-jobs-data
    description: >-
      <p>AWS IoT Jobs is a service that allows you to define a set of jobs —
      remote operations that are sent to and executed on one or more devices
      connected to AWS IoT. For example, you can define a job that instructs a
      set of devices to download and install application or firmware updates,
      reboot, rotate certificates, or perform remote troubleshooting
      operations.</p> <p> To create a job, you make a job document which is a
      description of the remote operations to be performed, and you specify a
      list of targets that should perform the operations. The targets can be
      individual things, thing groups or both.</p> <p> AWS IoT Jobs sends a
      message to inform the targets that a job is available. The target starts
      the execution of the job by downloading the job document, performing the
      operations it specifies, and reporting its progress to AWS IoT. The Jobs
      service provides commands to track the progress of a job on a specific
      target and for all the targets of the job</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot-jobs-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot-jobs-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot-jobs-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot-jobs-data
  - name: iot-roborunner
    description: >-
      <p>An example service, deployed with the Octane Service creator, which
      will echo the string</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot-roborunner-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot-roborunner-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot-roborunner-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot-roborunner
  - name: internetmonitor
    description: >-
      <p>Amazon CloudWatch Internet Monitor provides visibility into how
      internet issues impact the performance and availability between your
      applications hosted on Amazon Web Services and your end users. It can
      reduce the time it takes for you to diagnose internet issues from days to
      minutes. Internet Monitor uses the connectivity data that Amazon Web
      Services captures from its global networking footprint to calculate a
      baseline of performance and availability for internet traffic. This is the
      same data that Amazon Web Services uses to monitor internet uptime and
      availability. With those measurements as a baseline, Internet Monitor
      raises awareness for you when there are significant problems for your end
      users in the different geographic locations where your application
      runs.</p> <p>Internet Monitor publishes internet measurements to
      CloudWatch Logs and CloudWatch Metrics, to easily support using CloudWatch
      tools with health information for geographies and networks specific to
      your application. Internet Monitor sends health events to Amazon
      EventBridge so that you can set up notifications. If an issue is caused by
      the Amazon Web Services network, you also automatically receive an Amazon
      Web Services Health Dashboard notification with the steps that Amazon Web
      Services is taking to mitigate the problem.</p> <p>To use Internet
      Monitor, you create a <i>monitor</i> and associate your application's
      resources with it - VPCs, NLBs, CloudFront distributions, or WorkSpaces
      directories - so Internet Monitor can determine where your application's
      internet traffic is. Internet Monitor then provides internet measurements
      from Amazon Web Services that are specific to the locations and ASNs
      (typically, internet service providers or ISPs) that communicate with your
      application.</p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-InternetMonitor.html">Using
      Amazon CloudWatch Internet Monitor</a> in the <i>Amazon CloudWatch User
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/internetmonitor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/internetmonitor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/internetmonitor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:internetmonitor
  - name: iotanalytics
    description: >-
      <p>IoT Analytics allows you to collect large amounts of device data,
      process messages, and store them. You can then query the data and run
      sophisticated analytics on it. IoT Analytics enables advanced data
      exploration through integration with Jupyter Notebooks and data
      visualization through integration with Amazon QuickSight.</p>
      <p>Traditional analytics and business intelligence tools are designed to
      process structured data. IoT data often comes from devices that record
      noisy processes (such as temperature, motion, or sound). As a result the
      data from these devices can have significant gaps, corrupted messages, and
      false readings that must be cleaned up before analysis can occur. Also,
      IoT data is often only meaningful in the context of other data from
      external sources. </p> <p>IoT Analytics automates the steps required to
      analyze data from IoT devices. IoT Analytics filters, transforms, and
      enriches IoT data before storing it in a time-series data store for
      analysis. You can set up the service to collect only the data you need
      from your devices, apply mathematical transforms to process the data, and
      enrich the data with device-specific metadata such as device type and
      location before storing it. Then, you can analyze your data by running
      queries using the built-in SQL query engine, or perform more complex
      analytics and machine learning inference. IoT Analytics includes pre-built
      models for common IoT use cases so you can answer questions like which
      devices are about to fail or which customers are at risk of abandoning
      their wearable devices.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotanalytics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotanalytics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotanalytics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotanalytics
  - name: inspector2
    description: >-
      <p>Amazon Inspector is a vulnerability discovery service that automates
      continuous scanning for security vulnerabilities within your Amazon EC2,
      Amazon ECR, and Amazon Web Services Lambda environments.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/inspector2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/inspector2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/inspector2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:inspector2
  - name: iotdeviceadvisor
    description: >-
      <p>Amazon Web Services IoT Core Device Advisor is a cloud-based, fully
      managed test capability for validating IoT devices during device software
      development. Device Advisor provides pre-built tests that you can use to
      validate IoT devices for reliable and secure connectivity with Amazon Web
      Services IoT Core before deploying devices to production. By using Device
      Advisor, you can confirm that your devices can connect to Amazon Web
      Services IoT Core, follow security best practices and, if applicable,
      receive software updates from IoT Device Management. You can also download
      signed qualification reports to submit to the Amazon Web Services Partner
      Network to get your device qualified for the Amazon Web Services Partner
      Device Catalog without the need to send your device in and wait for it to
      be tested.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotdeviceadvisor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotdeviceadvisor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotdeviceadvisor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotdeviceadvisor
  - name: iot1click-projects
    description: <p>The AWS IoT 1-Click Projects API Reference</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot1click-projects-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot1click-projects-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot1click-projects-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot1click-projects
  - name: iotevents-data
    description: >-
      <p>IoT Events monitors your equipment or device fleets for failures or
      changes in operation, and triggers actions when such events occur. You can
      use IoT Events Data API commands to send inputs to detectors, list
      detectors, and view or update a detector's status.</p> <p> For more
      information, see <a
      href="https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html">What
      is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotevents-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotevents-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotevents-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotevents-data
  - name: iotfleethub
    description: >-
      <p>With Fleet Hub for AWS IoT Device Management you can build stand-alone
      web applications for monitoring the health of your device fleets.</p>
      <note> <p>Fleet Hub for AWS IoT Device Management is in public preview and
      is subject to change.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotfleethub-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotfleethub-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotfleethub-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotfleethub
  - name: iot-data
    description: >-
      <fullname>IoT data</fullname> <p>IoT data enables secure, bi-directional
      communication between Internet-connected things (such as sensors,
      actuators, embedded devices, or smart appliances) and the Amazon Web
      Services cloud. It implements a broker for applications and things to
      publish messages over HTTP (Publish) and retrieve, update, and delete
      shadows. A shadow is a persistent representation of your things and their
      state in the Amazon Web Services cloud.</p> <p>Find the endpoint address
      for actions in IoT data by running this CLI command:</p> <p> <code>aws iot
      describe-endpoint --endpoint-type iot:Data-ATS</code> </p> <p>The service
      name used by <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Amazon
      Web ServicesSignature Version 4</a> to sign requests is:
      <i>iotdevicegateway</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot-data
  - name: iot1click-devices
    description: >-
      <p>Describes all of the AWS IoT 1-Click device-related API operations for
      the service.
       Also provides sample requests, responses, and errors for the supported web services
       protocols.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iot1click-devices-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iot1click-devices-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iot1click-devices-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iot1click-devices
  - name: iotsecuretunneling
    description: >-
      <fullname>IoT Secure Tunneling</fullname> <p>IoT Secure Tunneling creates
      remote connections to devices deployed in the field.</p> <p>For more
      information about how IoT Secure Tunneling works, see <a
      href="https://docs.aws.amazon.com/iot/latest/developerguide/secure-tunneling.html">IoT
      Secure Tunneling</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotsecuretunneling-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotsecuretunneling-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotsecuretunneling-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotsecuretunneling
  - name: iotthingsgraph
    description: >-
      <fullname>AWS IoT Things Graph</fullname> <p>AWS IoT Things Graph provides
      an integrated set of tools that enable developers to connect devices and
      services that use different standards, such as units of measure and
      communication protocols. AWS IoT Things Graph makes it possible to build
      IoT applications with little to no code by connecting devices and services
      and defining how they interact at an abstract level.</p> <p>For more
      information about how AWS IoT Things Graph works, see the <a
      href="https://docs.aws.amazon.com/thingsgraph/latest/ug/iot-tg-whatis.html">User
      Guide</a>.</p> <p>The AWS IoT Things Graph service is discontinued.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotthingsgraph-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotthingsgraph-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotthingsgraph-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotthingsgraph
  - name: iotfleetwise
    description: >-
      <p>Amazon Web Services IoT FleetWise is a fully managed service that you
      can use to collect, model, and transfer vehicle data to the Amazon Web
      Services cloud at scale. With Amazon Web Services IoT FleetWise, you can
      standardize all of your vehicle data models, independent of the in-vehicle
      communication architecture, and define data collection rules to transfer
      only high-value data to the cloud. </p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/">What
      is Amazon Web Services IoT FleetWise?</a> in the <i>Amazon Web Services
      IoT FleetWise Developer Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotfleetwise-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotfleetwise-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotfleetwise-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotfleetwise
  - name: ivs
    description: >-
      <p> <b>Introduction</b> </p> <p>The Amazon Interactive Video Service (IVS)
      API is REST compatible, using a standard HTTP API and an Amazon Web
      Services EventBridge event stream for responses. JSON is used for both
      requests and responses, including errors.</p> <p>The API is an Amazon Web
      Services regional service. For a list of supported regions and Amazon IVS
      HTTPS service endpoints, see the <a
      href="https://docs.aws.amazon.com/general/latest/gr/ivs.html">Amazon IVS
      page</a> in the <i>Amazon Web Services General Reference</i>.</p> <p> <i>
      <b>All API request parameters and URLs are case sensitive. </b> </i> </p>
      <p>For a summary of notable documentation changes in each release, see <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/doc-history.html">
      Document History</a>.</p> <p> <b>Allowed Header Values</b> </p> <ul> <li>
      <p> <code> <b>Accept:</b> </code> application/json</p> </li> <li> <p>
      <code> <b>Accept-Encoding:</b> </code> gzip, deflate</p> </li> <li> <p>
      <code> <b>Content-Type:</b> </code>application/json</p> </li> </ul> <p>
      <b>Resources</b> </p> <p>The following resources contain information about
      your IVS live stream (see <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/getting-started.html">
      Getting Started with Amazon IVS</a>):</p> <ul> <li> <p> <b>Channel</b> —
      Stores configuration data related to your live stream. You first create a
      channel and then use the channel’s stream key to start your live stream.
      See the Channel endpoints for more information. </p> </li> <li> <p>
      <b>Stream key</b> — An identifier assigned by Amazon IVS when you create a
      channel, which is then used to authorize streaming. See the StreamKey
      endpoints for more information. <i> <b>Treat the stream key like a secret,
      since it allows anyone to stream to the channel.</b> </i> </p> </li> <li>
      <p> <b>Playback key pair</b> — Video playback may be restricted using
      playback-authorization tokens, which use public-key encryption. A playback
      key pair is the public-private pair of keys used to sign and validate the
      playback-authorization token. See the PlaybackKeyPair endpoints for more
      information.</p> </li> <li> <p> <b>Recording configuration</b> — Stores
      configuration related to recording a live stream and where to store the
      recorded content. Multiple channels can reference the same recording
      configuration. See the Recording Configuration endpoints for more
      information.</p> </li> <li> <p> <b>Playback restriction policy</b> —
      Restricts playback by countries and/or origin sites. See the Playback
      Restriction Policy endpoints for more information.</p> </li> </ul> <p>
      <b>Tagging</b> </p> <p>A <i>tag</i> is a metadata label that you assign to
      an Amazon Web Services resource. A tag comprises a <i>key</i> and a
      <i>value</i>, both set by you. For example, you might set a tag as
      <code>topic:nature</code> to label a particular video category. See <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
      Amazon Web Services Resources</a> for more information, including
      restrictions that apply to tags and "Tag naming limits and requirements";
      Amazon IVS has no service-specific constraints beyond what is documented
      there.</p> <p>Tags can help you identify and organize your Amazon Web
      Services resources. For example, you can use the same tag for different
      resources to indicate that they are related. You can also use tags to
      manage access (see <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">
      Access Tags</a>). </p> <p>The Amazon IVS API has these tag-related
      endpoints: <a>TagResource</a>, <a>UntagResource</a>, and
      <a>ListTagsForResource</a>. The following resources support tagging:
      Channels, Stream Keys, Playback Key Pairs, and Recording
      Configurations.</p> <p>At most 50 tags can be applied to a resource. </p>
      <p> <b>Authentication versus Authorization</b> </p> <p>Note the
      differences between these concepts:</p> <ul> <li> <p>
      <i>Authentication</i> is about verifying identity. You need to be
      authenticated to sign Amazon IVS API requests.</p> </li> <li> <p>
      <i>Authorization</i> is about granting permissions. Your IAM roles need to
      have permissions for Amazon IVS API requests. In addition, authorization
      is needed to view <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Amazon
      IVS private channels</a>. (Private channels are channels that are enabled
      for "playback authorization.")</p> </li> </ul> <p> <b>Authentication</b>
      </p> <p>All Amazon IVS API requests must be authenticated with a
      signature. The Amazon Web Services Command-Line Interface (CLI) and Amazon
      IVS Player SDKs take care of signing the underlying API calls for you.
      However, if your application calls the Amazon IVS API directly, it’s your
      responsibility to sign the requests.</p> <p>You generate a signature using
      valid Amazon Web Services credentials that have permission to perform the
      requested action. For example, you must sign PutMetadata requests with a
      signature generated from a user account that has the
      <code>ivs:PutMetadata</code> permission.</p> <p>For more information:</p>
      <ul> <li> <p>Authentication and generating signatures — See <a
      href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
      Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon
      Web Services General Reference</i>.</p> </li> <li> <p>Managing Amazon IVS
      permissions — See <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html">Identity
      and Access Management</a> on the Security page of the <i>Amazon IVS User
      Guide</i>.</p> </li> </ul> <p> <b>Amazon Resource Names (ARNs)</b> </p>
      <p>ARNs uniquely identify AWS resources. An ARN is required when you need
      to specify a resource unambiguously across all of AWS, such as in IAM
      policies and API calls. For more information, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
      Resource Names</a> in the <i>AWS General Reference</i>.</p> <p> <b>Channel
      Endpoints</b> </p> <ul> <li> <p> <a>CreateChannel</a> — Creates a new
      channel and an associated stream key to start streaming.</p> </li> <li>
      <p> <a>GetChannel</a> — Gets the channel configuration for the specified
      channel ARN.</p> </li> <li> <p> <a>BatchGetChannel</a> — Performs
      <a>GetChannel</a> on multiple ARNs simultaneously.</p> </li> <li> <p>
      <a>ListChannels</a> — Gets summary information about all channels in your
      account, in the Amazon Web Services region where the API request is
      processed. This list can be filtered to match a specified name or
      recording-configuration ARN. Filters are mutually exclusive and cannot be
      used together. If you try to use both filters, you will get an error (409
      Conflict Exception).</p> </li> <li> <p> <a>UpdateChannel</a> — Updates a
      channel's configuration. This does not affect an ongoing stream of this
      channel. You must stop and restart the stream for the changes to take
      effect.</p> </li> <li> <p> <a>DeleteChannel</a> — Deletes the specified
      channel.</p> </li> </ul> <p> <b>Playback Restriction Policy Endpoints</b>
      </p> <ul> <li> <p> <a>CreatePlaybackRestrictionPolicy</a> — Creates a new
      playback restriction policy, for constraining playback by countries and/or
      origins.</p> </li> <li> <p> <a>DeletePlaybackRestrictionPolicy</a> —
      Deletes the specified playback restriction policy</p> </li> <li> <p>
      <a>GetPlaybackRestrictionPolicy</a> — Gets the specified playback
      restriction policy.</p> </li> <li> <p>
      <a>ListPlaybackRestrictionPolicies</a> — Gets summary information about
      playback restriction policies.</p> </li> <li> <p>
      <a>UpdatePlaybackRestrictionPolicy</a> — Updates a specified playback
      restriction policy.</p> </li> </ul> <p> <b>Private Channel Endpoints</b>
      </p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting
      Up Private Channels</a> in the <i>Amazon IVS User Guide</i>.</p> <ul> <li>
      <p> <a>ImportPlaybackKeyPair</a> — Imports the public portion of a new key
      pair and returns its <code>arn</code> and <code>fingerprint</code>. The
      <code>privateKey</code> can then be used to generate viewer authorization
      tokens, to grant viewers access to private channels (channels enabled for
      playback authorization).</p> </li> <li> <p> <a>GetPlaybackKeyPair</a> —
      Gets a specified playback authorization key pair and returns the
      <code>arn</code> and <code>fingerprint</code>. The <code>privateKey</code>
      held by the caller can be used to generate viewer authorization tokens, to
      grant viewers access to private channels.</p> </li> <li> <p>
      <a>ListPlaybackKeyPairs</a> — Gets summary information about playback key
      pairs.</p> </li> <li> <p> <a>DeletePlaybackKeyPair</a> — Deletes a
      specified authorization key pair. This invalidates future viewer tokens
      generated using the key pair’s <code>privateKey</code>.</p> </li> <li> <p>
      <a>StartViewerSessionRevocation</a> — Starts the process of revoking the
      viewer session associated with a specified channel ARN and viewer ID.
      Optionally, you can provide a version to revoke viewer sessions less than
      and including that version.</p> </li> <li> <p>
      <a>BatchStartViewerSessionRevocation</a> — Performs
      <a>StartViewerSessionRevocation</a> on multiple channel ARN and viewer ID
      pairs simultaneously.</p> </li> </ul> <p> <b>RecordingConfiguration
      Endpoints</b> </p> <ul> <li> <p> <a>CreateRecordingConfiguration</a> —
      Creates a new recording configuration, used to enable recording to Amazon
      S3.</p> </li> <li> <p> <a>GetRecordingConfiguration</a> — Gets the
      recording-configuration metadata for the specified ARN.</p> </li> <li> <p>
      <a>ListRecordingConfigurations</a> — Gets summary information about all
      recording configurations in your account, in the Amazon Web Services
      region where the API request is processed.</p> </li> <li> <p>
      <a>DeleteRecordingConfiguration</a> — Deletes the recording configuration
      for the specified ARN.</p> </li> </ul> <p> <b>Stream Endpoints</b> </p>
      <ul> <li> <p> <a>GetStream</a> — Gets information about the active (live)
      stream on a specified channel.</p> </li> <li> <p> <a>GetStreamSession</a>
      — Gets metadata on a specified stream.</p> </li> <li> <p>
      <a>ListStreams</a> — Gets summary information about live streams in your
      account, in the Amazon Web Services region where the API request is
      processed.</p> </li> <li> <p> <a>ListStreamSessions</a> — Gets a summary
      of current and previous streams for a specified channel in your account,
      in the AWS region where the API request is processed.</p> </li> <li> <p>
      <a>StopStream</a> — Disconnects the incoming RTMPS stream for the
      specified channel. Can be used in conjunction with <a>DeleteStreamKey</a>
      to prevent further streaming to a channel.</p> </li> <li> <p>
      <a>PutMetadata</a> — Inserts metadata into the active stream of the
      specified channel. At most 5 requests per second per channel are allowed,
      each with a maximum 1 KB payload. (If 5 TPS is not sufficient for your
      needs, we recommend batching your data into a single PutMetadata call.) At
      most 155 requests per second per account are allowed.</p> </li> </ul> <p>
      <b>StreamKey Endpoints</b> </p> <ul> <li> <p> <a>CreateStreamKey</a> —
      Creates a stream key, used to initiate a stream, for the specified channel
      ARN.</p> </li> <li> <p> <a>GetStreamKey</a> — Gets stream key information
      for the specified ARN.</p> </li> <li> <p> <a>BatchGetStreamKey</a> —
      Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.</p> </li>
      <li> <p> <a>ListStreamKeys</a> — Gets summary information about stream
      keys for the specified channel.</p> </li> <li> <p> <a>DeleteStreamKey</a>
      — Deletes the stream key for the specified ARN, so it can no longer be
      used to stream.</p> </li> </ul> <p> <b>Amazon Web Services Tags
      Endpoints</b> </p> <ul> <li> <p> <a>TagResource</a> — Adds or updates tags
      for the Amazon Web Services resource with the specified ARN.</p> </li>
      <li> <p> <a>UntagResource</a> — Removes tags from the resource with the
      specified ARN.</p> </li> <li> <p> <a>ListTagsForResource</a> — Gets
      information about Amazon Web Services tags for the specified ARN.</p>
      </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ivs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ivs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ivs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ivs
  - name: iotevents
    description: >-
      <p>AWS IoT Events monitors your equipment or device fleets for failures or
      changes in operation, and triggers actions when such events occur. You can
      use AWS IoT Events API operations to create, read, update, and delete
      inputs and detector models, and to list their versions.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotevents-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotevents-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotevents-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotevents
  - name: iotsitewise
    description: >-
      <p>Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon
      Web Services service that connects <a
      href="https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications">Industrial
      Internet of Things (IIoT)</a> devices to the power of the Amazon Web
      Services Cloud. For more information, see the <a
      href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/">IoT
      SiteWise User Guide</a>. For information about IoT SiteWise quotas, see <a
      href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html">Quotas</a>
      in the <i>IoT SiteWise User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotsitewise-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotsitewise-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotsitewise-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotsitewise
  - name: iottwinmaker
    description: >-
      <p>IoT TwinMaker is a service with which you can build operational digital
      twins of physical systems. IoT TwinMaker overlays measurements and
      analysis from real-world sensors, cameras, and enterprise applications so
      you can create data visualizations to monitor your physical factory,
      building, or industrial plant. You can use this real-world data to monitor
      operations and diagnose and repair errors.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iottwinmaker-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iottwinmaker-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iottwinmaker-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iottwinmaker
  - name: kafkaconnect
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kafkaconnect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kafkaconnect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kafkaconnect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kafkaconnect
  - name: ivs-realtime
    description: >-
      <p> <b>Introduction</b> </p> <p>The Amazon Interactive Video Service (IVS)
      real-time API is REST compatible, using a standard HTTP API and an AWS
      EventBridge event stream for responses. JSON is used for both requests and
      responses, including errors. </p> <p>Terminology:</p> <ul> <li> <p>A
      <i>stage</i> is a virtual space where participants can exchange video in
      real time.</p> </li> <li> <p>A <i>participant token</i> is a token that
      authenticates a participant when they join a stage.</p> </li> <li> <p>A
      <i>participant object</i> represents participants (people) in the stage
      and contains information about them. When a token is created, it includes
      a participant ID; when a participant uses that token to join a stage, the
      participant is associated with that participant ID. There is a 1:1 mapping
      between participant tokens and participants.</p> </li> <li> <p>Server-side
      composition: The <i>composition</i> process composites participants of a
      stage into a single video and forwards it to a set of outputs (e.g., IVS
      channels). Composition endpoints support this process.</p> </li> <li>
      <p>Server-side composition: A <i>composition</i> controls the look of the
      outputs, including how participants are positioned in the video.</p> </li>
      </ul> <p> <b>Resources</b> </p> <p>The following resources contain
      information about your IVS live stream (see <a
      href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started.html">Getting
      Started with Amazon IVS Real-Time Streaming</a>):</p> <ul> <li> <p>
      <b>Stage</b> — A stage is a virtual space where participants can exchange
      video in real time.</p> </li> </ul> <p> <b>Tagging</b> </p> <p>A
      <i>tag</i> is a metadata label that you assign to an AWS resource. A tag
      comprises a <i>key</i> and a <i>value</i>, both set by you. For example,
      you might set a tag as <code>topic:nature</code> to label a particular
      video category. See <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
      AWS Resources</a> for more information, including restrictions that apply
      to tags and "Tag naming limits and requirements"; Amazon IVS stages has no
      service-specific constraints beyond what is documented there.</p> <p>Tags
      can help you identify and organize your AWS resources. For example, you
      can use the same tag for different resources to indicate that they are
      related. You can also use tags to manage access (see <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Access
      Tags</a>).</p> <p>The Amazon IVS real-time API has these tag-related
      endpoints: <a>TagResource</a>, <a>UntagResource</a>, and
      <a>ListTagsForResource</a>. The following resource supports tagging:
      Stage.</p> <p>At most 50 tags can be applied to a resource.</p> <p>
      <b>Stages Endpoints</b> </p> <ul> <li> <p> <a>CreateParticipantToken</a> —
      Creates an additional token for a specified stage. This can be done after
      stage creation or when tokens expire.</p> </li> <li> <p>
      <a>CreateStage</a> — Creates a new stage (and optionally participant
      tokens).</p> </li> <li> <p> <a>DeleteStage</a> — Shuts down and deletes
      the specified stage (disconnecting all participants).</p> </li> <li> <p>
      <a>DisconnectParticipant</a> — Disconnects a specified participant and
      revokes the participant permanently from a specified stage.</p> </li> <li>
      <p> <a>GetParticipant</a> — Gets information about the specified
      participant token.</p> </li> <li> <p> <a>GetStage</a> — Gets information
      for the specified stage.</p> </li> <li> <p> <a>GetStageSession</a> — Gets
      information for the specified stage session.</p> </li> <li> <p>
      <a>ListParticipantEvents</a> — Lists events for a specified participant
      that occurred during a specified stage session.</p> </li> <li> <p>
      <a>ListParticipants</a> — Lists all participants in a specified stage
      session.</p> </li> <li> <p> <a>ListStages</a> — Gets summary information
      about all stages in your account, in the AWS region where the API request
      is processed.</p> </li> <li> <p> <a>ListStageSessions</a> — Gets all
      sessions for a specified stage.</p> </li> <li> <p> <a>UpdateStage</a> —
      Updates a stage’s configuration.</p> </li> </ul> <p> <b>Composition
      Endpoints</b> </p> <ul> <li> <p> <a>GetComposition</a> — Gets information
      about the specified Composition resource.</p> </li> <li> <p>
      <a>ListCompositions</a> — Gets summary information about all Compositions
      in your account, in the AWS region where the API request is processed.</p>
      </li> <li> <p> <a>StartComposition</a> — Starts a Composition from a stage
      based on the configuration provided in the request.</p> </li> <li> <p>
      <a>StopComposition</a> — Stops and deletes a Composition resource. Any
      broadcast from the Composition resource is stopped.</p> </li> </ul> <p>
      <b>EncoderConfiguration Endpoints</b> </p> <ul> <li> <p>
      <a>CreateEncoderConfiguration</a> — Creates an EncoderConfiguration
      object.</p> </li> <li> <p> <a>DeleteEncoderConfiguration</a> — Deletes an
      EncoderConfiguration resource. Ensures that no Compositions are using this
      template; otherwise, returns an error.</p> </li> <li> <p>
      <a>GetEncoderConfiguration</a> — Gets information about the specified
      EncoderConfiguration resource.</p> </li> <li> <p>
      <a>ListEncoderConfigurations</a> — Gets summary information about all
      EncoderConfigurations in your account, in the AWS region where the API
      request is processed.</p> </li> </ul> <p> <b>StorageConfiguration
      Endpoints</b> </p> <ul> <li> <p> <a>CreateStorageConfiguration</a> —
      Creates a new storage configuration, used to enable recording to Amazon
      S3.</p> </li> <li> <p> <a>DeleteStorageConfiguration</a> — Deletes the
      storage configuration for the specified ARN.</p> </li> <li> <p>
      <a>GetStorageConfiguration</a> — Gets the storage configuration for the
      specified ARN.</p> </li> <li> <p> <a>ListStorageConfigurations</a> — Gets
      summary information about all storage configurations in your account, in
      the AWS region where the API request is processed.</p> </li> </ul> <p>
      <b>Tags Endpoints</b> </p> <ul> <li> <p> <a>ListTagsForResource</a> — Gets
      information about AWS tags for the specified ARN.</p> </li> <li> <p>
      <a>TagResource</a> — Adds or updates tags for the AWS resource with the
      specified ARN.</p> </li> <li> <p> <a>UntagResource</a> — Removes tags from
      the resource with the specified ARN.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ivs-realtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ivs-realtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ivs-realtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ivs-realtime
  - name: ivschat
    description: >-
      <p> <b>Introduction</b> </p> <p>The Amazon IVS Chat control-plane API
      enables you to create and manage Amazon IVS Chat resources. You also need
      to integrate with the <a
      href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html">
      Amazon IVS Chat Messaging API</a>, to enable users to interact with chat
      rooms in real time.</p> <p>The API is an AWS regional service. For a list
      of supported regions and Amazon IVS Chat HTTPS service endpoints, see the
      Amazon IVS Chat information on the <a
      href="https://docs.aws.amazon.com/general/latest/gr/ivs.html">Amazon IVS
      page</a> in the <i>AWS General Reference</i>. </p> <p> <b>Notes on
      terminology:</b> </p> <ul> <li> <p>You create service applications using
      the Amazon IVS Chat API. We refer to these as <i>applications</i>.</p>
      </li> <li> <p>You create front-end client applications (browser and
      Android/iOS apps) using the Amazon IVS Chat Messaging API. We refer to
      these as <i>clients</i>. </p> </li> </ul> <p> <b>Resources</b> </p> <p>The
      following resources are part of Amazon IVS Chat:</p> <ul> <li> <p>
      <b>LoggingConfiguration</b> — A configuration that allows customers to
      store and record sent messages in a chat room. See the Logging
      Configuration endpoints for more information.</p> </li> <li> <p>
      <b>Room</b> — The central Amazon IVS Chat resource through which clients
      connect to and exchange chat messages. See the Room endpoints for more
      information.</p> </li> </ul> <p> <b>Tagging</b> </p> <p>A <i>tag</i> is a
      metadata label that you assign to an AWS resource. A tag comprises a
      <i>key</i> and a <i>value</i>, both set by you. For example, you might set
      a tag as <code>topic:nature</code> to label a particular video category.
      See <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
      AWS Resources</a> for more information, including restrictions that apply
      to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no
      service-specific constraints beyond what is documented there.</p> <p>Tags
      can help you identify and organize your AWS resources. For example, you
      can use the same tag for different resources to indicate that they are
      related. You can also use tags to manage access (see <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Access
      Tags</a>).</p> <p>The Amazon IVS Chat API has these tag-related endpoints:
      <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a>.
      The following resource supports tagging: Room.</p> <p>At most 50 tags can
      be applied to a resource.</p> <p> <b>API Access Security</b> </p> <p>Your
      Amazon IVS Chat applications (service applications and clients) must be
      authenticated and authorized to access Amazon IVS Chat resources. Note the
      differences between these concepts:</p> <ul> <li> <p>
      <i>Authentication</i> is about verifying identity. Requests to the Amazon
      IVS Chat API must be signed to verify your identity.</p> </li> <li> <p>
      <i>Authorization</i> is about granting permissions. Your IAM roles need to
      have permissions for Amazon IVS Chat API requests.</p> </li> </ul>
      <p>Users (viewers) connect to a room using secure access tokens that you
      create using the <a>CreateChatToken</a> endpoint through the AWS SDK. You
      call CreateChatToken for every user’s chat session, passing identity and
      authorization information about the user.</p> <p> <b>Signing API
      Requests</b> </p> <p>HTTP API requests must be signed with an AWS SigV4
      signature using your AWS security credentials. The AWS Command Line
      Interface (CLI) and the AWS SDKs take care of signing the underlying API
      calls for you. However, if your application calls the Amazon IVS Chat HTTP
      API directly, it’s your responsibility to sign the requests.</p> <p>You
      generate a signature using valid AWS credentials for an IAM role that has
      permission to perform the requested action. For example, DeleteMessage
      requests must be made using an IAM role that has the
      <code>ivschat:DeleteMessage</code> permission.</p> <p>For more
      information:</p> <ul> <li> <p>Authentication and generating signatures —
      See <a
      href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
      Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon
      Web Services General Reference</i>.</p> </li> <li> <p>Managing Amazon IVS
      permissions — See <a
      href="https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html">Identity
      and Access Management</a> on the Security page of the <i>Amazon IVS User
      Guide</i>.</p> </li> </ul> <p> <b>Amazon Resource Names (ARNs)</b> </p>
      <p>ARNs uniquely identify AWS resources. An ARN is required when you need
      to specify a resource unambiguously across all of AWS, such as in IAM
      policies and API calls. For more information, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
      Resource Names</a> in the <i>AWS General Reference</i>.</p> <p>
      <b>Messaging Endpoints</b> </p> <ul> <li> <p> <a>DeleteMessage</a> — Sends
      an event to a specific room which directs clients to delete a specific
      message; that is, unrender it from view and delete it from the client’s
      chat history. This event’s <code>EventName</code> is
      <code>aws:DELETE_MESSAGE</code>. This replicates the <a
      href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-deletemessage-publish.html">
      DeleteMessage</a> WebSocket operation in the Amazon IVS Chat Messaging
      API.</p> </li> <li> <p> <a>DisconnectUser</a> — Disconnects all
      connections using a specified user ID from a room. This replicates the <a
      href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-disconnectuser-publish.html">
      DisconnectUser</a> WebSocket operation in the Amazon IVS Chat Messaging
      API.</p> </li> <li> <p> <a>SendEvent</a> — Sends an event to a room. Use
      this within your application’s business logic to send events to clients of
      a room; e.g., to notify clients to change the way the chat UI is
      rendered.</p> </li> </ul> <p> <b>Chat Token Endpoint</b> </p> <ul> <li>
      <p> <a>CreateChatToken</a> — Creates an encrypted token that is used by a
      chat participant to establish an individual WebSocket chat connection to a
      room. When the token is used to connect to chat, the connection is valid
      for the session duration specified in the request. The token becomes
      invalid at the token-expiration timestamp included in the response.</p>
      </li> </ul> <p> <b>Room Endpoints</b> </p> <ul> <li> <p> <a>CreateRoom</a>
      — Creates a room that allows clients to connect and pass messages.</p>
      </li> <li> <p> <a>DeleteRoom</a> — Deletes the specified room.</p> </li>
      <li> <p> <a>GetRoom</a> — Gets the specified room.</p> </li> <li> <p>
      <a>ListRooms</a> — Gets summary information about all your rooms in the
      AWS region where the API request is processed. </p> </li> <li> <p>
      <a>UpdateRoom</a> — Updates a room’s configuration.</p> </li> </ul> <p>
      <b>Logging Configuration Endpoints</b> </p> <ul> <li> <p>
      <a>CreateLoggingConfiguration</a> — Creates a logging configuration that
      allows clients to store and record sent messages.</p> </li> <li> <p>
      <a>DeleteLoggingConfiguration</a> — Deletes the specified logging
      configuration.</p> </li> <li> <p> <a>GetLoggingConfiguration</a> — Gets
      the specified logging configuration.</p> </li> <li> <p>
      <a>ListLoggingConfigurations</a> — Gets summary information about all your
      logging configurations in the AWS region where the API request is
      processed.</p> </li> <li> <p> <a>UpdateLoggingConfiguration</a> — Updates
      a specified logging configuration.</p> </li> </ul> <p> <b>Tags
      Endpoints</b> </p> <ul> <li> <p> <a>ListTagsForResource</a> — Gets
      information about AWS tags for the specified ARN.</p> </li> <li> <p>
      <a>TagResource</a> — Adds or updates tags for the AWS resource with the
      specified ARN.</p> </li> <li> <p> <a>UntagResource</a> — Removes tags from
      the resource with the specified ARN.</p> </li> </ul> <p>All the above are
      HTTP operations. There is a separate <i>messaging</i> API for managing
      Chat resources; see the <a
      href="https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html">
      Amazon IVS Chat Messaging API Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ivschat-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ivschat-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ivschat-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ivschat
  - name: kafka
    description: <p>The operations for managing an Amazon MSK cluster.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kafka-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kafka-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kafka-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kafka
  - name: kendra
    description: <p>Amazon Kendra is a service for indexing large document sets.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kendra-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kendra-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kendra-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kendra
  - name: keyspaces
    description: >-
      <p>Amazon Keyspaces (for Apache Cassandra) is a scalable, highly
      available, and managed Apache Cassandra-compatible database service.
      Amazon Keyspaces makes it easy to migrate, run, and scale Cassandra
      workloads in the Amazon Web Services Cloud. With just a few clicks on the
      Amazon Web Services Management Console or a few lines of code, you can
      create keyspaces and tables in Amazon Keyspaces, without deploying any
      infrastructure or installing software. </p> <p>In addition to supporting
      Cassandra Query Language (CQL) requests via open-source Cassandra drivers,
      Amazon Keyspaces supports data definition language (DDL) operations to
      manage keyspaces and tables using the Amazon Web Services SDK and CLI, as
      well as infrastructure as code (IaC) services and tools such as
      CloudFormation and Terraform. This API reference describes the supported
      DDL operations in detail.</p> <p>For the list of all supported CQL APIs,
      see <a
      href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cassandra-apis.html">Supported
      Cassandra APIs, operations, and data types in Amazon Keyspaces</a> in the
      <i>Amazon Keyspaces Developer Guide</i>.</p> <p>To learn how Amazon
      Keyspaces API actions are recorded with CloudTrail, see <a
      href="https://docs.aws.amazon.com/keyspaces/latest/devguide/logging-using-cloudtrail.html#service-name-info-in-cloudtrail">Amazon
      Keyspaces information in CloudTrail</a> in the <i>Amazon Keyspaces
      Developer Guide</i>.</p> <p>For more information about Amazon Web Services
      APIs, for example how to implement retry logic or how to sign Amazon Web
      Services API requests, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-apis.html">Amazon
      Web Services APIs</a> in the <i>General Reference</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/keyspaces-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/keyspaces-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/keyspaces-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:keyspaces
  - name: iotwireless
    description: >-
      <p>AWS IoT Wireless provides bi-directional communication between
      internet-connected wireless devices and the AWS Cloud. To onboard both
      LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These
      wireless devices use the Low Power Wide Area Networking (LPWAN)
      communication protocol to communicate with AWS IoT.</p> <p>Using the API,
      you can perform create, read, update, and delete operations for your
      wireless devices, gateways, destinations, and profiles. After onboarding
      your devices, you can use the API operations to set log levels and monitor
      your devices with CloudWatch.</p> <p>You can also use the API operations
      to create multicast groups and schedule a multicast session for sending a
      downlink message to devices in the group. By using Firmware Updates
      Over-The-Air (FUOTA) API operations, you can create a FUOTA task and
      schedule a session to update the firmware of individual devices or an
      entire group of devices in a multicast group.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/iotwireless-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/iotwireless-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/iotwireless-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:iotwireless
  - name: kinesis-video-media
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesis-video-media-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesis-video-media-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesis-video-media-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesis-video-media
  - name: kendra-ranking
    description: >-
      <p>Amazon Kendra Intelligent Ranking uses Amazon Kendra semantic search
      capabilities to intelligently re-rank a search service's results.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kendra-ranking-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kendra-ranking-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kendra-ranking-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kendra-ranking
  - name: kinesis-video-archived-media
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesis-video-archived-media-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesis-video-archived-media-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/kinesis-video-archived-media-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesis-video-archived-media
  - name: kinesisvideo
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesisvideo-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesisvideo-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesisvideo-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesisvideo
  - name: kinesisanalyticsv2
    description: >-
      <p>Amazon Kinesis Data Analytics is a fully managed service that you can
      use to process and analyze streaming data using Java, SQL, or Scala. The
      service enables you to quickly author and run Java, SQL, or Scala code
      against streaming sources to perform time series analytics, feed real-time
      dashboards, and create real-time metrics.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesisanalyticsv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesisanalyticsv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesisanalyticsv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesisanalyticsv2
  - name: kinesisanalytics
    description: >-
      <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p>
      <note> <p>This documentation is for version 1 of the Amazon Kinesis Data
      Analytics API, which only supports SQL applications. Version 2 of the API
      supports SQL and Java applications. For more information about version 2,
      see <a href="/kinesisanalytics/latest/apiv2/Welcome.html">Amazon Kinesis
      Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the
      <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis
      Analytics Developer Guide provides additional information. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesisanalytics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesisanalytics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesisanalytics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesisanalytics
  - name: kinesis-video-signaling
    description: >-
      <p>Kinesis Video Streams Signaling Service is a intermediate service that
      establishes a communication channel for discovering peers, transmitting
      offers and answers in order to establish peer-to-peer connection in webRTC
      technology.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesis-video-signaling-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesis-video-signaling-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesis-video-signaling-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesis-video-signaling
  - name: lambda
    description: >-
      <fullname>AWS Lambda</fullname> <p><b>Overview</b></p> <p>This is the AWS
      Lambda API Reference. The AWS Lambda Developer Guide provides additional
      information. For the service overview, go to <a
      href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is
      AWS Lambda</a>, and for information about how the service works, go to <a
      href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS
      LambdaL How it Works</a> in the AWS Lambda Developer Guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lambda-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lambda-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lambda-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lambda
  - name: kinesis
    description: >-
      <fullname>Amazon Kinesis Data Streams Service API Reference</fullname>
      <p>Amazon Kinesis Data Streams is a managed service that scales
      elastically for real-time processing of streaming big data.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesis-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesis-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kinesis-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesis
  - name: kms
    description: >-
      <fullname>Key Management Service</fullname> <p>Key Management Service
      (KMS) is an encryption and key management web service. This guide
      describes the KMS operations that you can call programmatically. For
      general information about KMS, see the <a
      href="https://docs.aws.amazon.com/kms/latest/developerguide/"> <i>Key
      Management Service Developer Guide</i> </a>.</p> <note> <p>KMS has
      replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
      <i>KMS key</i>. The concept has not changed. To prevent breaking changes,
      KMS is keeping some variations of this term.</p> <p>Amazon Web Services
      provides SDKs that consist of libraries and sample code for various
      programming languages and platforms (Java, Ruby, .Net, macOS, Android,
      etc.). The SDKs provide a convenient way to create programmatic access to
      KMS and other Amazon Web Services services. For example, the SDKs take
      care of tasks such as signing requests (see below), managing errors, and
      retrying requests automatically. For more information about the Amazon Web
      Services SDKs, including how to download and install them, see <a
      href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
      </note> <p>We recommend that you use the Amazon Web Services SDKs to make
      programmatic API calls to KMS.</p> <p>If you need to use FIPS 140-2
      validated cryptographic modules when communicating with Amazon Web
      Services, use the FIPS endpoint in your preferred Amazon Web Services
      Region. For more information about the available FIPS endpoints, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region">Service
      endpoints</a> in the Key Management Service topic of the <i>Amazon Web
      Services General Reference</i>.</p> <p>All KMS API calls must be signed
      and be transmitted using Transport Layer Security (TLS). KMS recommends
      you always use the latest supported TLS version. Clients must also support
      cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral
      Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE).
      Most modern systems such as Java 7 and later support these modes.</p> <p>
      <b>Signing Requests</b> </p> <p>Requests must be signed using an access
      key ID and a secret access key. We strongly recommend that you do not use
      your Amazon Web Services account root access key ID and secret access key
      for everyday work. You can use the access key ID and secret access key for
      an IAM user or you can use the Security Token Service (STS) to generate
      temporary security credentials and use those to sign requests. </p> <p>All
      KMS requests must be signed with <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4</a>.</p> <p> <b>Logging API Requests</b> </p> <p>KMS supports
      CloudTrail, a service that logs Amazon Web Services API calls and related
      events for your Amazon Web Services account and delivers them to an Amazon
      S3 bucket that you specify. By using the information collected by
      CloudTrail, you can determine what requests were made to KMS, who made the
      request, when it was made, and so on. To learn more about CloudTrail,
      including how to turn it on and find your log files, see the <a
      href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/">CloudTrail
      User Guide</a>.</p> <p> <b>Additional Resources</b> </p> <p>For more
      information about credentials and request signing, see the following:</p>
      <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">Amazon
      Web Services Security Credentials</a> - This topic provides general
      information about the types of credentials used to access Amazon Web
      Services.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
      Security Credentials</a> - This section of the <i>IAM User Guide</i>
      describes how to create and use temporary security credentials.</p> </li>
      <li> <p> <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4 Signing Process</a> - This set of topics walks you through the
      process of signing a request using an access key ID and a secret access
      key.</p> </li> </ul> <p> <b>Commonly Used API Operations</b> </p> <p>Of
      the API operations discussed in this guide, the following will prove the
      most useful for most applications. You will likely perform operations
      other than these, such as creating keys and assigning policies, by using
      the console.</p> <ul> <li> <p> <a>Encrypt</a> </p> </li> <li> <p>
      <a>Decrypt</a> </p> </li> <li> <p> <a>GenerateDataKey</a> </p> </li> <li>
      <p> <a>GenerateDataKeyWithoutPlaintext</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kms-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kms-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/kms-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kms
  - name: launch-wizard
    description: >-
      <p>Launch Wizard offers a guided way of sizing, configuring, and deploying
      Amazon Web Services resources for third party applications, such as
      Microsoft SQL Server Always On and HANA based SAP systems, without the
      need to manually identify and provision individual Amazon Web Services
      resources.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/launch-wizard-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/launch-wizard-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/launch-wizard-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:launch-wizard
  - name: lex-models
    description: >-
      <fullname>Amazon Lex Build-Time Actions</fullname> <p> Amazon Lex is an
      AWS service for building conversational voice and text interfaces. Use
      these actions to create, update, and delete conversational bots for new
      and existing client applications. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lex-models-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lex-models-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lex-models-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lex-models
  - name: license-manager
    description: >-
      <p>License Manager makes it easier to manage licenses from software
      vendors across multiple Amazon Web Services accounts and on-premises
      servers.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/license-manager-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/license-manager-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/license-manager-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:license-manager
  - name: license-manager-user-subscriptions
    description: >-
      <p>With License Manager, you can create user-based subscriptions to
      utilize licensed software with a per user subscription fee on Amazon EC2
      instances.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/license-manager-user-subscriptions-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/license-manager-user-subscriptions-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/license-manager-user-subscriptions-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:license-manager-user-subscriptions
  - name: lightsail
    description: >-
      <p>Amazon Lightsail is the easiest way to get started with Amazon Web
      Services (Amazon Web Services) for developers who need to build websites
      or web applications. It includes everything you need to launch your
      project quickly - instances (virtual private servers), container services,
      storage buckets, managed databases, SSD-based block storage, static IP
      addresses, load balancers, content delivery network (CDN) distributions,
      DNS management of registered domains, and resource snapshots (backups) -
      for a low, predictable monthly price.</p> <p>You can manage your Lightsail
      resources using the Lightsail console, Lightsail API, Command Line
      Interface (CLI), or SDKs. For more information about Lightsail concepts
      and tasks, see the <a
      href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli">Amazon
      Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed
      information about the actions, data types, parameters, and errors of the
      Lightsail service. For more information about the supported Amazon Web
      Services Regions, endpoints, and service quotas of the Lightsail service,
      see <a
      href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon
      Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General
      Reference</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lightsail-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lightsail-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lightsail-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lightsail
  - name: lookoutequipment
    description: >-
      <p>Amazon Lookout for Equipment is a machine learning service that uses
      advanced analytics to identify anomalies in machines from sensor data for
      use in predictive maintenance. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lookoutequipment-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lookoutequipment-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lookoutequipment-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lookoutequipment
  - name: lakeformation
    description: >-
      <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the
      Lake Formation service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lakeformation-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lakeformation-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lakeformation-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lakeformation
  - name: logs
    description: >-
      <p>You can use Amazon CloudWatch Logs to monitor, store, and access your
      log files from EC2 instances, CloudTrail, and other sources. You can then
      retrieve the associated log data from CloudWatch Logs using the CloudWatch
      console. Alternatively, you can use CloudWatch Logs commands in the Amazon
      Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK.</p> <p>You
      can use CloudWatch Logs to:</p> <ul> <li> <p> <b>Monitor logs from EC2
      instances in real time</b>: You can use CloudWatch Logs to monitor
      applications and systems using log data. For example, CloudWatch Logs can
      track the number of errors that occur in your application logs. Then, it
      can send you a notification whenever the rate of errors exceeds a
      threshold that you specify. CloudWatch Logs uses your log data for
      monitoring so no code changes are required. For example, you can monitor
      application logs for specific literal terms (such as
      "NullReferenceException"). You can also count the number of occurrences of
      a literal term at a particular position in log data (such as "404" status
      codes in an Apache access log). When the term you are searching for is
      found, CloudWatch Logs reports the data to a CloudWatch metric that you
      specify.</p> </li> <li> <p> <b>Monitor CloudTrail logged events</b>: You
      can create alarms in CloudWatch and receive notifications of particular
      API activity as captured by CloudTrail. You can use the notification to
      perform troubleshooting.</p> </li> <li> <p> <b>Archive log data</b>: You
      can use CloudWatch Logs to store your log data in highly durable storage.
      You can change the log retention setting so that any log events earlier
      than this setting are automatically deleted. The CloudWatch Logs agent
      helps to quickly send both rotated and non-rotated log data off of a host
      and into the log service. You can then access the raw log data when you
      need it.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/logs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/logs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/logs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:logs
  - name: lookoutmetrics
    description: >-
      <p>This is the <i>Amazon Lookout for Metrics API Reference</i>. For an
      introduction to the service with tutorials for getting started, visit <a
      href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev">Amazon
      Lookout for Metrics Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lookoutmetrics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lookoutmetrics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lookoutmetrics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lookoutmetrics
  - name: lookoutvision
    description: >-
      <p>This is the Amazon Lookout for Vision API Reference. It provides
      descriptions of actions, data types, common parameters, and common
      errors.</p> <p>Amazon Lookout for Vision enables you to find visual
      defects in industrial products, accurately and at scale. It uses computer
      vision to identify missing components in an industrial product, damage to
      vehicles or structures, irregularities in production lines, and even
      minuscule defects in silicon wafers — or any other physical item where
      quality is important such as a missing capacitor on printed circuit
      boards.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/lookoutvision-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/lookoutvision-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/lookoutvision-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:lookoutvision
  - name: kinesis-video-webrtc-storage
    description: <p> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/kinesis-video-webrtc-storage-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/kinesis-video-webrtc-storage-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/kinesis-video-webrtc-storage-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:kinesis-video-webrtc-storage
  - name: license-manager-linux-subscriptions
    description: >-
      <p>With License Manager, you can discover and track your commercial Linux
      subscriptions on running Amazon EC2 instances.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/license-manager-linux-subscriptions-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/license-manager-linux-subscriptions-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/license-manager-linux-subscriptions-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:license-manager-linux-subscriptions
  - name: machinelearning
    description: Definition of the public APIs exposed by Amazon Machine Learning
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/machinelearning-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/machinelearning-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/machinelearning-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:machinelearning
  - name: macie2
    description: >-
      <p>Amazon Macie is a fully managed data security and data privacy service
      that uses machine learning and pattern matching to help you discover and
      protect your sensitive data in AWS. Macie automates the discovery of
      sensitive data, such as PII and intellectual property, to provide you with
      insight into the data that your organization stores in AWS. Macie also
      provides an inventory of your Amazon S3 buckets, which it continually
      monitors for you. If Macie detects sensitive data or potential data access
      issues, it generates detailed findings for you to review and act upon as
      necessary.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/macie2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/macie2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/macie2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:macie2
  - name: m2
    description: >-
      <p>Amazon Web Services Mainframe Modernization provides tools and
      resources to help you plan and implement migration and modernization from
      mainframes to Amazon Web Services managed runtime environments. It
      provides tools for analyzing existing mainframe applications, developing
      or updating mainframe applications using COBOL or PL/I, and implementing
      an automated pipeline for continuous integration and continuous delivery
      (CI/CD) of the applications.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/m2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/m2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/m2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:m2
  - name: location
    description: >-
      <p>"Suite of geospatial services including Maps, Places, Routes, Tracking,
      and Geofencing"</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/location-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/location-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/location-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:location
  - name: marketplace-catalog
    description: >-
      <p>Catalog API actions allow you to manage your entities through list,
      describe, and update capabilities. An entity can be a product or an offer
      on AWS Marketplace. </p> <p>You can automate your entity update process by
      integrating the AWS Marketplace Catalog API with your AWS Marketplace
      product build or deployment pipelines. You can also create your own
      applications on top of the Catalog API to manage your products on AWS
      Marketplace.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/marketplace-catalog-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/marketplace-catalog-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/marketplace-catalog-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:marketplace-catalog
  - name: managedblockchain-query
    description: >-
      <p>Amazon Managed Blockchain (AMB) Query provides you with convenient
      access to multi-blockchain network data, which makes it easier for you to
      extract contextual data related to blockchain activity. You can use AMB
      Query to read data from public blockchain networks, such as Bitcoin
      Mainnet and Ethereum Mainnet. You can also get information such as the
      current and historical balances of addresses, or you can get a list of
      blockchain transactions for a given time period. Additionally, you can get
      details of a given transaction, such as transaction events, which you can
      further analyze or use in business logic for your applications.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/managedblockchain-query-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/managedblockchain-query-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/managedblockchain-query-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:managedblockchain-query
  - name: marketplace-deployment
    description: >-
      <p>The AWS Marketplace Deployment Service supports the Quick Launch
      experience, which is a deployment option for software as a service (SaaS)
      products. Quick Launch simplifies and reduces the time, resources, and
      steps required to configure, deploy, and launch a products. The AWS
      Marketplace Deployment Service provides sellers with a secure method for
      passing deployment parameters (for example, API keys and external IDs) to
      buyers during the Quick Launch experience.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/marketplace-deployment-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/marketplace-deployment-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/marketplace-deployment-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:marketplace-deployment
  - name: mediaconnect
    description: API for AWS Elemental MediaConnect
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediaconnect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediaconnect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediaconnect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediaconnect
  - name: managedblockchain
    description: >-
      <p/> <p>Amazon Managed Blockchain is a fully managed service for creating
      and managing blockchain networks using open-source frameworks. Blockchain
      allows you to build applications where multiple parties can securely and
      transparently run transactions and share data without the need for a
      trusted, central authority.</p> <p>Managed Blockchain supports the
      Hyperledger Fabric and Ethereum open-source frameworks. Because of
      fundamental differences between the frameworks, some API actions or data
      types may only apply in the context of one framework and not the other.
      For example, actions related to Hyperledger Fabric network members such as
      <code>CreateMember</code> and <code>DeleteMember</code> don't apply to
      Ethereum.</p> <p>The description for each action indicates the framework
      or frameworks to which it applies. Data types and properties that apply
      only in the context of a particular framework are similarly indicated.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/managedblockchain-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/managedblockchain-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/managedblockchain-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:managedblockchain
  - name: mediaconvert
    description: AWS Elemental MediaConvert
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediaconvert-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediaconvert-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediaconvert-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediaconvert
  - name: medialive
    description: API for AWS Elemental MediaLive
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/medialive-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/medialive-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/medialive-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:medialive
  - name: mediapackage-vod
    description: AWS Elemental MediaPackage VOD
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediapackage-vod-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediapackage-vod-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediapackage-vod-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediapackage-vod
  - name: mediapackage
    description: AWS Elemental MediaPackage
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediapackage-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediapackage-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediapackage-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediapackage
  - name: marketplace-agreement
    description: >-
      <p>AWS Marketplace is a curated digital catalog that customers can use to
      find, buy, deploy, and manage third-party software, data, and services to
      build solutions and run their businesses. The AWS Marketplace Agreement
      Service provides an API interface that helps AWS Marketplace sellers
      manage their product-related agreements, including listing, searching, and
      filtering agreements.</p> <p>To manage agreements in AWS Marketplace, you
      must ensure that your AWS Identity and Access Management (IAM) policies
      and roles are set up. The user must have the required policies/permissions
      that allow them to carry out the actions in AWS:</p> <ul> <li> <p>
      <code>DescribeAgreement</code> – Grants permission to users to obtain
      detailed meta data about any of their agreements.</p> </li> <li> <p>
      <code>GetAgreementTerms</code> – Grants permission to users to obtain
      details about the terms of an agreement.</p> </li> <li> <p>
      <code>SearchAgreements</code> – Grants permission to users to search
      through all their agreements.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/marketplace-agreement-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/marketplace-agreement-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/marketplace-agreement-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:marketplace-agreement
  - name: mediastore
    description: >-
      <p>An AWS Elemental MediaStore container is a namespace that holds folders
      and objects. You use a container endpoint to create, read, and delete
      objects. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediastore-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediastore-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediastore-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediastore
  - name: mediastore-data
    description: >-
      <p>An AWS Elemental MediaStore asset is an object, similar to an object in
      the Amazon S3 service. Objects are the fundamental entities that are
      stored in AWS Elemental MediaStore.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediastore-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediastore-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediastore-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediastore-data
  - name: marketplacecommerceanalytics
    description: Provides AWS Marketplace business intelligence data on-demand.
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/marketplacecommerceanalytics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/marketplacecommerceanalytics-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/marketplacecommerceanalytics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:marketplacecommerceanalytics
  - name: meteringmarketplace
    description: >-
      <fullname>AWS Marketplace Metering Service</fullname> <p>This reference
      provides descriptions of the low-level AWS Marketplace Metering Service
      API.</p> <p>AWS Marketplace sellers can use this API to submit usage data
      for custom usage dimensions.</p> <p>For information on the permissions you
      need to use this API, see <a
      href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">AWS
      Marketplace metering and entitlement API permissions</a> in the <i>AWS
      Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b>
      </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an
      AWS Marketplace product. <code>MeterUsage</code> is called from an EC2
      instance or a container running on EKS or ECS.</p> </li> <li> <p>
      <i>BatchMeterUsage</i> - Submits the metering record for a set of
      customers. <code>BatchMeterUsage</code> is called from a
      software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting
      New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a
      SaaS application during the registration process. When a buyer visits your
      website during the registration process, the buyer submits a Registration
      Token through the browser. The Registration Token is resolved through this
      API to obtain a <code>CustomerIdentifier</code> along with the
      <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li>
      </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p>
      <ul> <li> <p>Paid container software products sold through AWS Marketplace
      must integrate with the AWS Marketplace Metering Service and call the
      <code>RegisterUsage</code> operation for software entitlement and
      metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
      required to call <code>RegisterUsage</code>, but you can do so if you want
      to receive usage data in your seller reports. For more information on
      using the <code>RegisterUsage</code> operation, see <a
      href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-Based
      Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls
      are captured by AWS CloudTrail. You can use Cloudtrail to verify that the
      SaaS metering records that you sent are accurate by searching for records
      with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can
      also use CloudTrail to audit records over time. For more information, see
      the <i> <a
      href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">AWS
      CloudTrail User Guide</a>.</i> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/meteringmarketplace-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/meteringmarketplace-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/meteringmarketplace-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:meteringmarketplace
  - name: mgn
    description: <p>The Application Migration Service service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mgn-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mgn-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mgn-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mgn
  - name: medical-imaging
    description: >-
      <p>This is the <i>AWS HealthImaging API Reference</i>. AWS HealthImaging
      is a HIPAA-eligible service that helps health care providers and their
      medical imaging ISV partners store, transform, and apply machine learning
      to medical images. For an introduction to the service, see the <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/what-is.html">
      <i>AWS HealthImaging Developer Guide</i> </a>.</p> <note> <p>We recommend
      using one of the AWS Software Development Kits (SDKs) for your programming
      language, as they take care of request authentication, serialization, and
      connection management. For more information, see <a
      href="http://aws.amazon.com/developer/tools">Tools to build on
      AWS</a>.</p> <p>For information about using HealthImaging API actions in
      one of the language-specific AWS SDKs, refer to the <i>See Also</i> link
      at the end of each section that describes an API action or data type.</p>
      </note> <p>The following sections list AWS HealthImaging API actions
      categorized according to functionality. Links are provided to actions
      within this Reference, along with links back to corresponding sections in
      the <i>AWS HealthImaging Developer Guide</i> where you can view console
      procedures and CLI/SDK code examples.</p> <p class="title"> <b>Data store
      actions</b> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_CreateDatastore.html">CreateDatastore</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/create-data-store.html">Creating
      a data store</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_GetDatastore.html">GetDatastore</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/get-data-store.html">Getting
      data store properties</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_ListDatastores.html">ListDatastores</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/list-data-stores.html">Listing
      data stores</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_DeleteDatastore.html">DeleteDatastore</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/delete-data-store.html">Deleting
      a data store</a>.</p> </li> </ul> <p class="title"> <b>Import job
      actions</b> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_StartDICOMImportJob.html">StartDICOMImportJob</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/start-dicom-import-job.html">Starting
      an import job</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_GetDICOMImportJob.html">GetDICOMImportJob</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/get-dicom-import-job.html">Getting
      import job properties</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_ListDICOMImportJobs.html">ListDICOMImportJobs</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/list-dicom-import-jobs.html">Listing
      import jobs</a>.</p> </li> </ul> <p class="title"> <b>Image set access
      actions</b> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_SearchImageSets.html">SearchImageSets</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/search-image-sets.html">Searching
      image sets</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_GetImageSet.html">GetImageSet</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/get-image-set-properties.html">Getting
      image set properties</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_GetImageSetMetadata.html">GetImageSetMetadata</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/get-image-set-metadata.html">Getting
      image set metadata</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_GetImageFrame.html">GetImageFrame</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/get-image-frame.html">Getting
      image set pixel data</a>.</p> </li> </ul> <p class="title"> <b>Image set
      modification actions</b> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_ListImageSetVersions.html">ListImageSetVersions</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/list-image-set-versions.html">Listing
      image set versions</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_UpdateImageSetMetadata.html">UpdateImageSetMetadata</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/update-image-set-metadata.html">Updating
      image set metadata</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_CopyImageSet.html">CopyImageSet</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/copy-image-set.html">Copying
      an image set</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_DeleteImageSet.html">DeleteImageSet</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/delete-image-set.html">Deleting
      an image set</a>.</p> </li> </ul> <p class="title"> <b>Tagging actions</b>
      </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_TagResource.html">TagResource</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-data-store.html">Tagging
      a data store</a> and <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-image-set.html">Tagging
      an image set</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_ListTagsForResource.html">ListTagsForResource</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-data-store.html">Tagging
      a data store</a> and <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-image-set.html">Tagging
      an image set</a>.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/healthimaging/latest/APIReference/API_UntagResource.html">UntagResource</a>
      – See <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-data-store.html">Tagging
      a data store</a> and <a
      href="https://docs.aws.amazon.com/healthimaging/latest/devguide/tag-list-untag-image-set.html">Tagging
      an image set</a>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/medical-imaging-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/medical-imaging-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/medical-imaging-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:medical-imaging
  - name: migration-hub-refactor-spaces
    description: >-
      <p><fullname>Amazon Web Services Migration Hub Refactor Spaces</fullname>
      <p>This API reference provides descriptions, syntax, and other details
      about each of the actions and data types for Amazon Web Services Migration
      Hub Refactor Spaces (Refactor Spaces). The topic for each action shows the
      API request parameters and the response. Alternatively, you can use one of
      the Amazon Web Services SDKs to access an API that is tailored to the
      programming language or platform that you're using. For more information,
      see <a href="https://aws.amazon.com/tools/#SDKs">Amazon Web Services
      SDKs</a>.</p> <p>To share Refactor Spaces environments with other Amazon
      Web Services accounts or with Organizations and their OUs, use Resource
      Access Manager's <code>CreateResourceShare</code> API. See <a
      href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a>
      in the <i>Amazon Web Services RAM API Reference</i>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/migration-hub-refactor-spaces-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/migration-hub-refactor-spaces-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/migration-hub-refactor-spaces-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:migration-hub-refactor-spaces
  - name: mediapackagev2
    description: >-
      <note> <p>This guide is intended for creating AWS Elemental MediaPackage
      resources in MediaPackage Version 2 (v2) starting from May 2023. To get
      started with MediaPackage v2, create your MediaPackage resources. There
      isn't an automated process to migrate your resources from MediaPackage v1
      to MediaPackage v2. </p> <p>The names of the entities that you use to
      access this API, like URLs and ARNs, all have the versioning information
      added, like "v2", to distinguish from the prior version. If you used
      MediaPackage prior to this release, you can't use the MediaPackage v2 CLI
      or the MediaPackage v2 API to access any MediaPackage v1 resources.</p>
      <p>If you created resources in MediaPackage v1, use video on demand (VOD)
      workflows, and aren't looking to migrate to MediaPackage v2 yet, see the
      <a
      href="https://docs.aws.amazon.com/mediapackage/latest/apireference/what-is.html">MediaPackage
      v1 Live API Reference</a>.</p> </note> <p>This is the AWS Elemental
      MediaPackage v2 Live REST API Reference. It describes all the MediaPackage
      API operations for live content in detail, and provides sample requests,
      responses, and errors for the supported web services protocols.</p> <p>We
      assume that you have the IAM permissions that you need to use MediaPackage
      via the REST API. We also assume that you are familiar with the features
      and operations of MediaPackage, as described in the AWS Elemental
      MediaPackage User Guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediapackagev2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediapackagev2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediapackagev2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediapackagev2
  - name: memorydb
    description: >-
      <p>MemoryDB for Redis is a fully managed, Redis-compatible, in-memory
      database that delivers ultra-fast performance and Multi-AZ durability for
      modern applications built using microservices architectures. MemoryDB
      stores the entire database in-memory, enabling low latency and high
      throughput data access. It is compatible with Redis, a popular open source
      data store, enabling you to leverage Redis’ flexible and friendly data
      structures, APIs, and commands.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/memorydb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/memorydb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/memorydb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:memorydb
  - name: migrationhub-config
    description: >-
      <p>The AWS Migration Hub home region APIs are available specifically for
      working with your Migration Hub home region. You can use these APIs to
      determine a home region, as well as to create and work with controls that
      describe the home region.</p> <ul> <li> <p>You must make API calls for
      write actions (create, notify, associate, disassociate, import, or put)
      while in your home region, or a <code>HomeRegionNotSetException</code>
      error is returned.</p> </li> <li> <p>API calls for read actions (list,
      describe, stop, and delete) are permitted outside of your home region.</p>
      </li> <li> <p>If you call a write API outside the home region, an
      <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You can
      call <code>GetHomeRegion</code> action to obtain the account's Migration
      Hub home region.</p> </li> </ul> <p>For specific API usage, see the
      sections that follow in this AWS Migration Hub Home Region API reference.
      </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/migrationhub-config-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/migrationhub-config-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/migrationhub-config-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:migrationhub-config
  - name: migrationhubstrategy
    description: >-
      <p><fullname>Migration Hub Strategy Recommendations</fullname> <p>This API
      reference provides descriptions, syntax, and other details about each of
      the actions and data types for Migration Hub Strategy Recommendations
      (Strategy Recommendations). The topic for each action shows the API
      request parameters and the response. Alternatively, you can use one of the
      AWS SDKs to access an API that is tailored to the programming language or
      platform that you're using. For more information, see <a
      href="http://aws.amazon.com/tools/#SDKs">AWS SDKs</a>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/migrationhubstrategy-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/migrationhubstrategy-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/migrationhubstrategy-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:migrationhubstrategy
  - name: migrationhuborchestrator
    description: >-
      <p>This API reference provides descriptions, syntax, and other details
      about each of the actions and data types for AWS Migration Hub
      Orchestrator. he topic for each action shows the API request parameters
      and the response. Alternatively, you can use one of the AWS SDKs to access
      an API that is tailored to the programming language or platform that
      you're using.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/migrationhuborchestrator-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/migrationhuborchestrator-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/migrationhuborchestrator-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:migrationhuborchestrator
  - name: mobile
    description: >-
      <p> AWS Mobile Service provides mobile app and website developers with
      capabilities required to configure AWS resources and bootstrap their
      developer desktop projects with the necessary SDKs, constants, tools and
      samples to make use of those resources. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mobile-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mobile-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mobile-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mobile
  - name: mediatailor
    description: >-
      <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad
      insertion and linear channels. With MediaTailor, you can assemble existing
      content into a linear stream and serve targeted ads to viewers while
      maintaining broadcast quality in over-the-top (OTT) video applications.
      For information about using the service, including detailed information
      about the settings covered in this guide, see the <a
      href="https://docs.aws.amazon.com/mediatailor/latest/ug/">AWS Elemental
      MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage
      AWS Elemental MediaTailor configurations and channels the same as you do
      through the console. For example, you specify ad insertion behavior and
      mapping information for the origin server and the ad decision server
      (ADS).</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mediatailor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mediatailor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mediatailor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mediatailor
  - name: mturk-requester
    description: <fullname>Amazon Mechanical Turk API Reference</fullname>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mturk-requester-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mturk-requester-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mturk-requester-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mturk-requester
  - name: monitoring
    description: >-
      <p>Amazon CloudWatch monitors your Amazon Web Services (Amazon Web
      Services) resources and the applications you run on Amazon Web Services in
      real time. You can use CloudWatch to collect and track metrics, which are
      the variables you want to measure for your resources and applications.</p>
      <p>CloudWatch alarms send notifications or automatically change the
      resources you are monitoring based on rules that you define. For example,
      you can monitor the CPU usage and disk reads and writes of your Amazon EC2
      instances. Then, use this data to determine whether you should launch
      additional instances to handle increased load. You can also use this data
      to stop under-used instances to save money.</p> <p>In addition to
      monitoring the built-in metrics that come with Amazon Web Services, you
      can monitor your own custom metrics. With CloudWatch, you gain system-wide
      visibility into resource utilization, application performance, and
      operational health.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/monitoring-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/monitoring-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/monitoring-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:monitoring
  - name: mwaa
    description: >-
      <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname>
      <p>This section contains the Amazon Managed Workflows for Apache Airflow
      (MWAA) API reference documentation. For more information, see <a
      href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html">What
      is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p>
      <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used
      for environment management.</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html">CreateEnvironment</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html">DeleteEnvironment</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html">GetEnvironment</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html">ListEnvironments</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html">ListTagsForResource</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html">TagResource</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html">UntagResource</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html">UpdateEnvironment</a>
      </p> </li> </ul> </li> <li> <p>
      <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to
      operate the Airflow environment.</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html
      ">CreateCliToken</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html">CreateWebLoginToken</a>
      </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of
      supported regions, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/mwaa.html">Amazon MWAA
      endpoints and quotas</a> in the <i>Amazon Web Services General
      Reference</i>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mwaa-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mwaa-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mwaa-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mwaa
  - name: neptune
    description: >-
      <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable,
      fully-managed graph database service that makes it easy to build and run
      applications that work with highly connected datasets. The core of Amazon
      Neptune is a purpose-built, high-performance graph database engine
      optimized for storing billions of relationships and querying the graph
      with milliseconds latency. Amazon Neptune supports popular graph models
      Property Graph and W3C's RDF, and their respective query languages Apache
      TinkerPop Gremlin and SPARQL, allowing you to easily build queries that
      efficiently navigate highly connected datasets. Neptune powers graph use
      cases such as recommendation engines, fraud detection, knowledge graphs,
      drug discovery, and network security.</p> <p>This interface reference for
      Amazon Neptune contains documentation for a programming or command line
      interface you can use to manage Amazon Neptune. Note that Amazon Neptune
      is asynchronous, which means that some interfaces might require techniques
      such as polling or callback functions to determine when a command has been
      applied. In this reference, the parameter descriptions indicate whether a
      command is applied immediately, on the next instance reboot, or during the
      maintenance window. The reference structure is as follows, and we list
      following some related topics from the user guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/neptune-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/neptune-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/neptune-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:neptune
  - name: mq
    description: >-
      <p>Amazon MQ is a managed message broker service for Apache ActiveMQ and
      RabbitMQ that makes it easy to set up and operate message brokers in the
      cloud. A message broker allows software applications and components to
      communicate using various programming languages, operating systems, and
      formal messaging protocols.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/mq-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/mq-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/mq-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:mq
  - name: models.lex.v2
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/modelslexv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/modelslexv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/modelslexv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:modelslexv2
  - name: neptune-graph
    description: >-
      <p>Neptune Analytics is a new analytics database engine for Amazon Neptune
      that helps customers get to insights faster by quickly processing large
      amounts of graph data, invoking popular graph analytic algorithms in
      low-latency queries, and getting analytics results in seconds.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/neptune-graph-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/neptune-graph-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/neptune-graph-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:neptune-graph
  - name: neptunedata
    description: >-
      <p><fullname>Neptune Data API</fullname> <p>The Amazon Neptune data API
      provides SDK support for more than 40 of Neptune's data operations,
      including data loading, query execution, data inquiry, and machine
      learning. It supports the Gremlin and openCypher query languages, and is
      available in all SDK languages. It automatically signs API requests and
      greatly simplifies integrating Neptune into your applications.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/neptunedata-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/neptunedata-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/neptunedata-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:neptunedata
  - name: nimble
    description: >-
      <p>Welcome to the Amazon Nimble Studio API reference. This API reference
      provides methods, schema, resources, parameters, and more to help you get
      the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio
      that empowers visual effects, animation, and interactive content teams to
      create content securely within a scalable, private cloud service.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/nimble-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/nimble-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/nimble-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:nimble
  - name: networkmonitor
    description: >-
      <p>Amazon CloudWatch Network Monitor is an Amazon Web Services active
      network monitoring service that identifies if a network issues exists
      within the Amazon Web Services network or your own company network. Within
      Network Monitor you'll choose the source VPCs and subnets from the Amazon
      Web Services network in which you operate and then you'll choose the
      destination IP addresses from your on-premises network. From these sources
      and destinations, Network Monitor creates a monitor containing all the
      possible source and destination combinations, each of which is called a
      probe, within a single monitor. These probes then monitor network traffic
      to help you identify where network issues might be affecting your
      traffic.</p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/what-is-network-monitor.html">Using
      Amazon CloudWatch Network Monitor</a> in the <i>Amazon CloudWatch User
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/networkmonitor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/networkmonitor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/networkmonitor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:networkmonitor
  - name: omics
    description: >-
      <p>This is the <i>AWS HealthOmics API Reference</i>. For an introduction
      to the service, see <a
      href="https://docs.aws.amazon.com/omics/latest/dev/">What is AWS
      HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/omics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/omics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/omics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:omics
  - name: oam
    description: >-
      <p>Use Amazon CloudWatch Observability Access Manager to create and manage
      links between source accounts and monitoring accounts by using
      <i>CloudWatch cross-account observability</i>. With CloudWatch
      cross-account observability, you can monitor and troubleshoot applications
      that span multiple accounts within a Region. Seamlessly search, visualize,
      and analyze your metrics, logs, traces, and Application Insights
      applications in any of the linked accounts without account boundaries.</p>
      <p>Set up one or more Amazon Web Services accounts as <i>monitoring
      accounts</i> and link them with multiple <i>source accounts</i>. A
      monitoring account is a central Amazon Web Services account that can view
      and interact with observability data generated from source accounts. A
      source account is an individual Amazon Web Services account that generates
      observability data for the resources that reside in it. Source accounts
      share their observability data with the monitoring account. The shared
      observability data can include metrics in Amazon CloudWatch, logs in
      Amazon CloudWatch Logs, traces in X-Ray, and applications in Amazon
      CloudWatch Application Insights.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/oam-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/oam-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/oam-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:oam
  - name: network-firewall
    description: >-
      <p>This is the API Reference for Network Firewall. This guide is for
      developers who need detailed information about the Network Firewall API
      actions, data types, and errors. </p> <ul> <li> <p>The REST API requires
      you to handle connection details, such as calculating signatures, handling
      request retries, and error handling. For general information about using
      the Amazon Web Services REST APIs, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/aws-apis.html">Amazon
      Web Services APIs</a>. </p> <p>To access Network Firewall using the REST
      API endpoint: <code>https://network-firewall.&lt;region&gt;.amazonaws.com
      </code> </p> </li> <li> <p>Alternatively, you can use one of the Amazon
      Web Services SDKs to access an API that's tailored to the programming
      language or platform that you're using. For more information, see <a
      href="http://aws.amazon.com/tools/#SDKs">Amazon Web Services SDKs</a>.</p>
      </li> <li> <p>For descriptions of Network Firewall features, including and
      step-by-step instructions on how to use them through the Network Firewall
      console, see the <a
      href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/">Network
      Firewall Developer Guide</a>.</p> </li> </ul> <p>Network Firewall is a
      stateful, managed, network firewall and intrusion detection and prevention
      service for Amazon Virtual Private Cloud (Amazon VPC). With Network
      Firewall, you can filter traffic at the perimeter of your VPC. This
      includes filtering traffic going to and coming from an internet gateway,
      NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules
      that are compatible with Suricata, a free, open source network analysis
      and threat detection engine. Network Firewall supports Suricata version
      6.0.9. For information about Suricata, see the <a
      href="https://suricata.io/">Suricata website</a>.</p> <p>You can use
      Network Firewall to monitor and protect your VPC traffic in a number of
      ways. The following are just a few examples: </p> <ul> <li> <p>Allow
      domains or IP addresses for known Amazon Web Services service endpoints,
      such as Amazon S3, and block all other forms of traffic.</p> </li> <li>
      <p>Use custom lists of known bad domains to limit the types of domain
      names that your applications can access.</p> </li> <li> <p>Perform deep
      packet inspection on traffic entering or leaving your VPC.</p> </li> <li>
      <p>Use stateful protocol detection to filter protocols like HTTPS,
      regardless of the port used.</p> </li> </ul> <p>To enable Network Firewall
      for your VPCs, you perform steps in both Amazon VPC and in Network
      Firewall. For information about using Amazon VPC, see <a
      href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon VPC User
      Guide</a>.</p> <p>To start using Network Firewall, do the following: </p>
      <ol> <li> <p>(Optional) If you don't already have a VPC that you want to
      protect, create it in Amazon VPC. </p> </li> <li> <p>In Amazon VPC, in
      each Availability Zone where you want to have a firewall endpoint, create
      a subnet for the sole use of Network Firewall. </p> </li> <li> <p>In
      Network Firewall, create stateless and stateful rule groups, to define the
      components of the network traffic filtering behavior that you want your
      firewall to have. </p> </li> <li> <p>In Network Firewall, create a
      firewall policy that uses your rule groups and specifies additional
      default traffic filtering behavior. </p> </li> <li> <p>In Network
      Firewall, create a firewall and specify your new firewall policy and VPC
      subnets. Network Firewall creates a firewall endpoint in each subnet that
      you specify, with the behavior that's defined in the firewall policy.</p>
      </li> <li> <p>In Amazon VPC, use ingress routing enhancements to route
      traffic through the new firewall endpoints.</p> </li> </ol>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/network-firewall-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/network-firewall-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/network-firewall-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:network-firewall
  - name: opensearchserverless
    description: >-
      <p>Use the Amazon OpenSearch Serverless API to create, configure, and
      manage OpenSearch Serverless collections and security policies.</p>
      <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless
      configuration for Amazon OpenSearch Service. OpenSearch Serverless removes
      the operational complexities of provisioning, configuring, and tuning your
      OpenSearch clusters. It enables you to easily search and analyze petabytes
      of data without having to worry about the underlying infrastructure and
      data management.</p> <p> To learn more about OpenSearch Serverless, see <a
      href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html">What
      is Amazon OpenSearch Serverless?</a> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/opensearchserverless-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/opensearchserverless-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/opensearchserverless-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:opensearchserverless
  - name: opensearch
    description: >-
      <p>Use the Amazon OpenSearch Service configuration API to create,
      configure, and manage OpenSearch Service domains.</p> <p>For sample code
      that uses the configuration API, see the <a
      href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html">
      <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also
      contains <a
      href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html">sample
      code</a> for sending signed HTTP requests to the OpenSearch APIs. The
      endpoint for configuration service requests is Region specific:
      es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com.
      For a current list of supported Regions and endpoints, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions">Amazon
      Web Services service endpoints</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/opensearch-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/opensearch-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/opensearch-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:opensearch
  - name: organizations
    description: >-
      <p>Organizations is a web service that enables you to consolidate your
      multiple Amazon Web Services accounts into an <i>organization</i> and
      centrally manage your accounts and their resources.</p> <p>This guide
      provides descriptions of the Organizations operations. For more
      information about using this service, see the <a
      href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html">Organizations
      User Guide</a>.</p> <p> <b>Support and feedback for Organizations</b> </p>
      <p>We welcome your feedback. Send your comments to <a
      href="mailto:feedback-awsorganizations@amazon.com">feedback-awsorganizations@amazon.com</a>
      or post your feedback and questions in the <a
      href="http://forums.aws.amazon.com/forum.jspa?forumID=219">Organizations
      support forum</a>. For more information about the Amazon Web Services
      support forums, see <a
      href="http://forums.aws.amazon.com/help.jspa">Forums Help</a>.</p> <p>
      <b>Endpoint to call When using the CLI or the Amazon Web Services SDK</b>
      </p> <p>For the current release of Organizations, specify the
      <code>us-east-1</code> region for all Amazon Web Services API and CLI
      calls made from the commercial Amazon Web Services Regions outside of
      China. If calling from one of the Amazon Web Services Regions in China,
      then specify <code>cn-northwest-1</code>. You can do this in the CLI by
      using these parameters and commands:</p> <ul> <li> <p>Use the following
      parameter with each command to specify both the endpoint and its
      region:</p> <p> <code>--endpoint-url
      https://organizations.us-east-1.amazonaws.com</code> <i>(from commercial
      Amazon Web Services Regions outside of China)</i> </p> <p>or</p> <p>
      <code>--endpoint-url
      https://organizations.cn-northwest-1.amazonaws.com.cn</code> <i>(from
      Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use the
      default endpoint, but configure your default region with this command:</p>
      <p> <code>aws configure set default.region us-east-1</code> <i>(from
      commercial Amazon Web Services Regions outside of China)</i> </p>
      <p>or</p> <p> <code>aws configure set default.region cn-northwest-1</code>
      <i>(from Amazon Web Services Regions in China)</i> </p> </li> <li> <p>Use
      the following parameter with each command to specify the endpoint:</p> <p>
      <code>--region us-east-1</code> <i>(from commercial Amazon Web Services
      Regions outside of China)</i> </p> <p>or</p> <p> <code>--region
      cn-northwest-1</code> <i>(from Amazon Web Services Regions in China)</i>
      </p> </li> </ul> <p> <b>Recording API Requests</b> </p> <p>Organizations
      supports CloudTrail, a service that records Amazon Web Services API calls
      for your Amazon Web Services account and delivers log files to an Amazon
      S3 bucket. By using information collected by CloudTrail, you can determine
      which requests the Organizations service received, who made the request
      and when, and so on. For more about Organizations and its support for
      CloudTrail, see <a
      href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_incident-response.html#orgs_cloudtrail-integration">Logging
      Organizations API calls with CloudTrail</a> in the <i>Organizations User
      Guide</i>. To learn more about CloudTrail, including how to turn it on and
      find your log files, see the <a
      href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">CloudTrail
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/organizations-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/organizations-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/organizations-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:organizations
  - name: opsworkscm
    description: >-
      <fullname>AWS OpsWorks CM</fullname> <p>AWS OpsWorks for configuration
      management (CM) is a service that runs and manages configuration
      management servers. You can use AWS OpsWorks CM to create and manage AWS
      OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers,
      and add or remove nodes for the servers to manage.</p> <p> <b>Glossary of
      terms</b> </p> <ul> <li> <p> <b>Server</b>: A configuration management
      server that can be highly-available. The configuration management server
      runs on an Amazon Elastic Compute Cloud (EC2) instance, and may use
      various other AWS services, such as Amazon Relational Database Service
      (RDS) and Elastic Load Balancing. A server is a generic abstraction over
      the configuration manager that you want to use, much like Amazon RDS. In
      AWS OpsWorks CM, you do not start or stop servers. After you create
      servers, they continue to run until they are deleted.</p> </li> <li> <p>
      <b>Engine</b>: The engine is the specific configuration manager that you
      want to use. Valid values in this release include
      <code>ChefAutomate</code> and <code>Puppet</code>.</p> </li> <li> <p>
      <b>Backup</b>: This is an application-level backup of the data that the
      configuration manager stores. AWS OpsWorks CM creates an S3 bucket for
      backups when you launch the first server. A backup maintains a snapshot of
      a server's configuration-related attributes at the time the backup
      starts.</p> </li> <li> <p> <b>Events</b>: Events are always related to a
      server. Events are written during server creation, when health checks run,
      when backups are created, when system maintenance is performed, etc. When
      you delete a server, the server's events are also deleted.</p> </li> <li>
      <p> <b>Account attributes</b>: Every account has attributes that are
      assigned in the AWS OpsWorks CM database. These attributes store
      information about configuration limits (servers, backups, etc.) and your
      customer account. </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS
      OpsWorks CM supports the following endpoints, all HTTPS. You must connect
      to one of the following endpoints. Your servers can only be accessed or
      managed within the endpoint in which they are created.</p> <ul> <li>
      <p>opsworks-cm.us-east-1.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.us-east-2.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.us-west-1.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.us-west-2.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.ap-northeast-1.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.ap-southeast-1.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.ap-southeast-2.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.eu-central-1.amazonaws.com</p> </li> <li>
      <p>opsworks-cm.eu-west-1.amazonaws.com</p> </li> </ul> <p>For more
      information, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html">AWS
      OpsWorks endpoints and quotas</a> in the AWS General Reference.</p> <p>
      <b>Throttling limits</b> </p> <p>All API operations allow for five
      requests per second with a burst of 10 requests per second.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/opsworkscm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/opsworkscm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/opsworkscm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:opsworkscm
  - name: osis
    description: >-
      <p>Use the Amazon OpenSearch Ingestion API to create and manage ingestion
      pipelines. OpenSearch Ingestion is a fully managed data collector that
      delivers real-time log and trace data to OpenSearch Service domains. For
      more information, see <a
      href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ingestion.html">Getting
      data into your cluster using OpenSearch Ingestion</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/osis-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/osis-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/osis-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:osis
  - name: panorama
    description: >-
      <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is
      the <i>AWS Panorama API Reference</i>. For an introduction to the service,
      see <a
      href="https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html">What
      is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/panorama-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/panorama-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/panorama-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:panorama
  - name: opsworks
    description: >-
      <fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks Stacks
      API Reference</i>. This guide provides descriptions, syntax, and usage
      examples for AWS OpsWorks Stacks actions and data types, including common
      parameters and error codes. </p> <p>AWS OpsWorks Stacks is an application
      management service that provides an integrated experience for overseeing
      the complete application lifecycle. For information about this product, go
      to the <a href="http://aws.amazon.com/opsworks/">AWS OpsWorks</a> details
      page. </p> <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the
      AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI)
      or by using one of the AWS SDKs to implement applications in your
      preferred language. For more information, see:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">AWS
      CLI</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html">AWS
      SDK for Java</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm">AWS
      SDK for .NET</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html">AWS
      SDK for PHP 2</a> </p> </li> <li> <p> <a
      href="http://docs.aws.amazon.com/sdkforruby/api/">AWS SDK for Ruby</a>
      </p> </li> <li> <p> <a
      href="http://aws.amazon.com/documentation/sdkforjavascript/">AWS SDK for
      Node.js</a> </p> </li> <li> <p> <a
      href="http://docs.pythonboto.org/en/latest/ref/opsworks.html">AWS SDK for
      Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS
      OpsWorks Stacks supports the following endpoints, all HTTPS. You must
      connect to one of the following endpoints. Stacks can only be accessed or
      managed within the endpoint in which they are created.</p> <ul> <li>
      <p>opsworks.us-east-1.amazonaws.com</p> </li> <li>
      <p>opsworks.us-east-2.amazonaws.com</p> </li> <li>
      <p>opsworks.us-west-1.amazonaws.com</p> </li> <li>
      <p>opsworks.us-west-2.amazonaws.com</p> </li> <li>
      <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS
      console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li>
      <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li>
      <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li>
      <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li>
      <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li>
      <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li>
      <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li>
      <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li>
      <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li>
      <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef
      Versions</b> </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>,
      or <a>UpdateStack</a> we recommend you use the
      <code>ConfigurationManager</code> parameter to specify the Chef version.
      The recommended and default value for Linux stacks is currently 12.
      Windows stacks use Chef 12.2. For more information, see <a
      href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html">Chef
      Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for
      your Linux stack. We recommend migrating your existing Linux stacks to
      Chef 12 as soon as possible.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/opsworks-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/opsworks-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/opsworks-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:opsworks
  - name: payment-cryptography
    description: >-
      <p>Amazon Web Services Payment Cryptography Control Plane APIs manage
      encryption keys for use during payment-related cryptographic operations.
      You can create, import, export, share, manage, and delete keys. You can
      also manage Identity and Access Management (IAM) policies for keys. For
      more information, see <a
      href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/security-iam.html">Identity
      and access management</a> in the <i>Amazon Web Services Payment
      Cryptography User Guide.</i> </p> <p>To use encryption keys for
      payment-related transaction processing and associated cryptographic
      operations, you use the <a
      href="https://docs.aws.amazon.com/payment-cryptography/latest/DataAPIReference/Welcome.html">Amazon
      Web Services Payment Cryptography Data Plane</a>. You can perform actions
      like encrypt, decrypt, generate, and verify payment-related data.</p>
      <p>All Amazon Web Services Payment Cryptography API calls must be signed
      and transmitted using Transport Layer Security (TLS). We recommend you
      always use the latest supported TLS version for logging API requests. </p>
      <p>Amazon Web Services Payment Cryptography supports CloudTrail for
      control plane operations, a service that logs Amazon Web Services API
      calls and related events for your Amazon Web Services account and delivers
      them to an Amazon S3 bucket you specify. By using the information
      collected by CloudTrail, you can determine what requests were made to
      Amazon Web Services Payment Cryptography, who made the request, when it
      was made, and so on. If you don't conﬁgure a trail, you can still view the
      most recent events in the CloudTrail console. For more information, see
      the <a
      href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/">CloudTrail
      User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/payment-cryptography-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/payment-cryptography-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/payment-cryptography-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:payment-cryptography
  - name: pca-connector-ad
    description: >-
      <p>Amazon Web Services Private CA Connector for Active Directory creates a
      connector between Amazon Web Services Private CA and Active Directory (AD)
      that enables you to provision security certificates for AD signed by a
      private CA that you own. For more information, see <a
      href="https://docs.aws.amazon.com/privateca/latest/userguide/ad-connector.html">Amazon
      Web Services Private CA Connector for Active Directory</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pca-connector-ad-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pca-connector-ad-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pca-connector-ad-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pca-connector-ad
  - name: personalize-events
    description: >-
      <p>Amazon Personalize can consume real-time user event data, such as
      <i>stream</i> or <i>click</i> data, and use it for model training either
      alone or combined with historical data. For more information see <a
      href="https://docs.aws.amazon.com/personalize/latest/dg/recording-item-interaction-events.html">Recording
      item interaction events</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/personalize-events-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/personalize-events-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/personalize-events-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:personalize-events
  - name: networkmanager
    description: >-
      <p>Amazon Web Services enables you to centrally manage your Amazon Web
      Services Cloud WAN core network and your Transit Gateway network across
      Amazon Web Services accounts, Regions, and on-premises locations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/networkmanager-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/networkmanager-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/networkmanager-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:networkmanager
  - name: outposts
    description: >-
      <p>Amazon Web Services Outposts is a fully managed service that extends
      Amazon Web Services infrastructure, APIs, and tools to customer premises.
      By providing local access to Amazon Web Services managed infrastructure,
      Amazon Web Services Outposts enables customers to build and run
      applications on premises using the same programming interfaces as in
      Amazon Web Services Regions, while using local compute and storage
      resources for lower latency and local data processing needs.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/outposts-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/outposts-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/outposts-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:outposts
  - name: personalize-runtime
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/personalize-runtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/personalize-runtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/personalize-runtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:personalize-runtime
  - name: personalize
    description: >-
      <p>Amazon Personalize is a machine learning service that makes it easy to
      add individualized recommendations to customers.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/personalize-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/personalize-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/personalize-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:personalize
  - name: payment-cryptography-data
    description: >-
      <p>You use the Amazon Web Services Payment Cryptography Data Plane to
      manage how encryption keys are used for payment-related transaction
      processing and associated cryptographic operations. You can encrypt,
      decrypt, generate, verify, and translate payment-related cryptographic
      operations in Amazon Web Services Payment Cryptography. For more
      information, see <a
      href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/data-operations.html">Data
      operations</a> in the <i>Amazon Web Services Payment Cryptography User
      Guide</i>.</p> <p>To manage your encryption keys, you use the <a
      href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/Welcome.html">Amazon
      Web Services Payment Cryptography Control Plane</a>. You can create,
      import, export, share, manage, and delete keys. You can also manage
      Identity and Access Management (IAM) policies for keys. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/payment-cryptography-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/payment-cryptography-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/payment-cryptography-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:payment-cryptography-data
  - name: pinpoint-email
    description: >-
      <fullname>Amazon Pinpoint Email Service</fullname> <p>Welcome to the
      <i>Amazon Pinpoint Email API Reference</i>. This guide provides
      information about the Amazon Pinpoint Email API (version 1.0), including
      supported operations, data types, parameters, and schemas.</p> <p> <a
      href="https://aws.amazon.com/pinpoint">Amazon Pinpoint</a> is an AWS
      service that you can use to engage with your customers across multiple
      messaging channels. You can use Amazon Pinpoint to send email, SMS text
      messages, voice messages, and push notifications. The Amazon Pinpoint
      Email API provides programmatic access to options that are unique to the
      email channel and supplement the options provided by the Amazon Pinpoint
      API.</p> <p>If you're new to Amazon Pinpoint, you might find it helpful to
      also review the <a
      href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html">Amazon
      Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer Guide</i>
      provides tutorials, code samples, and procedures that demonstrate how to
      use Amazon Pinpoint features programmatically and how to integrate Amazon
      Pinpoint functionality into mobile apps and other types of applications.
      The guide also provides information about key topics such as Amazon
      Pinpoint integration with other AWS services and the limits that apply to
      using the service.</p> <p>The Amazon Pinpoint Email API is available in
      several AWS Regions and it provides an endpoint for each of these Regions.
      For a list of all the Regions and endpoints where the API is currently
      available, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region">AWS
      Service Endpoints</a> in the <i>Amazon Web Services General Reference</i>.
      To learn more about AWS Regions, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing
      AWS Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
      <p>In each Region, AWS maintains multiple Availability Zones. These
      Availability Zones are physically isolated from each other, but are united
      by private, low-latency, high-throughput, and highly redundant network
      connections. These Availability Zones enable us to provide very high
      levels of availability and redundancy, while also minimizing latency. To
      learn more about the number of Availability Zones that are available in
      each Region, see <a
      href="http://aws.amazon.com/about-aws/global-infrastructure/">AWS Global
      Infrastructure</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pinpoint-email-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pinpoint-email-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pinpoint-email-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pinpoint-email
  - name: pinpoint
    description: <p>Doc Engage API - Amazon Pinpoint API</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pinpoint-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pinpoint-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pinpoint-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pinpoint
  - name: pinpoint-sms-voice-v2
    description: >-
      <p>Welcome to the <i>Amazon Pinpoint SMS and Voice, version 2 API
      Reference</i>. This guide provides information about Amazon Pinpoint SMS
      and Voice, version 2 API resources, including supported HTTP methods,
      parameters, and schemas.</p> <p>Amazon Pinpoint is an Amazon Web Services
      service that you can use to engage with your recipients across multiple
      messaging channels. The Amazon Pinpoint SMS and Voice, version 2 API
      provides programmatic access to options that are unique to the SMS and
      voice channels and supplements the resources provided by the Amazon
      Pinpoint API.</p> <p>If you're new to Amazon Pinpoint, it's also helpful
      to review the <a
      href="https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html">
      Amazon Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer
      Guide</i> provides tutorials, code samples, and procedures that
      demonstrate how to use Amazon Pinpoint features programmatically and how
      to integrate Amazon Pinpoint functionality into mobile apps and other
      types of applications. The guide also provides key information, such as
      Amazon Pinpoint integration with other Amazon Web Services services, and
      the quotas that apply to use of the service.</p> <p> <b>Regional
      availability</b> </p> <p>The <i>Amazon Pinpoint SMS and Voice, version 2
      API Reference</i> is available in several Amazon Web Services Regions and
      it provides an endpoint for each of these Regions. For a list of all the
      Regions and endpoints where the API is currently available, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region">Amazon
      Web Services Service Endpoints</a> and <a
      href="https://docs.aws.amazon.com/general/latest/gr/pinpoint.html">Amazon
      Pinpoint endpoints and quotas</a> in the Amazon Web Services General
      Reference. To learn more about Amazon Web Services Regions, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing
      Amazon Web Services Regions</a> in the Amazon Web Services General
      Reference.</p> <p>In each Region, Amazon Web Services maintains multiple
      Availability Zones. These Availability Zones are physically isolated from
      each other, but are united by private, low-latency, high-throughput, and
      highly redundant network connections. These Availability Zones enable us
      to provide very high levels of availability and redundancy, while also
      minimizing latency. To learn more about the number of Availability Zones
      that are available in each Region, see <a
      href="https://aws.amazon.com/about-aws/global-infrastructure/">Amazon Web
      Services Global Infrastructure.</a> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pinpoint-sms-voice-v2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pinpoint-sms-voice-v2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pinpoint-sms-voice-v2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pinpoint-sms-voice-v2
  - name: pipes
    description: >-
      <p>Amazon EventBridge Pipes connects event sources to targets. Pipes
      reduces the need for specialized knowledge and integration code when
      developing event driven architectures. This helps ensures consistency
      across your company’s applications. With Pipes, the target can be any
      available EventBridge target. To set up a pipe, you select the event
      source, add optional event filtering, define optional enrichment, and
      select the target for the event data. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pipes-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pipes-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pipes-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pipes
  - name: proton
    description: >-
      <p>This is the Proton Service API Reference. It provides descriptions,
      syntax and usage examples for each of the <a
      href="https://docs.aws.amazon.com/proton/latest/APIReference/API_Operations.html">actions</a>
      and <a
      href="https://docs.aws.amazon.com/proton/latest/APIReference/API_Types.html">data
      types</a> for the Proton service.</p> <p>The documentation for each action
      shows the Query API request parameters and the XML response.</p>
      <p>Alternatively, you can use the Amazon Web Services CLI to access an
      API. For more information, see the <a
      href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html">Amazon
      Web Services Command Line Interface User Guide</a>.</p> <p>The Proton
      service is a two-pronged automation framework. Administrators create
      service templates to provide standardized infrastructure and deployment
      tooling for serverless and container based applications. Developers, in
      turn, select from the available service templates to automate their
      application or service deployments.</p> <p>Because administrators define
      the infrastructure and tooling that Proton deploys and manages, they need
      permissions to use all of the listed API operations.</p> <p>When
      developers select a specific infrastructure and tooling set, Proton
      deploys their applications. To monitor their applications that are running
      on Proton, developers need permissions to the service <i>create</i>,
      <i>list</i>, <i>update</i> and <i>delete</i> API operations and the
      service instance <i>list</i> and <i>update</i> API operations.</p> <p>To
      learn more about Proton, see the <a
      href="https://docs.aws.amazon.com/proton/latest/userguide/Welcome.html">Proton
      User Guide</a>.</p> <p> <b>Ensuring Idempotency</b> </p> <p>When you make
      a mutating API request, the request typically returns a result before the
      asynchronous workflows of the operation are complete. Operations might
      also time out or encounter other server issues before they're complete,
      even if the request already returned a result. This might make it
      difficult to determine whether the request succeeded. Moreover, you might
      need to retry the request multiple times to ensure that the operation
      completes successfully. However, if the original request and the
      subsequent retries are successful, the operation occurs multiple times.
      This means that you might create more resources than you intended.</p> <p>
      <i>Idempotency</i> ensures that an API request action completes no more
      than one time. With an idempotent request, if the original request action
      completes successfully, any subsequent retries complete successfully
      without performing any further actions. However, the result might contain
      updated information, such as the current creation status.</p> <p>The
      following lists of APIs are grouped according to methods that ensure
      idempotency.</p> <p> <b>Idempotent create APIs with a client token</b>
      </p> <p>The API actions in this list support idempotency with the use of a
      <i>client token</i>. The corresponding Amazon Web Services CLI commands
      also support idempotency using a client token. A client token is a unique,
      case-sensitive string of up to 64 ASCII characters. To make an idempotent
      API request using one of these actions, specify a client token in the
      request. We recommend that you <i>don't</i> reuse the same client token
      for other API requests. If you don’t provide a client token for these
      APIs, a default client token is automatically provided by SDKs.</p>
      <p>Given a request action that has succeeded:</p> <p>If you retry the
      request using the same client token and the same parameters, the retry
      succeeds without performing any further actions other than returning the
      original resource detail data in the response.</p> <p>If you retry the
      request using the same client token, but one or more of the parameters are
      different, the retry throws a <code>ValidationException</code> with an
      <code>IdempotentParameterMismatch</code> error.</p> <p>Client tokens
      expire eight hours after a request is made. If you retry the request with
      the expired token, a new resource is created.</p> <p>If the original
      resource is deleted and you retry the request, a new resource is
      created.</p> <p>Idempotent create APIs with a client token:</p> <ul> <li>
      <p>CreateEnvironmentTemplateVersion</p> </li> <li>
      <p>CreateServiceTemplateVersion</p> </li> <li>
      <p>CreateEnvironmentAccountConnection</p> </li> </ul> <p> <b>Idempotent
      create APIs</b> </p> <p>Given a request action that has succeeded:</p>
      <p>If you retry the request with an API from this group, and the original
      resource <i>hasn't</i> been modified, the retry succeeds without
      performing any further actions other than returning the original resource
      detail data in the response.</p> <p>If the original resource has been
      modified, the retry throws a <code>ConflictException</code>.</p> <p>If you
      retry with different input parameters, the retry throws a
      <code>ValidationException</code> with an
      <code>IdempotentParameterMismatch</code> error.</p> <p>Idempotent create
      APIs:</p> <ul> <li> <p>CreateEnvironmentTemplate</p> </li> <li>
      <p>CreateServiceTemplate</p> </li> <li> <p>CreateEnvironment</p> </li>
      <li> <p>CreateService</p> </li> </ul> <p> <b>Idempotent delete APIs</b>
      </p> <p>Given a request action that has succeeded:</p> <p>When you retry
      the request with an API from this group and the resource was deleted, its
      metadata is returned in the response.</p> <p>If you retry and the resource
      doesn't exist, the response is empty.</p> <p>In both cases, the retry
      succeeds.</p> <p>Idempotent delete APIs:</p> <ul> <li>
      <p>DeleteEnvironmentTemplate</p> </li> <li>
      <p>DeleteEnvironmentTemplateVersion</p> </li> <li>
      <p>DeleteServiceTemplate</p> </li> <li>
      <p>DeleteServiceTemplateVersion</p> </li> <li>
      <p>DeleteEnvironmentAccountConnection</p> </li> </ul> <p> <b>Asynchronous
      idempotent delete APIs</b> </p> <p>Given a request action that has
      succeeded:</p> <p>If you retry the request with an API from this group, if
      the original request delete operation status is
      <code>DELETE_IN_PROGRESS</code>, the retry returns the resource detail
      data in the response without performing any further actions.</p> <p>If the
      original request delete operation is complete, a retry returns an empty
      response.</p> <p>Asynchronous idempotent delete APIs:</p> <ul> <li>
      <p>DeleteEnvironment</p> </li> <li> <p>DeleteService</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/proton-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/proton-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/proton-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:proton
  - name: privatenetworks
    description: >-
      <p>Amazon Web Services Private 5G is a managed service that makes it easy
      to deploy, operate, and scale your own private mobile network at your
      on-premises location. Private 5G provides the pre-configured hardware and
      software for mobile networks, helps automate setup, and scales capacity on
      demand to support additional devices as needed.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/privatenetworks-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/privatenetworks-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/privatenetworks-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:privatenetworks
  - name: polly
    description: >-
      <p>Amazon Polly is a web service that makes it easy to synthesize speech
      from text.</p> <p>The Amazon Polly service provides API operations for
      synthesizing high-quality speech from plain text and Speech Synthesis
      Markup Language (SSML), along with managing pronunciations lexicons that
      enable you to get the best results for your application domain.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/polly-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/polly-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/polly-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:polly
  - name: qconnect
    description: >-
      <note> <p> <b>Powered by Amazon Bedrock</b>: Amazon Web Services
      implements <a
      href="https://docs.aws.amazon.com/bedrock/latest/userguide/abuse-detection.html">automated
      abuse detection</a>. Because Amazon Q in Connect is built on Amazon
      Bedrock, users can take full advantage of the controls implemented in
      Amazon Bedrock to enforce safety, security, and the responsible use of
      artificial intelligence (AI).</p> </note> <p>Amazon Q in Connect is a
      generative AI customer service assistant. It is an LLM-enhanced evolution
      of Amazon Connect Wisdom that delivers real-time recommendations to help
      contact center agents resolve customer issues quickly and accurately.</p>
      <p>Amazon Q automatically detects customer intent during calls and chats
      using conversational analytics and natural language understanding (NLU).
      It then provides agents with immediate, real-time generative responses and
      suggested actions, and links to relevant documents and articles. Agents
      can also query Amazon Q directly using natural language or keywords to
      answer customer requests.</p> <p>Use the Amazon Q in Connect APIs to
      create an assistant and a knowledge base, for example, or manage content
      by uploading custom files.</p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-q-connect.html">Use
      Amazon Q in Connect for generative AI powered agent assistance in
      real-time</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/qconnect-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/qconnect-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/qconnect-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:qconnect
  - name: qbusiness
    description: >-
      <note> <p>Amazon Q is in preview release and is subject to change.</p>
      </note> <p>This is the <i>Amazon Q (for business use)</i> API Reference.
      Amazon Q is a fully managed, generative-AI powered enterprise chat
      assistant that you can deploy within your organization. Amazon Q enhances
      employee productivity by supporting key tasks such as question-answering,
      knowledge discovery, writing email messages, summarizing text, drafting
      document outlines, and brainstorming ideas. Users ask questions of Amazon
      Q and get answers that are presented in a conversational manner. For an
      introduction to the service, see the <a
      href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/what-is.html">
      <i>Amazon Q (for business use) Developer Guide</i> </a>.</p> <p>For an
      overview of the Amazon Q APIs, see <a
      href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/api-ref.html#api-overview">Overview
      of Amazon Q API operations</a>.</p> <p>For information about the IAM
      access control permissions you need to use this API, see <a
      href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/iam-roles.html">IAM
      roles for Amazon Q</a> in the <i>Amazon Q (for business use) Developer
      Guide</i>.</p> <p>You can use the following AWS SDKs to access Amazon Q
      APIs:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-cpp">AWS SDK for C++</a> </p>
      </li> <li> <p> <a href="https://docs.aws.amazon.com/sdk-for-go">AWS SDK
      for Go</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-java">AWS SDK for Java</a> </p>
      </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-javascript">AWS SDK for
      JavaScript</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-net">AWS SDK for .NET</a> </p>
      </li> <li> <p> <a href="https://docs.aws.amazon.com/pythonsdk">AWS SDK for
      Python (Boto3)</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sdk-for-ruby">AWS SDK for Ruby</a> </p>
      </li> </ul> <p>The following resources provide additional information
      about using the Amazon Q API:</p> <ul> <li> <p> <i> <a
      href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/setting-up.html">Setting
      up for Amazon Q</a> </i> </p> </li> <li> <p> <i> <a
      href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/qbusiness/index.html">Amazon
      Q CLI Reference</a> </i> </p> </li> <li> <p> <i> <a
      href="https://docs.aws.amazon.com/general/latest/gr/amazonq.html">Amazon
      Web Services General Reference</a> </i> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/qbusiness-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/qbusiness-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/qbusiness-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:qbusiness
  - name: pi
    description: >-
      <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS
      Performance Insights enables you to monitor and explore different
      dimensions of database load based on data captured from a running DB
      instance. The guide provides detailed information about Performance
      Insights data types, parameters and errors.</p> <p>When Performance
      Insights is enabled, the Amazon RDS Performance Insights API provides
      visibility into the performance of your DB instance. Amazon CloudWatch
      provides the authoritative source for Amazon Web Services service-vended
      monitoring metrics. Performance Insights offers a domain-specific view of
      DB load.</p> <p>DB load is measured as average active sessions.
      Performance Insights provides the data to API consumers as a
      two-dimensional time-series dataset. The time dimension provides DB load
      data for each time point in the queried time range. Each time point
      decomposes overall load in relation to the requested dimensions, measured
      at that time point. Examples include SQL, Wait event, User, and Host.</p>
      <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB
      instances, go to the <i> <a
      href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html">
      Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about
      Performance Insights and Amazon RDS DB instances, go to the <i> <a
      href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">
      Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about
      Performance Insights and Amazon DocumentDB clusters, go to the <i> <a
      href="https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html">
      Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pi-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pi-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pi-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pi
  - name: pricing
    description: >-
      <p>The Amazon Web Services Price List API is a centralized and convenient
      way to programmatically query Amazon Web Services for services, products,
      and pricing information. The Amazon Web Services Price List uses
      standardized product attributes such as <code>Location</code>,
      <code>Storage Class</code>, and <code>Operating System</code>, and
      provides prices at the SKU level. You can use the Amazon Web Services
      Price List to do the following:</p> <ul> <li> <p>Build cost control and
      scenario planning tools</p> </li> <li> <p>Reconcile billing data</p> </li>
      <li> <p>Forecast future spend for budgeting purposes</p> </li> <li>
      <p>Provide cost benefit analysis that compare your internal workloads with
      Amazon Web Services</p> </li> </ul> <p>Use <code>GetServices</code>
      without a service code to retrieve the service codes for all Amazon Web
      Services, then <code>GetServices</code> with a service code to retrieve
      the attribute names for that service. After you have the service code and
      attribute names, you can use <code>GetAttributeValues</code> to see what
      values are available for an attribute. With the service code and an
      attribute name and value, you can use <code>GetProducts</code> to find
      specific products that you're interested in, such as an
      <code>AmazonEC2</code> instance, with a <code>Provisioned IOPS</code>
      <code>volumeType</code>.</p> <p>For more information, see <a
      href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html">Using
      the Amazon Web Services Price List API</a> in the <i>Billing User
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/pricing-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/pricing-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/pricing-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:pricing
  - name: qldb-session
    description: >-
      <p>The transactional data APIs for Amazon QLDB</p> <note> <p>Instead of
      interacting directly with this API, we recommend using the QLDB driver or
      the QLDB shell to execute data transactions on a ledger.</p> <ul> <li>
      <p>If you are working with an AWS SDK, use the QLDB driver. The driver
      provides a high-level abstraction layer above this <i>QLDB Session</i>
      data plane and manages <code>SendCommand</code> API calls for you. For
      information and a list of supported programming languages, see <a
      href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html">Getting
      started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p>
      </li> <li> <p>If you are working with the AWS Command Line Interface (AWS
      CLI), use the QLDB shell. The shell is a command line interface that uses
      the QLDB driver to interact with a ledger. For information, see <a
      href="https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html">Accessing
      Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/qldb-session-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/qldb-session-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/qldb-session-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:qldb-session
  - name: ram
    description: >-
      <p>This is the <i>Resource Access Manager API Reference</i>. This
      documentation provides descriptions and syntax for each of the actions and
      data types in RAM. RAM is a service that helps you securely share your
      Amazon Web Services resources to other Amazon Web Services accounts. If
      you use Organizations to manage your accounts, then you can share your
      resources with your entire organization or to organizational units (OUs).
      For supported resource types, you can also share resources with individual
      Identity and Access Management (IAM) roles and users. </p> <p>To learn
      more about RAM, see the following resources:</p> <ul> <li> <p> <a
      href="http://aws.amazon.com/ram">Resource Access Manager product page</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/ram/latest/userguide/">Resource Access
      Manager User Guide</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ram-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ram-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ram-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ram
  - name: rds-data
    description: >-
      <p><fullname>RDS Data API</fullname> <p>Amazon RDS provides an HTTP
      endpoint to run SQL statements on an Amazon Aurora DB cluster. To run
      these statements, you use the RDS Data API (Data API).</p> <p>Data API is
      available with the following types of Aurora databases:</p> <ul> <li>
      <p>Aurora PostgreSQL - Serverless v2, Serverless v1, and provisioned</p>
      </li> <li> <p>Aurora MySQL - Serverless v1 only</p> </li> </ul> <p>For
      more information about the Data API, see <a
      href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
      RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.</p></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rds-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rds-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rds-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rds-data
  - name: quicksight
    description: >-
      <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight
      is a fully managed, serverless business intelligence service for the
      Amazon Web Services Cloud that makes it easy to extend data and insights
      to every user in your organization. This API reference contains
      documentation for a programming interface that you can use to manage
      Amazon QuickSight. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/quicksight-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/quicksight-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/quicksight-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:quicksight
  - name: redshift
    description: >-
      <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is
      an interface reference for Amazon Redshift. It contains documentation for
      one of the programming or command line interfaces you can use to manage
      Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which
      means that some interfaces may require techniques, such as polling or
      asynchronous callback handlers, to determine when a command has been
      applied. In this reference, the parameter descriptions indicate whether a
      change is applied immediately, on the next instance reboot, or during the
      next maintenance window. For a summary of the Amazon Redshift cluster
      management interfaces, go to <a
      href="https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html">Using
      the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift
      manages all the work of setting up, operating, and scaling a data
      warehouse: provisioning capacity, monitoring and backing up the cluster,
      and applying patches and upgrades to the Amazon Redshift engine. You can
      focus on using your data to acquire new insights for your business and
      customers.</p> <p>If you are a first-time user of Amazon Redshift, we
      recommend that you begin by reading the <a
      href="https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html">Amazon
      Redshift Getting Started Guide</a>.</p> <p>If you are a database
      developer, the <a
      href="https://docs.aws.amazon.com/redshift/latest/dg/welcome.html">Amazon
      Redshift Database Developer Guide</a> explains how to design, build,
      query, and maintain the databases that make up your data warehouse. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/redshift-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/redshift-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/redshift-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:redshift
  - name: rbin
    description: >-
      <p>This is the <i>Recycle Bin API Reference</i>. This documentation
      provides descriptions and syntax for each of the actions and data types in
      Recycle Bin.</p> <p>Recycle Bin is a resource recovery feature that
      enables you to restore accidentally deleted snapshots and EBS-backed AMIs.
      When using Recycle Bin, if your resources are deleted, they are retained
      in the Recycle Bin for a time period that you specify.</p> <p>You can
      restore a resource from the Recycle Bin at any time before its retention
      period expires. After you restore a resource from the Recycle Bin, the
      resource is removed from the Recycle Bin, and you can then use it in the
      same way you use any other resource of that type in your account. If the
      retention period expires and the resource is not restored, the resource is
      permanently deleted from the Recycle Bin and is no longer available for
      recovery. For more information about Recycle Bin, see <a
      href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">
      Recycle Bin</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rbin-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rbin-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rbin-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rbin
  - name: redshift-data
    description: >-
      <p>You can use the Amazon Redshift Data API to run queries on Amazon
      Redshift tables. You can run SQL statements, which are committed if the
      statement succeeds. </p> <p>For more information about the Amazon Redshift
      Data API and CLI usage examples, see <a
      href="https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html">Using
      the Amazon Redshift Data API</a> in the <i>Amazon Redshift Management
      Guide</i>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/redshift-data-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/redshift-data-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/redshift-data-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:redshift-data
  - name: qldb
    description: <p>The resource management API for Amazon QLDB</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/qldb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/qldb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/qldb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:qldb
  - name: rekognition
    description: >-
      <p>This is the API Reference for <a
      href="https://docs.aws.amazon.com/rekognition/latest/dg/images.html">Amazon
      Rekognition Image</a>, <a
      href="https://docs.aws.amazon.com/rekognition/latest/customlabels-dg/what-is.html">Amazon
      Rekognition Custom Labels</a>, <a
      href="https://docs.aws.amazon.com/rekognition/latest/dg/video.html">Amazon
      Rekognition Stored Video</a>, <a
      href="https://docs.aws.amazon.com/rekognition/latest/dg/streaming-video.html">Amazon
      Rekognition Streaming Video</a>. It provides descriptions of actions, data
      types, common parameters, and common errors.</p> <p> <b>Amazon Rekognition
      Image</b> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_AssociateFaces.html">AssociateFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CompareFaces.html">CompareFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateCollection.html">CreateCollection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateUser.html">CreateUser</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteCollection.html">DeleteCollection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteFaces.html">DeleteFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteUser.html">DeleteUser</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DescribeCollection.html">DescribeCollection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectFaces.html">DetectFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectLabels.html">DetectLabels</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectModerationLabels.html">DetectModerationLabels</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectProtectiveEquipment.html">DetectProtectiveEquipment</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectText.html">DetectText</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DisassociateFaces.html">DisassociateFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetCelebrityInfo.html">GetCelebrityInfo</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetMediaAnalysisJob.html">GetMediaAnalysisJob</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_IndexFaces.html">IndexFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListCollections.html">ListCollections</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListMediaAnalysisJob.html">ListMediaAnalysisJob</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListFaces.html">ListFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListFaces.html">ListUsers</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_RecognizeCelebrities.html">RecognizeCelebrities</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_SearchFaces.html">SearchFaces</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_SearchFacesByImage.html">SearchFacesByImage</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_SearchUsers.html">SearchUsers</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_SearchUsersByImage.html">SearchUsersByImage</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartMediaAnalysisJob.html">StartMediaAnalysisJob</a>
      </p> </li> </ul> <p> <b>Amazon Rekognition Custom Labels</b> </p> <ul>
      <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CopyProjectVersion.html">CopyProjectVersion</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateDataset.html">CreateDataset</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateProject.html">CreateProject</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateProjectVersion.html">CreateProjectVersion</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteDataset.html">DeleteDataset</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteProject.html">DeleteProject</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteProjectPolicy.html">DeleteProjectPolicy</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteProjectVersion.html">DeleteProjectVersion</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DescribeDataset.html">DescribeDataset</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DescribeProjects.html">DescribeProjects</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DescribeProjectVersions.html">DescribeProjectVersions</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectCustomLabels.html">DetectCustomLabels</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DistributeDatasetEntries.html">DistributeDatasetEntries</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListDatasetEntries.html">ListDatasetEntries</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListDatasetLabels.html">ListDatasetLabels</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListProjectPolicies.html">ListProjectPolicies</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_PutProjectPolicy.html">PutProjectPolicy</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartProjectVersion.html">StartProjectVersion</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StopProjectVersion.html">StopProjectVersion</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_UpdateDatasetEntries.html">UpdateDatasetEntries</a>
      </p> </li> </ul> <p> <b>Amazon Rekognition Video Stored Video</b> </p>
      <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetCelebrityRecognition.html">GetCelebrityRecognition</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetContentModeration.html">GetContentModeration</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetFaceDetection.html">GetFaceDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetFaceSearch.html">GetFaceSearch</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetLabelDetection.html">GetLabelDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetPersonTracking.html">GetPersonTracking</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetSegmentDetection.html">GetSegmentDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_GetTextDetection.html">GetTextDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartCelebrityRecognition.html">StartCelebrityRecognition</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartContentModeration.html">StartContentModeration</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartFaceDetection.html">StartFaceDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartFaceSearch.html">StartFaceSearch</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartLabelDetection.html">StartLabelDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartPersonTracking.html">StartPersonTracking</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartSegmentDetection.html">StartSegmentDetection</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartTextDetection.html">StartTextDetection</a>
      </p> </li> </ul> <p> <b>Amazon Rekognition Video Streaming Video</b> </p>
      <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateStreamProcessor.html">CreateStreamProcessor</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DeleteStreamProcessor.html">DeleteStreamProcessor</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DescribeStreamProcessor.html">DescribeStreamProcessor</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_ListStreamProcessors.html">ListStreamProcessors</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StartStreamProcessor.html">StartStreamProcessor</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_StopStreamProcessor.html">StopStreamProcessor</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/rekognition/latest/APIReference/API_UpdateStreamProcessor.html">UpdateStreamProcessor</a>
      </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rekognition-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rekognition-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rekognition-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rekognition
  - name: redshift-serverless
    description: >-
      <p>This is an interface reference for Amazon Redshift Serverless. It
      contains documentation for one of the programming or command line
      interfaces you can use to manage Amazon Redshift Serverless. </p>
      <p>Amazon Redshift Serverless automatically provisions data warehouse
      capacity and intelligently scales the underlying resources based on
      workload demands. Amazon Redshift Serverless adjusts capacity in seconds
      to deliver consistently high performance and simplified operations for
      even the most demanding and volatile workloads. Amazon Redshift Serverless
      lets you focus on using your data to acquire new insights for your
      business and customers. </p> <p> To learn more about Amazon Redshift
      Serverless, see <a
      href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-whatis.html">What
      is Amazon Redshift Serverless</a>. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/redshift-serverless-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/redshift-serverless-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/redshift-serverless-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:redshift-serverless
  - name: resource-explorer-2
    description: >-
      <p>Amazon Web Services Resource Explorer is a resource search and
      discovery service. By using Resource Explorer, you can explore your
      resources using an internet search engine-like experience. Examples of
      resources include Amazon Relational Database Service (Amazon RDS)
      instances, Amazon Simple Storage Service (Amazon S3) buckets, or Amazon
      DynamoDB tables. You can search for your resources using resource metadata
      like names, tags, and IDs. Resource Explorer can search across all of the
      Amazon Web Services Regions in your account in which you turn the service
      on, to simplify your cross-Region workloads.</p> <p>Resource Explorer
      scans the resources in each of the Amazon Web Services Regions in your
      Amazon Web Services account in which you turn on Resource Explorer.
      Resource Explorer <a
      href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/getting-started-terms-and-concepts.html#term-index">creates
      and maintains an index</a> in each Region, with the details of that
      Region's resources.</p> <p>You can <a
      href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region.html">search
      across all of the indexed Regions in your account</a> by designating one
      of your Amazon Web Services Regions to contain the aggregator index for
      the account. When you <a
      href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region-turn-on.html">promote
      a local index in a Region to become the aggregator index for the
      account</a>, Resource Explorer automatically replicates the index
      information from all local indexes in the other Regions to the aggregator
      index. Therefore, the Region with the aggregator index has a copy of all
      resource information for all Regions in the account where you turned on
      Resource Explorer. As a result, views in the aggregator index Region
      include resources from all of the indexed Regions in your account.</p>
      <p>For more information about Amazon Web Services Resource Explorer,
      including how to enable and configure the service, see the <a
      href="https://docs.aws.amazon.com/resource-explorer/latest/userguide/">Amazon
      Web Services Resource Explorer User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/resource-explorer-2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/resource-explorer-2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/resource-explorer-2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:resource-explorer-2
  - name: resourcegroupstaggingapi
    description: <fullname>Resource Groups Tagging API</fullname>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/resourcegroupstaggingapi-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/resourcegroupstaggingapi-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/resourcegroupstaggingapi-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:resourcegroupstaggingapi
  - name: robomaker
    description: >-
      <p>This section provides documentation for the AWS RoboMaker API
      operations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/robomaker-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/robomaker-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/robomaker-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:robomaker
  - name: repostspace
    description: >-
      <p>AWS re:Post Private is a private version of AWS re:Post for enterprises
      with Enterprise Support or Enterprise On-Ramp Support plans. It provides
      access to knowledge and experts to accelerate cloud adoption and increase
      developer productivity. With your organization-specific private re:Post,
      you can build an organization-specific developer community that drives
      efficiencies at scale and provides access to valuable knowledge resources.
      Additionally, re:Post Private centralizes trusted AWS technical content
      and offers private discussion forums to improve how your teams collaborate
      internally and with AWS to remove technical obstacles, accelerate
      innovation, and scale more efficiently in the cloud.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/repostspace-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/repostspace-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/repostspace-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:repostspace
  - name: rds
    description: null
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rds-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rds-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rds-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rds
  - name: rolesanywhere
    description: >-
      <p>Identity and Access Management Roles Anywhere provides a secure way for
      your workloads such as servers, containers, and applications that run
      outside of Amazon Web Services to obtain temporary Amazon Web Services
      credentials. Your workloads can use the same IAM policies and roles you
      have for native Amazon Web Services applications to access Amazon Web
      Services resources. Using IAM Roles Anywhere eliminates the need to manage
      long-term credentials for workloads running outside of Amazon Web
      Services.</p> <p> To use IAM Roles Anywhere, your workloads must use X.509
      certificates issued by their certificate authority (CA). You register the
      CA with IAM Roles Anywhere as a trust anchor to establish trust between
      your public key infrastructure (PKI) and IAM Roles Anywhere. If you don't
      manage your own PKI system, you can use Private Certificate Authority to
      create a CA and then use that to establish trust with IAM Roles Anywhere.
      </p> <p>This guide describes the IAM Roles Anywhere operations that you
      can call programmatically. For more information about IAM Roles Anywhere,
      see the <a
      href="https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html">IAM
      Roles Anywhere User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rolesanywhere-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rolesanywhere-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rolesanywhere-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rolesanywhere
  - name: resource-groups
    description: >-
      <p>Resource Groups lets you organize Amazon Web Services resources such as
      Amazon Elastic Compute Cloud instances, Amazon Relational Database Service
      databases, and Amazon Simple Storage Service buckets into groups using
      criteria that you define as tags. A resource group is a collection of
      resources that match the resource types specified in a query, and share
      one or more tags or portions of tags. You can create a group of resources
      based on their roles in your cloud infrastructure, lifecycle stages,
      regions, application layers, or virtually any criteria. Resource Groups
      enable you to automate management tasks, such as those in Amazon Web
      Services Systems Manager Automation documents, on tag-related resources in
      Amazon Web Services Systems Manager. Groups of tagged resources also let
      you quickly view a custom console in Amazon Web Services Systems Manager
      that shows Config compliance and other monitoring data about member
      resources.</p> <p>To create a resource group, build a resource query, and
      specify tags that identify the criteria that members of the group have in
      common. Tags are key-value pairs.</p> <p>For more information about
      Resource Groups, see the <a
      href="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html">Resource
      Groups User Guide</a>.</p> <p>Resource Groups uses a REST-compliant API
      that you can use to perform the following types of operations.</p> <ul>
      <li> <p>Create, Read, Update, and Delete (CRUD) operations on resource
      groups and resource query entities</p> </li> <li> <p>Applying, editing,
      and removing tags from resource groups</p> </li> <li> <p>Resolving
      resource group member ARNs so they can be returned as search results</p>
      </li> <li> <p>Getting data about resources that are members of a group</p>
      </li> <li> <p>Searching Amazon Web Services resources based on a resource
      query</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/resource-groups-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/resource-groups-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/resource-groups-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:resource-groups
  - name: route53-recovery-cluster
    description: >-
      <p>Welcome to the Routing Control (Recovery Cluster) API Reference Guide
      for Amazon Route 53 Application Recovery Controller.</p> <p>With Route 53
      ARC, you can use routing control with extreme reliability to recover
      applications by rerouting traffic across Availability Zones or Amazon Web
      Services Regions. Routing controls are simple on/off switches hosted on a
      highly available cluster in Route 53 ARC. A cluster provides a set of five
      redundant Regional endpoints against which you can run API calls to get or
      update the state of routing controls. To implement failover, you set one
      routing control to ON and another one to OFF, to reroute traffic from one
      Availability Zone or Amazon Web Services Region to another. </p> <p> <i>Be
      aware that you must specify a Regional endpoint for a cluster when you
      work with API cluster operations to get or update routing control states
      in Route 53 ARC.</i> In addition, you must specify the US West (Oregon)
      Region for Route 53 ARC API calls. For example, use the parameter
      <code>--region us-west-2</code> with AWS CLI commands. For more
      information, see <a
      href="https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.update.api.html">
      Get and update routing control states using the API</a> in the Amazon
      Route 53 Application Recovery Controller Developer Guide.</p> <p>This API
      guide includes information about the API operations for how to get and
      update routing control states in Route 53 ARC. To work with routing
      control in Route 53 ARC, you must first create the required components
      (clusters, control panels, and routing controls) using the recovery
      cluster configuration API.</p> <p>For more information about working with
      routing control in Route 53 ARC, see the following:</p> <ul> <li>
      <p>Create clusters, control panels, and routing controls by using API
      operations. For more information, see the <a
      href="https://docs.aws.amazon.com/recovery-cluster/latest/api/">Recovery
      Control Configuration API Reference Guide for Amazon Route 53 Application
      Recovery Controller</a>.</p> </li> <li> <p>Learn about the components in
      recovery control, including clusters, routing controls, and control
      panels, and how to work with Route 53 ARC in the Amazon Web Services
      console. For more information, see <a
      href="https://docs.aws.amazon.com/r53recovery/latest/dg/introduction-components.html#introduction-components-routing">
      Recovery control components</a> in the Amazon Route 53 Application
      Recovery Controller Developer Guide.</p> </li> <li> <p>Route 53 ARC also
      provides readiness checks that continually audit resources to help make
      sure that your applications are scaled and ready to handle failover
      traffic. For more information about the related API operations, see the <a
      href="https://docs.aws.amazon.com/recovery-readiness/latest/api/">Recovery
      Readiness API Reference Guide for Amazon Route 53 Application Recovery
      Controller</a>.</p> </li> <li> <p>For more information about creating
      resilient applications and preparing for recovery readiness with Route 53
      ARC, see the <a
      href="https://docs.aws.amazon.com/r53recovery/latest/dg/">Amazon Route 53
      Application Recovery Controller Developer Guide</a>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53-recovery-cluster-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53-recovery-cluster-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/route53-recovery-cluster-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53-recovery-cluster
  - name: route53
    description: "<p>Amazon Route\_53 is a highly available and scalable Domain Name System (DNS) web service.</p> <p>You can use Route\_53 to:</p> <ul> <li> <p>Register domain names.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-domain-registration.html\">How domain registration works</a>.</p> </li> <li> <p>Route internet traffic to the resources for your domain</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-dns-service.html\">How internet traffic is routed to your website or web application</a>.</p> </li> <li> <p>Check the health of your resources.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/welcome-health-checks.html\">How Route\_53 checks the health of your resources</a>.</p> </li> </ul>"
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/route53-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53
  - name: route53-recovery-readiness
    description: <p>Recovery readiness</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53-recovery-readiness-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53-recovery-readiness-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/route53-recovery-readiness-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53-recovery-readiness
  - name: resiliencehub
    description: >-
      <p>Resilience Hub helps you proactively prepare and protect your Amazon
      Web Services applications from disruptions. It offers continual resiliency
      assessment and validation that integrates into your software development
      lifecycle. This enables you to uncover resiliency weaknesses, ensure
      recovery time objective (RTO) and recovery point objective (RPO) targets
      for your applications are met, and resolve issues before they are released
      into production. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/resiliencehub-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/resiliencehub-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/resiliencehub-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:resiliencehub
  - name: route53domains
    description: >-
      <p>Amazon Route 53 API actions let you register domain names and perform
      related operations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53domains-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53domains-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/route53domains-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53domains
  - name: route53resolver
    description: >-
      <p>When you create a VPC using Amazon VPC, you automatically get DNS
      resolution within the VPC from Route 53 Resolver. By default, Resolver
      answers DNS queries for VPC domain names such as domain names for EC2
      instances or Elastic Load Balancing load balancers. Resolver performs
      recursive lookups against public name servers for all other domain
      names.</p> <p>You can also configure DNS resolution between your VPC and
      your network over a Direct Connect or VPN connection:</p> <p> <b>Forward
      DNS queries from resolvers on your network to Route 53 Resolver</b> </p>
      <p>DNS resolvers on your network can forward DNS queries to Resolver in a
      specified VPC. This allows your DNS resolvers to easily resolve domain
      names for Amazon Web Services resources such as EC2 instances or records
      in a Route 53 private hosted zone. For more information, see <a
      href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc">How
      DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a>
      in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally
      forward queries from a VPC to resolvers on your network</b> </p> <p>You
      can configure Resolver to forward queries that it receives from EC2
      instances in your VPCs to DNS resolvers on your network. To forward
      selected queries, you create Resolver rules that specify the domain names
      for the DNS queries that you want to forward (such as example.com), and
      the IP addresses of the DNS resolvers on your network that you want to
      forward the queries to. If a query matches multiple rules (example.com,
      acme.example.com), Resolver chooses the rule with the most specific match
      (acme.example.com) and forwards the query to the IP addresses that you
      specified in that rule. For more information, see <a
      href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network">How
      Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a>
      in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC,
      Resolver is Regional. In each Region where you have VPCs, you can choose
      whether to forward queries from your VPCs to your network (outbound
      queries), from your network to your VPCs (inbound queries), or both.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53resolver-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53resolver-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/route53resolver-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53resolver
  - name: runtime.lex
    description: >-
      <p>Amazon Lex provides both build and runtime endpoints. Each endpoint
      provides a set of operations (API). Your conversational bot uses the
      runtime API to understand user utterances (user input text or voice). For
      example, suppose a user says "I want pizza", your bot sends this input to
      Amazon Lex using the runtime API. Amazon Lex recognizes that the user
      request is for the OrderPizza intent (one of the intents defined in the
      bot). Then Amazon Lex engages in user conversation on behalf of the bot to
      elicit required information (slot values, such as pizza size and crust
      type), and then performs fulfillment activity (that you configured when
      you created the bot). You use the build-time API to create and manage your
      Amazon Lex bot. For a list of build-time operations, see the build-time
      API, . </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/runtimelex-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/runtimelex-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/runtimelex-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:runtimelex
  - name: rum
    description: >-
      <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to
      collect client-side data about your web application performance from
      actual user sessions in real time. The data collected includes page load
      times, client-side errors, and user behavior. When you view this data, you
      can see it all aggregated together and also see breakdowns by the browsers
      and devices that your customers use.</p> <p>You can use the collected data
      to quickly identify and debug client-side performance issues. CloudWatch
      RUM helps you visualize anomalies in your application performance and find
      relevant debugging data such as error messages, stack traces, and user
      sessions. You can also use RUM to understand the range of end-user impact
      including the number of users, geolocations, and browsers used.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/rum-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/rum-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/rum-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:rum
  - name: runtime.lex.v2
    description: >-
      <p>This section contains documentation for the Amazon Lex V2 Runtime V2
      API operations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/runtimelexv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/runtimelexv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/runtimelexv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:runtimelexv2
  - name: route53-recovery-control-config
    description: >-
      <p>Recovery Control Configuration API Reference for Amazon Route 53
      Application Recovery Controller</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/route53-recovery-control-config-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/route53-recovery-control-config-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/route53-recovery-control-config-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:route53-recovery-control-config
  - name: s3control
    description: >-
      <p> Amazon Web Services S3 Control provides access to Amazon S3 control
      plane actions. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/s3control-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/s3control-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/s3control-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:s3control
  - name: sagemaker-a2i-runtime
    description: >-
      <p>Amazon Augmented AI (Amazon A2I) adds the benefit of human judgment to
      any machine learning application. When an AI application can't evaluate
      data with a high degree of confidence, human reviewers can take over. This
      human review is called a human review workflow. To create and start a
      human review workflow, you need three resources: a <i>worker task
      template</i>, a <i>flow definition</i>, and a <i>human loop</i>.</p>
      <p>For information about these resources and prerequisites for using
      Amazon A2I, see <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-getting-started.html">Get
      Started with Amazon Augmented AI</a> in the Amazon SageMaker Developer
      Guide.</p> <p>This API reference includes information about API actions
      and data types that you can use to interact with Amazon A2I
      programmatically. Use this guide to:</p> <ul> <li> <p>Start a human loop
      with the <code>StartHumanLoop</code> operation when using Amazon A2I with
      a <i>custom task type</i>. To learn more about the difference between
      custom and built-in task types, see <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-task-types-general.html">Use
      Task Types </a>. To learn how to start a human loop using this API, see <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-start-human-loop.html#a2i-instructions-starthumanloop">Create
      and Start a Human Loop for a Custom Task Type </a> in the Amazon SageMaker
      Developer Guide.</p> </li> <li> <p>Manage your human loops. You can list
      all human loops that you have created, describe individual human loops,
      and stop and delete human loops. To learn more, see <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-monitor-humanloop-results.html">Monitor
      and Manage Your Human Loop </a> in the Amazon SageMaker Developer
      Guide.</p> </li> </ul> <p>Amazon A2I integrates APIs from various AWS
      services to create and start human review workflows for those services. To
      learn how Amazon A2I uses these APIs, see <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-api-references.html">Use
      APIs in Amazon A2I</a> in the Amazon SageMaker Developer Guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-a2i-runtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-a2i-runtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sagemaker-a2i-runtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker-a2i-runtime
  - name: sagemaker
    description: >-
      <p>Provides APIs for creating and managing SageMaker resources. </p>
      <p>Other Resources:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user">SageMaker
      Developer Guide</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html">Amazon
      Augmented AI Runtime API Reference</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sagemaker-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker
  - name: s3
    description: <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/s3-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/s3-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/s3-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:s3
  - name: sagemaker-edge
    description: >-
      <p>SageMaker Edge Manager dataplane service for communicating with active
      agents.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-edge-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-edge-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sagemaker-edge-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker-edge
  - name: sagemaker-featurestore-runtime
    description: >-
      <p>Contains all data plane API operations and data types for the Amazon
      SageMaker Feature Store. Use this API to put, delete, and retrieve (get)
      features from a feature store.</p> <p>Use the following operations to
      configure your <code>OnlineStore</code> and <code>OfflineStore</code>
      features, and to create and manage feature groups:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html">CreateFeatureGroup</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html">DeleteFeatureGroup</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html">DescribeFeatureGroup</a>
      </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html">ListFeatureGroups</a>
      </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-featurestore-runtime-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-featurestore-runtime-openapi-search.yml
      - type: API Evangelist Ratings
        url: >-
          overlays/sagemaker-featurestore-runtime-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker-featurestore-runtime
  - name: s3outposts
    description: <p>Amazon S3 on Outposts provides access to S3 on Outposts operations.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/s3outposts-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/s3outposts-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/s3outposts-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:s3outposts
  - name: sagemaker-metrics
    description: >-
      <p>Contains all data plane API operations and data types for Amazon
      SageMaker Metrics. Use these APIs to put and retrieve (get) features
      related to your training run.</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_metrics_BatchPutMetrics.html">BatchPutMetrics</a>
      </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-metrics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-metrics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sagemaker-metrics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker-metrics
  - name: sagemaker-geospatial
    description: >-
      <p>Provides APIs for creating and managing SageMaker geospatial
      resources.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sagemaker-geospatial-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sagemaker-geospatial-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sagemaker-geospatial-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sagemaker-geospatial
  - name: savingsplans
    description: >-
      <p>Savings Plans are a pricing model that offer significant savings on AWS
      usage (for example, on Amazon EC2 instances). You commit to a consistent
      amount of usage, in USD per hour, for a term of 1 or 3 years, and receive
      a lower price for that usage. For more information, see the <a
      href="https://docs.aws.amazon.com/savingsplans/latest/userguide/">AWS
      Savings Plans User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/savingsplans-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/savingsplans-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/savingsplans-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:savingsplans
  - name: schemas
    description: <p>Amazon EventBridge Schema Registry</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/schemas-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/schemas-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/schemas-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:schemas
  - name: scheduler
    description: >-
      <p> Amazon EventBridge Scheduler is a serverless scheduler that allows you
      to create, run, and manage tasks from one central, managed service.
      EventBridge Scheduler delivers your tasks reliably, with built-in
      mechanisms that adjust your schedules based on the availability of
      downstream targets. The following reference lists the available API
      actions, and data types for EventBridge Scheduler. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/scheduler-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/scheduler-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/scheduler-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:scheduler
  - name: sdb
    description: >-
      Amazon SimpleDB is a web service providing the core database functions of
      data indexing and querying in the cloud. By offloading the time and effort
      associated with building and operating a web-scale database, SimpleDB
      provides developers the freedom to focus on application development. <p> A
      traditional, clustered relational database requires a sizable upfront
      capital outlay, is complex to design, and often requires extensive and
      repetitive database administration. Amazon SimpleDB is dramatically
      simpler, requiring no schema, automatically indexing your data and
      providing a simple API for storage and access. This approach eliminates
      the administrative burden of data modeling, index maintenance, and
      performance tuning. Developers gain access to this functionality within
      Amazon's proven computing environment, are able to scale instantly, and
      pay only for what they use. </p> <p> Visit <a
      href="http://aws.amazon.com/simpledb/">http://aws.amazon.com/simpledb/</a>
      for more information. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sdb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sdb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sdb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sdb
  - name: secretsmanager
    description: >-
      <fullname>Amazon Web Services Secrets Manager</fullname> <p>Amazon Web
      Services Secrets Manager provides a service to enable you to store,
      manage, and retrieve, secrets.</p> <p>This guide provides descriptions of
      the Secrets Manager API. For more information about using this service,
      see the <a
      href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/introduction.html">Amazon
      Web Services Secrets Manager User Guide</a>.</p> <p> <b>API Version</b>
      </p> <p>This version of the Secrets Manager API Reference documents the
      Secrets Manager API version 2017-10-17.</p> <p>For a list of endpoints,
      see <a
      href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/asm_access.html#endpoints">Amazon
      Web Services Secrets Manager endpoints</a>.</p> <p> <b>Support and
      Feedback for Amazon Web Services Secrets Manager</b> </p> <p>We welcome
      your feedback. Send your comments to <a
      href="mailto:awssecretsmanager-feedback@amazon.com">awssecretsmanager-feedback@amazon.com</a>,
      or post your feedback and questions in the <a
      href="http://forums.aws.amazon.com/forum.jspa?forumID=296">Amazon Web
      Services Secrets Manager Discussion Forum</a>. For more information about
      the Amazon Web Services Discussion Forums, see <a
      href="http://forums.aws.amazon.com/help.jspa">Forums Help</a>.</p> <p>
      <b>Logging API Requests</b> </p> <p>Amazon Web Services Secrets Manager
      supports Amazon Web Services CloudTrail, a service that records Amazon Web
      Services API calls for your Amazon Web Services account and delivers log
      files to an Amazon S3 bucket. By using information that's collected by
      Amazon Web Services CloudTrail, you can determine the requests
      successfully made to Secrets Manager, who made the request, when it was
      made, and so on. For more about Amazon Web Services Secrets Manager and
      support for Amazon Web Services CloudTrail, see <a
      href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring.html#monitoring_cloudtrail">Logging
      Amazon Web Services Secrets Manager Events with Amazon Web Services
      CloudTrail</a> in the <i>Amazon Web Services Secrets Manager User
      Guide</i>. To learn more about CloudTrail, including enabling it and find
      your log files, see the <a
      href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">Amazon
      Web Services CloudTrail User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/secretsmanager-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/secretsmanager-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/secretsmanager-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:secretsmanager
  - name: serverlessrepo
    description: >-
      <p>The AWS Serverless Application Repository makes it easy for developers
      and enterprises to quickly find
       and deploy serverless applications in the AWS Cloud. For more information about serverless applications,
       see Serverless Computing and Applications on the AWS website.</p><p>The AWS Serverless Application Repository is deeply integrated with the AWS Lambda console, so that developers of 
       all levels can get started with serverless computing without needing to learn anything new. You can use category 
       keywords to browse for applications such as web and mobile backends, data processing applications, or chatbots. 
       You can also search for applications by name, publisher, or event source. To use an application, you simply choose it, 
       configure any required fields, and deploy it with a few clicks. </p><p>You can also easily publish applications, sharing them publicly with the community at large, or privately
       within your team or across your organization. To publish a serverless application (or app), you can use the
       AWS Management Console, AWS Command Line Interface (AWS CLI), or AWS SDKs to upload the code. Along with the
       code, you upload a simple manifest file, also known as the AWS Serverless Application Model (AWS SAM) template.
       For more information about AWS SAM, see AWS Serverless Application Model (AWS SAM) on the AWS Labs
       GitHub repository.</p><p>The AWS Serverless Application Repository Developer Guide contains more information about the two developer
       experiences available:</p><ul>
       <li>
       <p>Consuming Applications – Browse for applications and view information about them, including
       source code and readme files. Also install, configure, and deploy applications of your choosing. </p>
       <p>Publishing Applications – Configure and upload applications to make them available to other
       developers, and publish new versions of applications. </p>
       </li>
       </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/serverlessrepo-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/serverlessrepo-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/serverlessrepo-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:serverlessrepo
  - name: securitylake
    description: >-
      <p>Amazon Security Lake is a fully managed security data lake service. You
      can use Security Lake to automatically centralize security data from
      cloud, on-premises, and custom sources into a data lake that's stored in
      your Amazon Web Services account. Amazon Web Services Organizations is an
      account management service that lets you consolidate multiple Amazon Web
      Services accounts into an organization that you create and centrally
      manage. With Organizations, you can create member accounts and invite
      existing accounts to join your organization. Security Lake helps you
      analyze security data for a more complete understanding of your security
      posture across the entire organization. It can also help you improve the
      protection of your workloads, applications, and data.</p> <p>The data lake
      is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you
      retain ownership over your data.</p> <p>Amazon Security Lake integrates
      with CloudTrail, a service that provides a record of actions taken by a
      user, role, or an Amazon Web Services service. In Security Lake,
      CloudTrail captures API calls for Security Lake as events. The calls
      captured include calls from the Security Lake console and code calls to
      the Security Lake API operations. If you create a trail, you can enable
      continuous delivery of CloudTrail events to an Amazon S3 bucket, including
      events for Security Lake. If you don't configure a trail, you can still
      view the most recent events in the CloudTrail console in Event history.
      Using the information collected by CloudTrail you can determine the
      request that was made to Security Lake, the IP address from which the
      request was made, who made the request, when it was made, and additional
      details. To learn more about Security Lake information in CloudTrail, see
      the <a
      href="https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html">Amazon
      Security Lake User Guide</a>.</p> <p>Security Lake automates the
      collection of security-related log and event data from integrated Amazon
      Web Services and third-party services. It also helps you manage the
      lifecycle of data with customizable retention and replication settings.
      Security Lake converts ingested data into Apache Parquet format and a
      standard open-source schema called the Open Cybersecurity Schema Framework
      (OCSF).</p> <p>Other Amazon Web Services and third-party services can
      subscribe to the data that's stored in Security Lake for incident response
      and security data analytics.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/securitylake-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/securitylake-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/securitylake-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:securitylake
  - name: service-quotas
    description: >-
      <p>With Service Quotas, you can view and manage your quotas easily as your
      Amazon Web Services workloads grow. Quotas, also referred to as limits,
      are the maximum number of resources that you can create in your Amazon Web
      Services account. For more information, see the <a
      href="https://docs.aws.amazon.com/servicequotas/latest/userguide/">Service
      Quotas User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/service-quotas-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/service-quotas-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/service-quotas-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:service-quotas
  - name: runtime.sagemaker
    description: <p> The Amazon SageMaker runtime API. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/runtimesagemaker-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/runtimesagemaker-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/runtimesagemaker-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:runtimesagemaker
  - name: servicediscovery
    description: >-
      <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public
      DNS, private DNS, or HTTP namespaces that your microservice applications
      run in. When an instance becomes available, you can call the Cloud Map API
      to register the instance with Cloud Map. For public or private DNS
      namespaces, Cloud Map automatically creates DNS records and an optional
      health check. Clients that submit public or private DNS queries, or HTTP
      requests, for the service receive an answer that contains up to eight
      healthy records. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/servicediscovery-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/servicediscovery-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/servicediscovery-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:servicediscovery
  - name: servicecatalog-appregistry
    description: >-
      <p> Amazon Web Services Service Catalog AppRegistry enables organizations
      to understand the application context of their Amazon Web Services
      resources. AppRegistry provides a repository of your applications, their
      resources, and the application metadata that you use within your
      enterprise.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/servicecatalog-appregistry-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/servicecatalog-appregistry-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/servicecatalog-appregistry-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:servicecatalog-appregistry
  - name: sesv2
    description: >-
      <fullname>Amazon SES API v2</fullname> <p> <a
      href="http://aws.amazon.com/ses">Amazon SES</a> is an Amazon Web Services
      service that you can use to send email messages to your customers.</p>
      <p>If you're new to Amazon SES API v2, you might find it helpful to review
      the <a
      href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon
      Simple Email Service Developer Guide</a>. The <i>Amazon SES Developer
      Guide</i> provides information and code samples that demonstrate how to
      use Amazon SES API v2 features programmatically.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sesv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sesv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sesv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sesv2
  - name: shield
    description: >-
      <fullname>Shield Advanced</fullname> <p>This is the <i>Shield Advanced API
      Reference</i>. This guide is for developers who need detailed information
      about the Shield Advanced API actions, data types, and errors. For
      detailed information about WAF and Shield Advanced features and an
      overview of how to use the WAF and Shield Advanced APIs, see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/">WAF and
      Shield Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/shield-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/shield-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/shield-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:shield
  - name: simspaceweaver
    description: >-
      <p>SimSpace Weaver (SimSpace Weaver) is a service that you can use to
      build and run large-scale spatial simulations in the Amazon Web Services
      Cloud. For example, you can create crowd simulations, large real-world
      environments, and immersive and interactive experiences. For more
      information about SimSpace Weaver, see the <i> <a
      href="https://docs.aws.amazon.com/simspaceweaver/latest/userguide/">SimSpace
      Weaver User Guide</a> </i>.</p> <p>This API reference describes the API
      operations and data types that you can use to communicate directly with
      SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver
      app SDK, which you use for app development. The SimSpace Weaver app SDK
      API reference is included in the SimSpace Weaver app SDK documentation.
      This documentation is part of the SimSpace Weaver app SDK distributable
      package.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/simspaceweaver-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/simspaceweaver-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/simspaceweaver-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:simspaceweaver
  - name: sms
    description: >-
      <important> <p> <b>Product update</b> </p> <p>We recommend <a
      href="http://aws.amazon.com/application-migration-service">Amazon Web
      Services Application Migration Service</a> (Amazon Web Services MGN) as
      the primary migration service for lift-and-shift migrations. If Amazon Web
      Services MGN is unavailable in a specific Amazon Web Services Region, you
      can use the Server Migration Service APIs through March 2023.</p>
      </important> <p>Server Migration Service (Server Migration Service) makes
      it easier and faster for you to migrate your on-premises workloads to
      Amazon Web Services. To learn more about Server Migration Service, see the
      following resources:</p> <ul> <li> <p> <a
      href="http://aws.amazon.com/server-migration-service/">Server Migration
      Service product page</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/server-migration-service/latest/userguide/">Server
      Migration Service User Guide</a> </p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sms-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sms-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sms-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sms
  - name: sms-voice
    description: Pinpoint SMS and Voice Messaging public facing APIs
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sms-voice-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sms-voice-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sms-voice-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sms-voice
  - name: snow-device-management
    description: <p>Amazon Web Services Snow Device Management documentation.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/snow-device-management-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/snow-device-management-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/snow-device-management-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:snow-device-management
  - name: securityhub
    description: >-
      <p>Security Hub provides you with a comprehensive view of your security
      state in Amazon Web Services and helps you assess your Amazon Web Services
      environment against security industry standards and best practices.</p>
      <p>Security Hub collects security data across Amazon Web Services
      accounts, Amazon Web Services, and supported third-party products and
      helps you analyze your security trends and identify the highest priority
      security issues.</p> <p>To help you manage the security state of your
      organization, Security Hub supports multiple security standards. These
      include the Amazon Web Services Foundational Security Best Practices
      (FSBP) standard developed by Amazon Web Services, and external compliance
      frameworks such as the Center for Internet Security (CIS), the Payment
      Card Industry Data Security Standard (PCI DSS), and the National Institute
      of Standards and Technology (NIST). Each standard includes several
      security controls, each of which represents a security best practice.
      Security Hub runs checks against security controls and generates control
      findings to help you assess your compliance against security best
      practices.</p> <p>In addition to generating control findings, Security Hub
      also receives findings from other Amazon Web Services, such as Amazon
      GuardDuty and Amazon Inspector, and supported third-party products. This
      gives you a single pane of glass into a variety of security-related
      issues. You can also send Security Hub findings to other Amazon Web
      Services and supported third-party products.</p> <p>Security Hub offers
      automation features that help you triage and remediate security issues.
      For example, you can use automation rules to automatically update critical
      findings when a security check fails. You can also leverage the
      integration with Amazon EventBridge to trigger automatic responses to
      specific findings.</p> <p>This guide, the <i>Security Hub API
      Reference</i>, provides information about the Security Hub API. This
      includes supported resources, HTTP methods, parameters, and schemas. If
      you're new to Security Hub, you might find it helpful to also review the
      <a
      href="https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html">
      <i>Security Hub User Guide</i> </a>. The user guide explains key concepts
      and provides procedures that demonstrate how to use Security Hub features.
      It also provides information about topics such as integrating Security Hub
      with other Amazon Web Services.</p> <p>In addition to interacting with
      Security Hub by making calls to the Security Hub API, you can use a
      current version of an Amazon Web Services command line tool or SDK. Amazon
      Web Services provides tools and SDKs that consist of libraries and sample
      code for various languages and platforms, such as PowerShell, Java, Go,
      Python, C++, and .NET. These tools and SDKs provide convenient,
      programmatic access to Security Hub and other Amazon Web Services . They
      also handle tasks such as signing requests, managing errors, and retrying
      requests automatically. For information about installing and using the
      Amazon Web Services tools and SDKs, see <a
      href="http://aws.amazon.com/developer/tools/">Tools to Build on Amazon Web
      Services</a>.</p> <p>With the exception of operations that are related to
      central configuration, Security Hub API requests are executed only in the
      Amazon Web Services Region that is currently active or in the specific
      Amazon Web Services Region that you specify in your request. Any
      configuration or settings change that results from the operation is
      applied only to that Region. To make the same change in other Regions,
      call the same API operation in each Region in which you want to apply the
      change. When you use central configuration, API requests for enabling
      Security Hub, standards, and controls are executed in the home Region and
      all linked Regions. For a list of central configuration operations, see
      the <a
      href="https://docs.aws.amazon.com/securityhub/latest/userguide/central-configuration-intro.html#central-configuration-concepts">Central
      configuration terms and concepts</a> section of the <i>Security Hub User
      Guide</i>.</p> <p>The following throttling limits apply to Security Hub
      API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> -
      <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of
      1 request per second.</p> </li> <li> <p> <code>GetFindings</code> -
      <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code>
      of 6 requests per second.</p> </li> <li> <p>
      <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests
      per second. <code>BurstLimit</code> of 30 requests per second.</p> </li>
      <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10
      requests per second. <code>BurstLimit</code> of 30 requests per
      second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> -
      <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of
      5 requests per second.</p> </li> <li> <p>All other operations -
      <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code>
      of 30 requests per second.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/securityhub-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/securityhub-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/securityhub-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:securityhub
  - name: snowball
    description: >-
      <p>The Amazon Web Services Snow Family provides a petabyte-scale data
      transport solution that uses secure devices to transfer large amounts of
      data between your on-premises data centers and Amazon Simple Storage
      Service (Amazon S3). The Snow Family commands described here provide
      access to the same functionality that is available in the Amazon Web
      Services Snow Family Management Console, which enables you to create and
      manage jobs for a Snow Family device. To transfer data locally with a Snow
      Family device, you'll need to use the Snowball Edge client or the Amazon
      S3 API Interface for Snowball or OpsHub for Snow Family. For more
      information, see the <a
      href="https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html">User
      Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/snowball-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/snowball-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/snowball-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:snowball
  - name: sns
    description: >-
      <fullname>Amazon Simple Notification Service</fullname> <p>Amazon Simple
      Notification Service (Amazon SNS) is a web service that enables you to
      build distributed web-enabled applications. Applications can use Amazon
      SNS to easily push real-time notification messages to interested
      subscribers over multiple delivery protocols. For more information about
      this product see the <a href="http://aws.amazon.com/sns/">Amazon SNS
      product page</a>. For detailed information about Amazon SNS features and
      their associated API calls, see the <a
      href="https://docs.aws.amazon.com/sns/latest/dg/">Amazon SNS Developer
      Guide</a>. </p> <p>For information on the permissions you need to use this
      API, see <a
      href="https://docs.aws.amazon.com/sns/latest/dg/sns-authentication-and-access-control.html">Identity
      and access management in Amazon SNS</a> in the <i>Amazon SNS Developer
      Guide.</i> </p> <p>We also provide SDKs that enable you to access Amazon
      SNS from your preferred programming language. The SDKs contain
      functionality that automatically takes care of tasks such as:
      cryptographically signing your service requests, retrying requests, and
      handling error responses. For a list of available SDKs, go to <a
      href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.
      </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sns-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sns-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sns-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sns
  - name: sqs
    description: >-
      <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a
      reliable, highly-scalable hosted queue for storing messages as they travel
      between applications or microservices. Amazon SQS moves data between
      distributed application components and helps you decouple these
      components.</p> <p>For information on the permissions you need to use this
      API, see <a
      href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html">Identity
      and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p>
      <p>You can use <a href="http://aws.amazon.com/tools/#sdk">Amazon Web
      Services SDKs</a> to access Amazon SQS using your favorite programming
      language. The SDKs perform tasks such as the following automatically:</p>
      <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li>
      <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul>
      <p> <b>Additional information</b> </p> <ul> <li> <p> <a
      href="http://aws.amazon.com/sqs/">Amazon SQS Product Page</a> </p> </li>
      <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html">Making
      API Requests</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon
      SQS Message Attributes</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Amazon
      SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a
      href="http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html">Amazon
      SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p>
      <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region">Regions
      and Endpoints</a> </p> </li> </ul> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sqs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sqs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sqs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sqs
  - name: servicecatalog
    description: >-
      <fullname>Service Catalog</fullname> <p> <a
      href="http://aws.amazon.com/servicecatalog">Service Catalog</a> enables
      organizations to create and manage catalogs of IT services that are
      approved for Amazon Web Services. To get the most out of this
      documentation, you should be familiar with the terminology discussed in <a
      href="http://docs.aws.amazon.com/servicecatalog/latest/adminguide/what-is_concepts.html">Service
      Catalog Concepts</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/servicecatalog-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/servicecatalog-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/servicecatalog-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:servicecatalog
  - name: ssm
    description: >-
      <p>Amazon Web Services Systems Manager is the operations hub for your
      Amazon Web Services applications and resources and a secure end-to-end
      management solution for hybrid cloud environments that enables safe and
      secure operations at scale.</p> <p>This reference is intended to be used
      with the <a
      href="https://docs.aws.amazon.com/systems-manager/latest/userguide/">Amazon
      Web Services Systems Manager User Guide</a>. To get started, see <a
      href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html">Setting
      up Amazon Web Services Systems Manager</a>.</p> <p class="title">
      <b>Related resources</b> </p> <ul> <li> <p>For information about each of
      the capabilities that comprise Systems Manager, see <a
      href="https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html#systems-manager-capabilities">Systems
      Manager capabilities</a> in the <i>Amazon Web Services Systems Manager
      User Guide</i>.</p> </li> <li> <p>For details about predefined runbooks
      for Automation, a capability of Amazon Web Services Systems Manager, see
      the <i> <a
      href="https://docs.aws.amazon.com/systems-manager-automation-runbooks/latest/userguide/automation-runbook-reference.html">Systems
      Manager Automation runbook reference</a> </i>.</p> </li> <li> <p>For
      information about AppConfig, a capability of Systems Manager, see the <i>
      <a
      href="https://docs.aws.amazon.com/appconfig/latest/userguide/">AppConfig
      User Guide</a> </i> and the <i> <a
      href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/">AppConfig
      API Reference</a> </i>.</p> </li> <li> <p>For information about Incident
      Manager, a capability of Systems Manager, see the <i> <a
      href="https://docs.aws.amazon.com/incident-manager/latest/userguide/">Systems
      Manager Incident Manager User Guide</a> </i> and the <i> <a
      href="https://docs.aws.amazon.com/incident-manager/latest/APIReference/">Systems
      Manager Incident Manager API Reference</a> </i>.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ssm-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ssm-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ssm-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ssm
  - name: signer
    description: >-
      <p>AWS Signer is a fully managed code-signing service to help you ensure
      the trust and integrity of your code. </p> <p>Signer supports the
      following applications:</p> <p>With code signing for AWS Lambda, you can
      sign <a href="http://docs.aws.amazon.com/lambda/latest/dg/">AWS Lambda</a>
      deployment packages. Integrated support is provided for <a
      href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/">Amazon S3</a>, <a
      href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/">Amazon
      CloudWatch</a>, and <a
      href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/">AWS
      CloudTrail</a>. In order to sign code, you create a signing profile and
      then use Signer to sign Lambda zip files in S3. </p> <p>With code signing
      for IoT, you can sign code for any IoT device that is supported by AWS.
      IoT code signing is available for <a
      href="http://docs.aws.amazon.com/freertos/latest/userguide/">Amazon
      FreeRTOS</a> and <a
      href="http://docs.aws.amazon.com/iot/latest/developerguide/">AWS IoT
      Device Management</a>, and is integrated with <a
      href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate
      Manager (ACM)</a>. In order to sign code, you import a third-party
      code-signing certificate using ACM, and use that to sign updates in Amazon
      FreeRTOS and AWS IoT Device Management. </p> <p>With Signer and the
      Notation CLI from the <a href="https://notaryproject.dev/">Notary&#x2028;
      Project</a>, you can sign container images stored in a container registry
      such as Amazon Elastic Container Registry (ECR). The signatures are stored
      in the registry alongside the images, where they are available for
      verifying image authenticity and integrity.</p> <p>For more information
      about Signer, see the <a
      href="https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html">AWS
      Signer Developer Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/signer-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/signer-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/signer-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:signer
  - name: ssm-incidents
    description: >-
      <p>Systems Manager Incident Manager is an incident management console
      designed to help users mitigate and recover from incidents affecting their
      Amazon Web Services-hosted applications. An incident is any unplanned
      interruption or reduction in quality of services. </p> <p>Incident Manager
      increases incident resolution by notifying responders of impact,
      highlighting relevant troubleshooting data, and providing collaboration
      tools to get services back up and running. To achieve the primary goal of
      reducing the time-to-resolution of critical incidents, Incident Manager
      automates response plans and enables responder team escalation. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ssm-incidents-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ssm-incidents-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ssm-incidents-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ssm-incidents
  - name: sso
    description: >-
      <p>AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a
      web service that makes it easy for you to assign user access to IAM
      Identity Center resources such as the AWS access portal. Users can get AWS
      account applications and roles assigned to them and get federated into the
      application.</p> <note> <p>Although AWS Single Sign-On was renamed, the
      <code>sso</code> and <code>identitystore</code> API namespaces will
      continue to retain their original name for backward compatibility
      purposes. For more information, see <a
      href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed">IAM
      Identity Center rename</a>.</p> </note> <p>This reference guide describes
      the IAM Identity Center Portal operations that you can call
      programatically and includes detailed information on data types and
      errors.</p> <note> <p>AWS provides SDKs that consist of libraries and
      sample code for various programming languages and platforms, such as Java,
      Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create
      programmatic access to IAM Identity Center and other AWS services. For
      more information about the AWS SDKs, including how to download and install
      them, see <a href="http://aws.amazon.com/tools/">Tools for Amazon Web
      Services</a>.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sso-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sso-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sso-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sso
  - name: ssm-sap
    description: >-
      <p>This API reference provides descriptions, syntax, and other details
      about each of the actions and data types for AWS Systems Manager for SAP.
      The topic for each action shows the API request parameters and responses.
      </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ssm-sap-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ssm-sap-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ssm-sap-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ssm-sap
  - name: sso-admin
    description: >-
      <p>IAM Identity Center (successor to Single Sign-On) helps you securely
      create, or connect, your workforce identities and manage their access
      centrally across Amazon Web Services accounts and applications. IAM
      Identity Center is the recommended approach for workforce authentication
      and authorization in Amazon Web Services, for organizations of any size
      and type.</p> <note> <p>IAM Identity Center uses the <code>sso</code> and
      <code>identitystore</code> API namespaces.</p> </note> <p>This reference
      guide provides information on single sign-on operations which could be
      used for access management of Amazon Web Services accounts. For
      information about IAM Identity Center features, see the <a
      href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">IAM
      Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity
      Center APIs rely on identifiers for users and groups, known as principals.
      For more information about how to work with principals and principal IDs
      in IAM Identity Center, see the <a
      href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html">Identity
      Store API Reference</a>.</p> <note> <p>Amazon Web Services provides SDKs
      that consist of libraries and sample code for various programming
      languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The
      SDKs provide a convenient way to create programmatic access to IAM
      Identity Center and other Amazon Web Services services. For more
      information about the Amazon Web Services SDKs, including how to download
      and install them, see <a href="http://aws.amazon.com/tools/">Tools for
      Amazon Web Services</a>.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sso-admin-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sso-admin-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sso-admin-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sso-admin
  - name: ssm-contacts
    description: >-
      <p>Systems Manager Incident Manager is an incident management console
      designed to help users mitigate and recover from incidents affecting their
      Amazon Web Services-hosted applications. An incident is any unplanned
      interruption or reduction in quality of services.</p> <p>Incident Manager
      increases incident resolution by notifying responders of impact,
      highlighting relevant troubleshooting data, and providing collaboration
      tools to get services back up and running. To achieve the primary goal of
      reducing the time-to-resolution of critical incidents, Incident Manager
      automates response plans and enables responder team escalation.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/ssm-contacts-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/ssm-contacts-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/ssm-contacts-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:ssm-contacts
  - name: states
    description: >-
      <fullname>Step Functions</fullname> <p>Step Functions is a service that
      lets you coordinate the components of distributed applications and
      microservices using visual workflows.</p> <p>You can use Step Functions to
      build applications from individual components, each of which performs a
      discrete function, or <i>task</i>, allowing you to scale and change
      applications quickly. Step Functions provides a console that helps
      visualize the components of your application as a series of steps. Step
      Functions automatically triggers and tracks each step, and retries steps
      when there are errors, so your application executes predictably and in the
      right order every time. Step Functions logs the state of each step, so you
      can quickly diagnose and debug any issues.</p> <p>Step Functions manages
      operations and underlying infrastructure to ensure your application is
      available at any scale. You can run tasks on Amazon Web Services, your own
      servers, or any system that has access to Amazon Web Services. You can
      access and use Step Functions using the console, the Amazon Web Services
      SDKs, or an HTTP API. For more information about Step Functions, see the
      <i> <a
      href="https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html">Step
      Functions Developer Guide</a> </i>.</p> <important> <p>If you use the Step
      Functions API actions using Amazon Web Services SDK integrations, make
      sure the API actions are in camel case and parameter names are in Pascal
      case. For example, you could use Step Functions API action
      <code>startSyncExecution</code> and specify its parameter as
      <code>StateMachineArn</code>.</p> </important>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/states-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/states-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/states-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:states
  - name: sso-oidc
    description: >-
      <p>IAM Identity Center OpenID Connect (OIDC) is a web service that enables
      a client (such as CLI or a native application) to register with IAM
      Identity Center. The service also enables the client to fetch the user’s
      access token upon successful authentication and authorization with IAM
      Identity Center.</p> <note> <p>IAM Identity Center uses the
      <code>sso</code> and <code>identitystore</code> API namespaces.</p>
      </note> <p> <b>Considerations for Using This Guide</b> </p> <p>Before you
      begin using this guide, we recommend that you first review the following
      important information about how the IAM Identity Center OIDC service
      works.</p> <ul> <li> <p>The IAM Identity Center OIDC service currently
      implements only the portions of the OAuth 2.0 Device Authorization Grant
      standard (<a
      href="https://tools.ietf.org/html/rfc8628">https://tools.ietf.org/html/rfc8628</a>)
      that are necessary to enable single sign-on authentication with the CLI.
      </p> </li> <li> <p>With older versions of the CLI, the service only emits
      OIDC access tokens, so to obtain a new token, users must explicitly
      re-authenticate. To access the OIDC flow that supports token refresh and
      doesn’t require re-authentication, update to the latest CLI version
      (1.27.10 for CLI V1 and 2.9.0 for CLI V2) with support for OIDC token
      refresh and configurable IAM Identity Center session durations. For more
      information, see <a
      href="https://docs.aws.amazon.com/singlesignon/latest/userguide/configure-user-session.html">Configure
      Amazon Web Services access portal session duration </a>. </p> </li> <li>
      <p>The access tokens provided by this service grant access to all Amazon
      Web Services account entitlements assigned to an IAM Identity Center user,
      not just a particular application.</p> </li> <li> <p>The documentation in
      this guide does not describe the mechanism to convert the access token
      into Amazon Web Services Auth (“sigv4”) credentials for use with
      IAM-protected Amazon Web Services service endpoints. For more information,
      see <a
      href="https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html">GetRoleCredentials</a>
      in the <i>IAM Identity Center Portal API Reference Guide</i>.</p> </li>
      </ul> <p>For general information about IAM Identity Center, see <a
      href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">What
      is IAM Identity Center?</a> in the <i>IAM Identity Center User
      Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sso-oidc-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sso-oidc-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sso-oidc-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sso-oidc
  - name: storagegateway
    description: >-
      <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the
      service that connects an on-premises software appliance with cloud-based
      storage to provide seamless and secure integration between an
      organization's on-premises IT environment and the Amazon Web Services
      storage infrastructure. The service enables you to securely upload data to
      the Amazon Web Services Cloud for cost effective backup and rapid disaster
      recovery.</p> <p>Use the following links to get started using the
      <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders">Storage
      Gateway required request headers</a>: Describes the required headers that
      you must send with every POST request to Storage Gateway.</p> </li> <li>
      <p> <a
      href="https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests">Signing
      requests</a>: Storage Gateway requires that you authenticate every request
      you send; this topic describes how sign such a request.</p> </li> <li> <p>
      <a
      href="https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses">Error
      responses</a>: Provides reference information about Storage Gateway
      errors.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html">Operations
      in Storage Gateway</a>: Contains detailed descriptions of all Storage
      Gateway operations, their request parameters, response elements, possible
      errors, and examples of requests and responses.</p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/general/latest/gr/sg.html">Storage
      Gateway endpoints and quotas</a>: Provides a list of each Amazon Web
      Services Region and the endpoints available for use with Storage
      Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in
      uppercase. When you use these resource IDs with the Amazon EC2 API, EC2
      expects resource IDs in lowercase. You must change your resource ID to
      lowercase to use it with the EC2 API. For example, in Storage Gateway the
      ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use
      this ID with the EC2 API, you must change it to
      <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not
      behave as expected.</p> </note> <important> <p>IDs for Storage Gateway
      volumes and Amazon EBS snapshots created from gateway volumes are changing
      to a longer format. Starting in December 2016, all new volumes and
      snapshots will be created with a 17-character string. Starting in April
      2016, you will be able to use these longer IDs so you can test your
      systems with the new format. For more information, see <a
      href="http://aws.amazon.com/ec2/faqs/#longer-ids">Longer EC2 and EBS
      resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN)
      with the longer volume ID format looks like the following:</p> <p>
      <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p>
      <p>A snapshot ID with the longer ID format looks like the following:
      <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a
      href="http://forums.aws.amazon.com/ann.jspa?annID=3557">Announcement:
      Heads-up – Longer Storage Gateway volume and snapshot IDs coming in
      2016</a>.</p> </important>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/storagegateway-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/storagegateway-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/storagegateway-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:storagegateway
  - name: supplychain
    description: >-
      <p> AWS Supply Chain is a cloud-based application that works with your
      enterprise resource planning (ERP) and supply chain management systems.
      Using AWS Supply Chain, you can connect and extract your inventory,
      supply, and demand related data from existing ERP or supply chain systems
      into a single data model. </p> <p>The AWS Supply Chain API supports
      configuration data import for Supply Planning.</p> <p> All AWS Supply
      chain API operations are Amazon-authenticated and certificate-signed. They
      not only require the use of the AWS SDK, but also allow for the exclusive
      use of AWS Identity and Access Management users and roles to help
      facilitate access, trust, and permission policies. </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/supplychain-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/supplychain-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/supplychain-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:supplychain
  - name: sts
    description: >-
      <fullname>Security Token Service</fullname> <p>Security Token Service
      (STS) enables you to request temporary, limited-privilege credentials for
      users. This guide provides descriptions of the STS API. For more
      information about using this service, see <a
      href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
      Security Credentials</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/sts-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/sts-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/sts-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:sts
  - name: support
    description: >-
      <fullname>Amazon Web Services Support</fullname> <p>The <i>Amazon Web
      Services Support API Reference</i> is intended for programmers who need
      detailed information about the Amazon Web Services Support operations and
      data types. You can use the API to manage your support cases
      programmatically. The Amazon Web Services Support API uses HTTP methods
      that return results in JSON format.</p> <note> <ul> <li> <p>You must have
      a Business, Enterprise On-Ramp, or Enterprise Support plan to use the
      Amazon Web Services Support API. </p> </li> <li> <p>If you call the Amazon
      Web Services Support API from an account that doesn't have a Business,
      Enterprise On-Ramp, or Enterprise Support plan, the
      <code>SubscriptionRequiredException</code> error message appears. For
      information about changing your support plan, see <a
      href="http://aws.amazon.com/premiumsupport/">Amazon Web Services
      Support</a>.</p> </li> </ul> </note> <p>You can also use the Amazon Web
      Services Support API to access features for <a
      href="http://aws.amazon.com/premiumsupport/trustedadvisor/">Trusted
      Advisor</a>. You can return a list of checks and their descriptions, get
      check results, specify checks to refresh, and get the refresh status of
      checks.</p> <p>You can manage your support cases with the following Amazon
      Web Services Support API operations:</p> <ul> <li> <p>The
      <a>CreateCase</a>, <a>DescribeCases</a>, <a>DescribeAttachment</a>, and
      <a>ResolveCase</a> operations create Amazon Web Services Support cases,
      retrieve information about cases, and resolve cases.</p> </li> <li> <p>The
      <a>DescribeCommunications</a>, <a>AddCommunicationToCase</a>, and
      <a>AddAttachmentsToSet</a> operations retrieve and add communications and
      attachments to Amazon Web Services Support cases.</p> </li> <li> <p>The
      <a>DescribeServices</a> and <a>DescribeSeverityLevels</a> operations
      return Amazon Web Service names, service codes, service categories, and
      problem severity levels. You use these values when you call the
      <a>CreateCase</a> operation.</p> </li> </ul> <p>You can also use the
      Amazon Web Services Support API to call the Trusted Advisor operations.
      For more information, see <a href="https://docs.aws.amazon.com/">Trusted
      Advisor</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
      <p>For authentication of requests, Amazon Web Services Support uses <a
      href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
      Version 4 Signing Process</a>.</p> <p>For more information about this
      service and the endpoints to use, see <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/about-support-api.html">About
      the Amazon Web Services Support API</a> in the <i>Amazon Web Services
      Support User Guide</i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/support-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/support-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/support-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:support
  - name: swf
    description: >-
      <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple
      Workflow Service (Amazon SWF) makes it easy to build applications that use
      Amazon's cloud to coordinate work across distributed components. In Amazon
      SWF, a <i>task</i> represents a logical unit of work that is performed by
      a component of your workflow. Coordinating tasks in a workflow involves
      managing intertask dependencies, scheduling, and concurrency in accordance
      with the logical flow of the application.</p> <p>Amazon SWF gives you full
      control over implementing tasks and coordinating them without worrying
      about underlying complexities such as tracking their progress and
      maintaining their state.</p> <p>This documentation serves as reference
      only. For a broader overview of the Amazon SWF programming model, see the
      <i> <a
      href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/">Amazon
      SWF Developer Guide</a> </i>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/swf-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/swf-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/swf-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:swf
  - name: support-app
    description: >-
      <p><fullname>Amazon Web Services Support App in Slack</fullname> <p>You
      can use the Amazon Web Services Support App in Slack API to manage your
      support cases in Slack for your Amazon Web Services account. After you
      configure your Slack workspace and channel with the Amazon Web Services
      Support App, you can perform the following tasks directly in your Slack
      channel:</p> <ul> <li> <p>Create, search, update, and resolve your support
      cases</p> </li> <li> <p>Request service quota increases for your
      account</p> </li> <li> <p>Invite Amazon Web Services Support agents to
      your channel so that you can chat directly about your support cases</p>
      </li> </ul> <p>For more information about how to perform these actions in
      Slack, see the following documentation in the <i>Amazon Web Services
      Support User Guide</i>:</p> <ul> <li> <p> <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/aws-support-app-for-slack.html">Amazon
      Web Services Support App in Slack</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/joining-a-live-chat-session.html">Joining
      a live chat session with Amazon Web Services Support</a> </p> </li> <li>
      <p> <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/service-quota-increase.html">Requesting
      service quota increases</a> </p> </li> <li> <p> <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-commands.html">Amazon
      Web Services Support App commands in Slack</a> </p> </li> </ul> <p>You can
      also use the Amazon Web Services Management Console instead of the Amazon
      Web Services Support App API to manage your Slack configurations. For more
      information, see <a
      href="https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html">Authorize
      a Slack workspace to enable the Amazon Web Services Support App</a>.</p>
      <note> <ul> <li> <p>You must have a Business or Enterprise Support plan to
      use the Amazon Web Services Support App API. </p> </li> <li> <p>For more
      information about the Amazon Web Services Support App endpoints, see the
      <a
      href="https://docs.aws.amazon.com/general/latest/gr/awssupport.html#awssupport_app_region">Amazon
      Web Services Support App in Slack endpoints</a> in the <i>Amazon Web
      Services General Reference</i>.</p> </li> </ul> </note></p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/support-app-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/support-app-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/support-app-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:support-app
  - name: synthetics
    description: >-
      <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon
      CloudWatch Synthetics to continually monitor your services. You can create
      and manage <i>canaries</i>, which are modular, lightweight scripts that
      monitor your endpoints and APIs from the outside-in. You can set up your
      canaries to run 24 hours a day, once per minute. The canaries help you
      check the availability and latency of your web services and troubleshoot
      anomalies by investigating load time data, screenshots of the UI, logs,
      and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens
      to help you trace the causes of impacted nodes in your applications. For
      more information, see <a
      href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html">Using
      ServiceLens to Monitor the Health of Your Applications</a> in the
      <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage
      canaries, be aware of the security considerations. For more information,
      see <a
      href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html">Security
      Considerations for Synthetics Canaries</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/synthetics-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/synthetics-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/synthetics-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:synthetics
  - name: streams.dynamodb
    description: >-
      <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides
      API actions for accessing streams and processing stream records. To learn
      more about application development with Streams, see <a
      href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">Capturing
      Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer
      Guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/streamsdynamodb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/streamsdynamodb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/streamsdynamodb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:streamsdynamodb
  - name: timestream-query
    description: <fullname>Amazon Timestream Query </fullname> <p/>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/timestream-query-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/timestream-query-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/timestream-query-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:timestream-query
  - name: textract
    description: >-
      <p>Amazon Textract detects and analyzes text in documents and converts it
      into machine-readable text. This is the API reference documentation for
      Amazon Textract.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/textract-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/textract-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/textract-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:textract
  - name: timestream-write
    description: >-
      <fullname>Amazon Timestream Write</fullname> <p>Amazon Timestream is a
      fast, scalable, fully managed time-series database service that makes it
      easy to store and analyze trillions of time-series data points per day.
      With Timestream, you can easily store and analyze IoT sensor data to
      derive insights from your IoT applications. You can analyze industrial
      telemetry to streamline equipment management and maintenance. You can also
      store and analyze log data and metrics to improve the performance and
      availability of your applications. </p> <p>Timestream is built from the
      ground up to effectively ingest, process, and store time-series data. It
      organizes data to optimize query processing. It automatically scales based
      on the volume of data ingested and on the query volume to ensure you
      receive optimal performance while inserting and querying data. As your
      data grows over time, Timestream’s adaptive query processing engine spans
      across storage tiers to provide fast analysis while reducing costs.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/timestream-write-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/timestream-write-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/timestream-write-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:timestream-write
  - name: transfer
    description: >-
      <p>Transfer Family is a fully managed service that enables the transfer of
      files over the File Transfer Protocol (FTP), File Transfer Protocol over
      SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly
      into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS.
      Additionally, you can use Applicability Statement 2 (AS2) to transfer
      files into and out of Amazon S3. Amazon Web Services helps you seamlessly
      migrate your file transfer workflows to Transfer Family by integrating
      with existing authentication systems, and providing DNS routing with
      Amazon Route 53 so nothing changes for your customers and partners, or
      their applications. With your data in Amazon S3, you can use it with
      Amazon Web Services for processing, analytics, machine learning, and
      archiving. Getting started with Transfer Family is easy since there is no
      infrastructure to buy and set up.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/transfer-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/transfer-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/transfer-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:transfer
  - name: transcribe-streaming
    description: >-
      <p>Amazon Transcribe streaming offers three main types of real-time
      transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call
      Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the
      most common option. Refer to for details.</p> </li> <li> <p> <b>Medical
      transcriptions</b> are tailored to medical professionals and incorporate
      medical terms. A common use case for this service is transcribing
      doctor-patient dialogue in real time, so doctors can focus on their
      patient instead of taking notes. Refer to for details.</p> </li> <li> <p>
      <b>Call Analytics transcriptions</b> are designed for use with call center
      audio on two different channels; if you're looking for insight into
      customer service calls, use this option. Refer to for details.</p> </li>
      </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/transcribe-streaming-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/transcribe-streaming-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/transcribe-streaming-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:transcribe-streaming
  - name: transcribe
    description: >-
      <p>Amazon Transcribe offers three main types of batch transcription:
      <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li>
      <p> <b>Standard transcriptions</b> are the most common option. Refer to
      for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored
      to medical professionals and incorporate medical terms. A common use case
      for this service is transcribing doctor-patient dialogue into after-visit
      notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics
      transcriptions</b> are designed for use with call center audio on two
      different channels; if you're looking for insight into customer service
      calls, use this option. Refer to for details.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/transcribe-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/transcribe-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/transcribe-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:transcribe
  - name: tnb
    description: >-
      <p> Amazon Web Services Telco Network Builder (TNB) is a network
      automation service that helps you deploy and manage telecom networks. AWS
      TNB helps you with the lifecycle management of your telecommunication
      network functions throughout planning, deployment, and post-deployment
      activities.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/tnb-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/tnb-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/tnb-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:tnb
  - name: translate
    description: >-
      <p>Provides translation of the input content from the source language to
      the target language.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/translate-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/translate-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/translate-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:translate
  - name: verifiedpermissions
    description: >-
      <p>Amazon Verified Permissions is a permissions management service from
      Amazon Web Services. You can use Verified Permissions to manage
      permissions for your application, and authorize user access based on those
      permissions. Using Verified Permissions, application developers can grant
      access based on information about the users, resources, and requested
      actions. You can also evaluate additional information like group
      membership, attributes of the resources, and session context, such as time
      of request and IP addresses. Verified Permissions manages these
      permissions by letting you create and store authorization policies for
      your applications, such as consumer-facing web sites and enterprise
      business systems.</p> <p>Verified Permissions uses Cedar as the policy
      language to express your permission requirements. Cedar supports both
      role-based access control (RBAC) and attribute-based access control (ABAC)
      authorization models.</p> <p>For more information about configuring,
      administering, and using Amazon Verified Permissions in your applications,
      see the <a
      href="https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/">Amazon
      Verified Permissions User Guide</a>.</p> <p>For more information about the
      Cedar policy language, see the <a
      href="https://docs.cedarpolicy.com/">Cedar Policy Language Guide</a>.</p>
      <important> <p>When you write Cedar policies that reference principals,
      resources and actions, you can define the unique identifiers used for each
      of those elements. We strongly recommend that you follow these best
      practices:</p> <ul> <li> <p> <b>Use values like universally unique
      identifiers (UUIDs) for all principal and resource identifiers.</b> </p>
      <p>For example, if user <code>jane</code> leaves the company, and you
      later let someone else use the name <code>jane</code>, then that new user
      automatically gets access to everything granted by policies that still
      reference <code>User::"jane"</code>. Cedar can’t distinguish between the
      new user and the old. This applies to both principal and resource
      identifiers. Always use identifiers that are guaranteed unique and never
      reused to ensure that you don’t unintentionally grant access because of
      the presence of an old identifier in a policy.</p> <p>Where you use a UUID
      for an entity, we recommend that you follow it with the // comment
      specifier and the ‘friendly’ name of your entity. This helps to make your
      policies easier to understand. For example: principal ==
      User::"a1b2c3d4-e5f6-a1b2-c3d4-EXAMPLE11111", // alice</p> </li> <li> <p>
      <b>Do not include personally identifying, confidential, or sensitive
      information as part of the unique identifier for your principals or
      resources.</b> These identifiers are included in log entries shared in
      CloudTrail trails.</p> </li> </ul> </important> <p>Several operations
      return structures that appear similar, but have different purposes. As new
      functionality is added to the product, the structure used in a parameter
      of one operation might need to change in a way that wouldn't make sense
      for the same parameter in a different operation. To help you understand
      the purpose of each, the following naming convention is used for the
      structures:</p> <ul> <li> <p>Parameter type structures that end in
      <code>Detail</code> are used in <code>Get</code> operations.</p> </li>
      <li> <p>Parameter type structures that end in <code>Item</code> are used
      in <code>List</code> operations.</p> </li> <li> <p>Parameter type
      structures that use neither suffix are used in the mutating (create and
      update) operations.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/verifiedpermissions-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/verifiedpermissions-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/verifiedpermissions-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:verifiedpermissions
  - name: trustedadvisor
    description: <p>TrustedAdvisor Public API</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/trustedadvisor-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/trustedadvisor-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/trustedadvisor-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:trustedadvisor
  - name: vpc-lattice
    description: >-
      <p>Amazon VPC Lattice is a fully managed application networking service
      that you use to connect, secure, and monitor all of your services across
      multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice
      interconnects your microservices and legacy services within a logical
      boundary, so that you can discover and manage them more efficiently. For
      more information, see the <a
      href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/">Amazon VPC
      Lattice User Guide</a> </p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/vpc-lattice-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/vpc-lattice-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/vpc-lattice-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:vpc-lattice
  - name: waf
    description: >-
      <note> <p>This is <b>AWS WAF Classic</b> documentation. For more
      information, see <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS
      WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version
      of AWS WAF</b>, use the AWS WAFV2 API and see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS
      WAF Developer Guide</a>. With the latest version, AWS WAF has a single set
      of endpoints for regional and global use. </p> </note> <p>This is the
      <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon
      CloudFront. The AWS WAF Classic actions and data types listed in the
      reference are available for protecting Amazon CloudFront distributions.
      You can use these actions and data types via the endpoint
      <i>waf.amazonaws.com</i>. This guide is for developers who need detailed
      information about the AWS WAF Classic API actions, data types, and errors.
      For detailed information about AWS WAF Classic features and an overview of
      how to use the AWS WAF Classic API, see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS
      WAF Classic</a> in the developer guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/waf-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/waf-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/waf-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:waf
  - name: voice-id
    description: >-
      <p>Amazon Connect Voice ID provides real-time caller authentication and
      fraud risk detection, which make voice interactions in contact centers
      more secure and efficient.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/voice-id-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/voice-id-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/voice-id-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:voice-id
  - name: wisdom
    description: >-
      <p>Amazon Connect Wisdom delivers agents the information they need to
      solve customer issues as they're actively speaking with customers. Agents
      can search across connected repositories from within their agent desktop
      to find answers quickly. Use Amazon Connect Wisdom to create an assistant
      and a knowledge base, for example, or manage content by uploading custom
      files.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/wisdom-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/wisdom-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/wisdom-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:wisdom
  - name: waf-regional
    description: >-
      <note> <p>This is <b>AWS WAF Classic Regional</b> documentation. For more
      information, see <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS
      WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version
      of AWS WAF</b>, use the AWS WAFV2 API and see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">AWS
      WAF Developer Guide</a>. With the latest version, AWS WAF has a single set
      of endpoints for regional and global use. </p> </note> <p>This is the
      <i>AWS WAF Regional Classic API Reference</i> for using AWS WAF Classic
      with the AWS resources, Elastic Load Balancing (ELB) Application Load
      Balancers and API Gateway APIs. The AWS WAF Classic actions and data types
      listed in the reference are available for protecting Elastic Load
      Balancing (ELB) Application Load Balancers and API Gateway APIs. You can
      use these actions and data types by means of the endpoints listed in <a
      href="https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region">AWS
      Regions and Endpoints</a>. This guide is for developers who need detailed
      information about the AWS WAF Classic API actions, data types, and errors.
      For detailed information about AWS WAF Classic features and an overview of
      how to use the AWS WAF Classic API, see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html">AWS
      WAF Classic</a> in the developer guide.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/waf-regional-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/waf-regional-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/waf-regional-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:waf-regional
  - name: wellarchitected
    description: >-
      <fullname>Well-Architected Tool</fullname> <p>This is the
      <i>Well-Architected Tool API Reference</i>. The WA Tool API provides
      programmatic access to the <a
      href="http://aws.amazon.com/well-architected-tool">Well-Architected
      Tool</a> in the <a
      href="https://console.aws.amazon.com/wellarchitected">Amazon Web Services
      Management Console</a>. For information about the Well-Architected Tool,
      see the <a
      href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html">Well-Architected
      Tool User Guide</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/wellarchitected-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/wellarchitected-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/wellarchitected-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:wellarchitected
  - name: wafv2
    description: >-
      <fullname>WAF</fullname> <note> <p>This is the latest version of the
      <b>WAF</b> API, released in November, 2019. The names of the entities that
      you use to access this API, like endpoints and namespaces, all have the
      versioning information added, like "V2" or "v2", to distinguish from the
      prior version. We recommend migrating your resources to this version,
      because it has a number of significant improvements.</p> <p>If you used
      WAF prior to this release, you can't use this WAFV2 API to access any WAF
      resources that you created before. You can access your old rules, web
      ACLs, and other WAF resources only through the WAF Classic APIs. The WAF
      Classic APIs have retained the prior names, endpoints, and namespaces.
      </p> <p>For information, including how to migrate your WAF resources to
      this version, see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF
      Developer Guide</a>. </p> </note> <p>WAF is a web application firewall
      that lets you monitor the HTTP and HTTPS requests that are forwarded to an
      Amazon CloudFront distribution, Amazon API Gateway REST API, Application
      Load Balancer, AppSync GraphQL API, Amazon Cognito user pool, App Runner
      service, or Amazon Web Services Verified Access instance. WAF also lets
      you control access to your content, to protect the Amazon Web Services
      resource that WAF is monitoring. Based on conditions that you specify,
      such as the IP addresses that requests originate from or the values of
      query strings, the protected resource responds to requests with either the
      requested content, an HTTP 403 status code (Forbidden), or with a custom
      response. </p> <p>This API guide is for developers who need detailed
      information about WAF API actions, data types, and errors. For detailed
      information about WAF features and guidance for configuring and using WAF,
      see the <a
      href="https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html">WAF
      Developer Guide</a>.</p> <p>You can make calls using the endpoints listed
      in <a href="https://docs.aws.amazon.com/general/latest/gr/waf.html">WAF
      endpoints and quotas</a>. </p> <ul> <li> <p>For regional applications, you
      can use any of the endpoints in the list. A regional application can be an
      Application Load Balancer (ALB), an Amazon API Gateway REST API, an
      AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service,
      or an Amazon Web Services Verified Access instance. </p> </li> <li> <p>For
      Amazon CloudFront applications, you must use the API endpoint listed for
      US East (N. Virginia): us-east-1.</p> </li> </ul> <p>Alternatively, you
      can use one of the Amazon Web Services SDKs to access an API that's
      tailored to the programming language or platform that you're using. For
      more information, see <a href="http://aws.amazon.com/tools/#SDKs">Amazon
      Web Services SDKs</a>.</p> <p>We currently provide two versions of the WAF
      API: this API and the prior versions, the classic WAF APIs. This new API
      provides the same functionality as the older versions, with the following
      major improvements:</p> <ul> <li> <p>You use one API for both global and
      regional applications. Where you need to distinguish the scope, you
      specify a <code>Scope</code> parameter and set it to
      <code>CLOUDFRONT</code> or <code>REGIONAL</code>. </p> </li> <li> <p>You
      can define a web ACL or rule group with a single call, and update it with
      a single call. You define all rule specifications in JSON format, and pass
      them to your rule group or web ACL calls.</p> </li> <li> <p>The limits WAF
      places on the use of rules more closely reflects the cost of running each
      type of rule. Rule groups include capacity settings, so you know the
      maximum cost of a rule group when you use it.</p> </li> </ul>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/wafv2-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/wafv2-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/wafv2-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:wafv2
  - name: worklink
    description: >-
      <p>Amazon WorkLink is a cloud-based service that provides secure access to
      internal websites and web apps from iOS and Android phones. In a single
      step, your users, such as employees, can access internal websites as
      efficiently as they access any other public website. They enter a URL in
      their web browser, or choose a link to an internal website in an email.
      Amazon WorkLink authenticates the user's access and securely renders
      authorized internal web content in a secure rendering service in the AWS
      cloud. Amazon WorkLink doesn't download or store any internal web content
      on mobile devices.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/worklink-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/worklink-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/worklink-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:worklink
  - name: workmail
    description: >-
      <p>WorkMail is a secure, managed business email and calendaring service
      with support for existing desktop and mobile email clients. You can access
      your email, contacts, and calendars using Microsoft Outlook, your browser,
      or other native iOS and Android email applications. You can integrate
      WorkMail with your existing corporate directory and control both the keys
      that encrypt your data and the location in which your data is stored.</p>
      <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li>
      <p>Listing and describing organizations</p> </li> </ul> <ul> <li>
      <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li>
      </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API
      operations are Amazon-authenticated and certificate-signed. They not only
      require the use of the AWS SDK, but also allow for the exclusive use of
      AWS Identity and Access Management users and roles to help facilitate
      access, trust, and permission policies. By creating a role and allowing an
      IAM user to access the WorkMail site, the IAM user gains full
      administrative visibility into the entire WorkMail organization (or as set
      in the IAM policy). This includes, but is not limited to, the ability to
      create, update, and delete users, groups, and resources. This allows
      developers to perform the scenarios listed above, as well as give users
      the ability to grant access on a selective basis using the IAM model.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workmail-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workmail-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workmail-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workmail
  - name: workspaces
    description: >-
      <fullname>Amazon WorkSpaces Service</fullname> <p>Amazon WorkSpaces
      enables you to provision virtual, cloud-based Microsoft Windows or Amazon
      Linux desktops for your users, known as <i>WorkSpaces</i>. WorkSpaces
      eliminates the need to procure and deploy hardware or install complex
      software. You can quickly add or remove users as your needs change. Users
      can access their virtual desktops from multiple devices or web
      browsers.</p> <p>This API Reference provides detailed information about
      the actions, data types, parameters, and errors of the WorkSpaces service.
      For more information about the supported Amazon Web Services Regions,
      endpoints, and service quotas of the Amazon WorkSpaces service, see <a
      href="https://docs.aws.amazon.com/general/latest/gr/wsp.html">WorkSpaces
      endpoints and quotas</a> in the <i>Amazon Web Services General
      Reference</i>.</p> <p>You can also manage your WorkSpaces resources using
      the WorkSpaces console, Command Line Interface (CLI), and SDKs. For more
      information about administering WorkSpaces, see the <a
      href="https://docs.aws.amazon.com/workspaces/latest/adminguide/">Amazon
      WorkSpaces Administration Guide</a>. For more information about using the
      Amazon WorkSpaces client application or web browser to access provisioned
      WorkSpaces, see the <a
      href="https://docs.aws.amazon.com/workspaces/latest/userguide/">Amazon
      WorkSpaces User Guide</a>. For more information about using the CLI to
      manage your WorkSpaces resources, see the <a
      href="https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html">WorkSpaces
      section of the CLI Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workspaces-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workspaces-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workspaces-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workspaces
  - name: workspaces-thin-client
    description: >-
      <p>Amazon WorkSpaces Thin Client is a affordable device built to work with
      Amazon Web Services End User Computing (EUC) virtual desktops to provide
      users with a complete cloud desktop solution. WorkSpaces Thin Client is a
      compact device designed to connect up to two monitors and USB devices like
      a keyboard, mouse, headset, and webcam. To maximize endpoint security,
      WorkSpaces Thin Client devices do not allow local data storage or
      installation of unapproved applications. The WorkSpaces Thin Client device
      ships preloaded with device management software.</p> <p>You can use these
      APIs to complete WorkSpaces Thin Client tasks, such as creating
      environments or viewing devices. For more information about WorkSpaces
      Thin Client, including the required permissions to use the service, see
      the <a
      href="https://docs.aws.amazon.com/workspaces-thin-client/latest/ag/">Amazon
      WorkSpaces Thin Client Administrator Guide</a>. For more information about
      using the Command Line Interface (CLI) to manage your WorkSpaces Thin
      Client resources, see the <a
      href="https://docs.aws.amazon.com/cli/latest/reference/workspaces-thin-client/index.html">WorkSpaces
      Thin Client section of the CLI Reference</a>.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workspaces-thin-client-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workspaces-thin-client-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workspaces-thin-client-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workspaces-thin-client
  - name: workdocs
    description: >-
      <p>The Amazon WorkDocs API is designed for the following use cases:</p>
      <ul> <li> <p>File Migration: File migration applications are supported for
      users who want to migrate their files from an on-premises or off-premises
      file system or service. Users can insert files into a user directory
      structure, as well as allow for basic metadata changes, such as
      modifications to the permissions of files.</p> </li> <li> <p>Security:
      Support security applications are supported for users who have additional
      security needs, such as antivirus or data loss prevention. The API
      actions, along with CloudTrail, allow these applications to detect when
      changes occur in Amazon WorkDocs. Then, the application can take the
      necessary actions and replace the target file. If the target file violates
      the policy, the application can also choose to email the user.</p> </li>
      <li> <p>eDiscovery/Analytics: General administrative applications are
      supported, such as eDiscovery and analytics. These applications can choose
      to mimic or record the actions in an Amazon WorkDocs site, along with
      CloudTrail, to replicate data for eDiscovery, backup, or analytical
      applications.</p> </li> </ul> <p>All Amazon WorkDocs API actions are
      Amazon authenticated and certificate-signed. They not only require the use
      of the Amazon Web Services SDK, but also allow for the exclusive use of
      IAM users and roles to help facilitate access, trust, and permission
      policies. By creating a role and allowing an IAM user to access the Amazon
      WorkDocs site, the IAM user gains full administrative visibility into the
      entire Amazon WorkDocs site (or as set in the IAM policy). This includes,
      but is not limited to, the ability to modify file permissions and upload
      any file to any user. This allows developers to perform the three use
      cases above, as well as give users the ability to grant access on a
      selective basis using the IAM model.</p> <note> <p>The pricing for Amazon
      WorkDocs APIs varies depending on the API call type for these actions:</p>
      <ul> <li> <p> <code>READ (Get*)</code> </p> </li> <li> <p> <code>WRITE
      (Activate*, Add*, Create*, Deactivate*, Initiate*, Update*)</code> </p>
      </li> <li> <p> <code>LIST (Describe*)</code> </p> </li> <li> <p>
      <code>DELETE*, CANCEL</code> </p> </li> </ul> <p>For information about
      Amazon WorkDocs API pricing, see <a
      href="https://aws.amazon.com/workdocs/pricing/">Amazon WorkDocs
      Pricing</a>.</p> </note>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workdocs-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workdocs-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workdocs-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workdocs
  - name: workmailmessageflow
    description: >-
      <p>The WorkMail Message Flow API provides access to email messages as they
      are being sent and received by a WorkMail organization.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workmailmessageflow-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workmailmessageflow-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workmailmessageflow-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workmailmessageflow
  - name: workspaces-web
    description: >-
      <p>WorkSpaces Web is a low cost, fully managed WorkSpace built
      specifically to facilitate secure, web-based workloads. WorkSpaces Web
      makes it easy for customers to safely provide their employees with access
      to internal websites and SaaS web applications without the administrative
      burden of appliances or specialized client software. WorkSpaces Web
      provides simple policy tools tailored for user interactions, while
      offloading common tasks like capacity management, scaling, and maintaining
      browser images.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/workspaces-web-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/workspaces-web-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/workspaces-web-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:workspaces-web
  - name: xray
    description: >-
      <p>Amazon Web Services X-Ray provides APIs for managing debug traces and
      retrieving service maps and other data created by processing those
      traces.</p>
    image: https://kinlane-productions2.s3.amazonaws.com/apis-json/apis-json-logo.jpg
    humanURL: https://example.com
    baseURL: https://example.com
    tags: []
    properties:
      - type: Documentation
        url: https://example.com
      - type: OpenAPI
        url: properties/xray-openapi-original.yml
    overlays:
      - type: APIs.io Search
        url: overlays/xray-openapi-search.yml
      - type: API Evangelist Ratings
        url: overlays/xray-openapi-api-evangelist-ratings.yml
    aid: amazon-web-services:xray
common:
  - type: Getting Started
    url: https://aws.amazon.com/getting-started/?nc1=f_cc
  - type: SDKs
    url: https://aws.amazon.com/developer/tools/?nc1=f_dr
  - type: Blog
    url: https://aws.amazon.com/blogs/?nc1=f_cc
  - type: Support
    url: https://aws.amazon.com/premiumsupport/?nc1=f_dr
  - type: LinkedIn
    url: https://www.linkedin.com/company/amazon-web-services/
  - type: Whats New
    url: https://aws.amazon.com/new/?nc1=f_cc
  - type: SignUp
    url: https://portal.aws.amazon.com/billing/signup
  - type: Login
    url: https://signin.aws.amazon.com/signin
  - type: Terms of Service
    url: https://aws.amazon.com/serviceterms/
  - type: Privacy Policy
    url: https://aws.amazon.com/privacy/
maintainers:
  - FN: API Evangelist
    url: https://apievangelist.com
    email: info@apievangelist.com
overlays:
  - type: APIs.io Search
    url: overlays/apis-io-search.yml
  - type: API Evangelist Ratings
    url: overlays/apis-io-search.yml
aid: amazon-web-services
